ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\cc27StaX.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"SPI_INT.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.SPI_TX_ISR,"ax",%progbits
  19              		.align	2
  20              		.global	SPI_TX_ISR
  21              		.thumb
  22              		.thumb_func
  23              		.type	SPI_TX_ISR, %function
  24              	SPI_TX_ISR:
  25              	.LFB0:
  26              		.file 1 ".\\Generated_Source\\PSoC5\\SPI_INT.c"
   1:.\Generated_Source\PSoC5/SPI_INT.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/SPI_INT.c **** * File Name: SPI_INT.c
   3:.\Generated_Source\PSoC5/SPI_INT.c **** * Version 2.40
   4:.\Generated_Source\PSoC5/SPI_INT.c **** *
   5:.\Generated_Source\PSoC5/SPI_INT.c **** * Description:
   6:.\Generated_Source\PSoC5/SPI_INT.c **** *  This file provides all Interrupt Service Routine (ISR) for the SPI Master
   7:.\Generated_Source\PSoC5/SPI_INT.c **** *  component.
   8:.\Generated_Source\PSoC5/SPI_INT.c **** *
   9:.\Generated_Source\PSoC5/SPI_INT.c **** * Note:
  10:.\Generated_Source\PSoC5/SPI_INT.c **** *  None.
  11:.\Generated_Source\PSoC5/SPI_INT.c **** *
  12:.\Generated_Source\PSoC5/SPI_INT.c **** ********************************************************************************
  13:.\Generated_Source\PSoC5/SPI_INT.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  14:.\Generated_Source\PSoC5/SPI_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:.\Generated_Source\PSoC5/SPI_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:.\Generated_Source\PSoC5/SPI_INT.c **** * the software package with which this file was provided.
  17:.\Generated_Source\PSoC5/SPI_INT.c **** *******************************************************************************/
  18:.\Generated_Source\PSoC5/SPI_INT.c **** 
  19:.\Generated_Source\PSoC5/SPI_INT.c **** #include "SPI_PVT.h"
  20:.\Generated_Source\PSoC5/SPI_INT.c **** 
  21:.\Generated_Source\PSoC5/SPI_INT.c **** /* User code required at start of ISR */
  22:.\Generated_Source\PSoC5/SPI_INT.c **** /* `#START SPI_ISR_START_DEF` */
  23:.\Generated_Source\PSoC5/SPI_INT.c **** 
  24:.\Generated_Source\PSoC5/SPI_INT.c **** /* `#END` */
  25:.\Generated_Source\PSoC5/SPI_INT.c **** 
  26:.\Generated_Source\PSoC5/SPI_INT.c **** 
  27:.\Generated_Source\PSoC5/SPI_INT.c **** /*******************************************************************************
  28:.\Generated_Source\PSoC5/SPI_INT.c **** * Function Name: SPI_TX_ISR
  29:.\Generated_Source\PSoC5/SPI_INT.c **** ********************************************************************************
  30:.\Generated_Source\PSoC5/SPI_INT.c **** *
  31:.\Generated_Source\PSoC5/SPI_INT.c **** * Summary:
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\cc27StaX.s 			page 2


  32:.\Generated_Source\PSoC5/SPI_INT.c **** *  Interrupt Service Routine for TX portion of the SPI Master.
  33:.\Generated_Source\PSoC5/SPI_INT.c **** *
  34:.\Generated_Source\PSoC5/SPI_INT.c **** * Parameters:
  35:.\Generated_Source\PSoC5/SPI_INT.c **** *  None.
  36:.\Generated_Source\PSoC5/SPI_INT.c **** *
  37:.\Generated_Source\PSoC5/SPI_INT.c **** * Return:
  38:.\Generated_Source\PSoC5/SPI_INT.c **** *  None.
  39:.\Generated_Source\PSoC5/SPI_INT.c **** *
  40:.\Generated_Source\PSoC5/SPI_INT.c **** * Global variables:
  41:.\Generated_Source\PSoC5/SPI_INT.c **** *  SPI_txBufferWrite - used for the account of the bytes which
  42:.\Generated_Source\PSoC5/SPI_INT.c **** *  have been written down in the TX software buffer.
  43:.\Generated_Source\PSoC5/SPI_INT.c **** *  SPI_txBufferRead - used for the account of the bytes which
  44:.\Generated_Source\PSoC5/SPI_INT.c **** *  have been read from the TX software buffer, modified when exist data to
  45:.\Generated_Source\PSoC5/SPI_INT.c **** *  sending and FIFO Not Full.
  46:.\Generated_Source\PSoC5/SPI_INT.c **** *  SPI_txBuffer[SPI_TX_BUFFER_SIZE] - used to store
  47:.\Generated_Source\PSoC5/SPI_INT.c **** *  data to sending.
  48:.\Generated_Source\PSoC5/SPI_INT.c **** *  All described above Global variables are used when Software Buffer is used.
  49:.\Generated_Source\PSoC5/SPI_INT.c **** *
  50:.\Generated_Source\PSoC5/SPI_INT.c **** *******************************************************************************/
  51:.\Generated_Source\PSoC5/SPI_INT.c **** CY_ISR(SPI_TX_ISR)
  52:.\Generated_Source\PSoC5/SPI_INT.c **** {
  27              		.loc 1 52 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
  53:.\Generated_Source\PSoC5/SPI_INT.c ****     #if(SPI_TX_SOFTWARE_BUF_ENABLED)
  54:.\Generated_Source\PSoC5/SPI_INT.c ****         uint8 tmpStatus;
  55:.\Generated_Source\PSoC5/SPI_INT.c ****     #endif /* (SPI_TX_SOFTWARE_BUF_ENABLED) */
  56:.\Generated_Source\PSoC5/SPI_INT.c **** 
  57:.\Generated_Source\PSoC5/SPI_INT.c ****     /* User code required at start of ISR */
  58:.\Generated_Source\PSoC5/SPI_INT.c ****     /* `#START SPI_TX_ISR_START` */
  59:.\Generated_Source\PSoC5/SPI_INT.c **** 
  60:.\Generated_Source\PSoC5/SPI_INT.c ****     /* `#END` */
  61:.\Generated_Source\PSoC5/SPI_INT.c **** 
  62:.\Generated_Source\PSoC5/SPI_INT.c ****     #if(SPI_TX_SOFTWARE_BUF_ENABLED)
  63:.\Generated_Source\PSoC5/SPI_INT.c ****         /* Check if TX data buffer is not empty and there is space in TX FIFO */
  64:.\Generated_Source\PSoC5/SPI_INT.c ****         while(SPI_txBufferRead != SPI_txBufferWrite)
  65:.\Generated_Source\PSoC5/SPI_INT.c ****         {
  66:.\Generated_Source\PSoC5/SPI_INT.c ****             tmpStatus = SPI_GET_STATUS_TX(SPI_swStatusTx);
  67:.\Generated_Source\PSoC5/SPI_INT.c ****             SPI_swStatusTx = tmpStatus;
  68:.\Generated_Source\PSoC5/SPI_INT.c **** 
  69:.\Generated_Source\PSoC5/SPI_INT.c ****             if(0u != (SPI_swStatusTx & SPI_STS_TX_FIFO_NOT_FULL))
  70:.\Generated_Source\PSoC5/SPI_INT.c ****             {
  71:.\Generated_Source\PSoC5/SPI_INT.c ****                 if(0u == SPI_txBufferFull)
  72:.\Generated_Source\PSoC5/SPI_INT.c ****                 {
  73:.\Generated_Source\PSoC5/SPI_INT.c ****                    SPI_txBufferRead++;
  74:.\Generated_Source\PSoC5/SPI_INT.c **** 
  75:.\Generated_Source\PSoC5/SPI_INT.c ****                     if(SPI_txBufferRead >= SPI_TX_BUFFER_SIZE)
  76:.\Generated_Source\PSoC5/SPI_INT.c ****                     {
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\cc27StaX.s 			page 3


  77:.\Generated_Source\PSoC5/SPI_INT.c ****                         SPI_txBufferRead = 0u;
  78:.\Generated_Source\PSoC5/SPI_INT.c ****                     }
  79:.\Generated_Source\PSoC5/SPI_INT.c ****                 }
  80:.\Generated_Source\PSoC5/SPI_INT.c ****                 else
  81:.\Generated_Source\PSoC5/SPI_INT.c ****                 {
  82:.\Generated_Source\PSoC5/SPI_INT.c ****                     SPI_txBufferFull = 0u;
  83:.\Generated_Source\PSoC5/SPI_INT.c ****                 }
  84:.\Generated_Source\PSoC5/SPI_INT.c **** 
  85:.\Generated_Source\PSoC5/SPI_INT.c ****                 /* Move data from the Buffer to the FIFO */
  86:.\Generated_Source\PSoC5/SPI_INT.c ****                 CY_SET_REG8(SPI_TXDATA_PTR,
  87:.\Generated_Source\PSoC5/SPI_INT.c ****                     SPI_txBuffer[SPI_txBufferRead]);
  88:.\Generated_Source\PSoC5/SPI_INT.c ****             }
  89:.\Generated_Source\PSoC5/SPI_INT.c ****             else
  90:.\Generated_Source\PSoC5/SPI_INT.c ****             {
  91:.\Generated_Source\PSoC5/SPI_INT.c ****                 break;
  92:.\Generated_Source\PSoC5/SPI_INT.c ****             }
  93:.\Generated_Source\PSoC5/SPI_INT.c ****         }
  94:.\Generated_Source\PSoC5/SPI_INT.c **** 
  95:.\Generated_Source\PSoC5/SPI_INT.c ****         if(SPI_txBufferRead == SPI_txBufferWrite)
  96:.\Generated_Source\PSoC5/SPI_INT.c ****         {
  97:.\Generated_Source\PSoC5/SPI_INT.c ****             /* TX Buffer is EMPTY: disable interrupt on TX NOT FULL */
  98:.\Generated_Source\PSoC5/SPI_INT.c ****             SPI_TX_STATUS_MASK_REG &= ((uint8) ~SPI_STS_TX_FIFO_NOT_FULL);
  99:.\Generated_Source\PSoC5/SPI_INT.c ****         }
 100:.\Generated_Source\PSoC5/SPI_INT.c **** 
 101:.\Generated_Source\PSoC5/SPI_INT.c ****     #endif /* (SPI_TX_SOFTWARE_BUF_ENABLED) */
 102:.\Generated_Source\PSoC5/SPI_INT.c **** 
 103:.\Generated_Source\PSoC5/SPI_INT.c ****     /* User code required at end of ISR (Optional) */
 104:.\Generated_Source\PSoC5/SPI_INT.c ****     /* `#START SPI_TX_ISR_END` */
 105:.\Generated_Source\PSoC5/SPI_INT.c **** 
 106:.\Generated_Source\PSoC5/SPI_INT.c ****     /* `#END` */
 107:.\Generated_Source\PSoC5/SPI_INT.c **** }
  39              		.loc 1 107 0
  40 0004 BD46     		mov	sp, r7
  41 0006 80BC     		pop	{r7}
  42 0008 7047     		bx	lr
  43              		.cfi_endproc
  44              	.LFE0:
  45              		.size	SPI_TX_ISR, .-SPI_TX_ISR
  46 000a 00BF     		.section	.text.SPI_RX_ISR,"ax",%progbits
  47              		.align	2
  48              		.global	SPI_RX_ISR
  49              		.thumb
  50              		.thumb_func
  51              		.type	SPI_RX_ISR, %function
  52              	SPI_RX_ISR:
  53              	.LFB1:
 108:.\Generated_Source\PSoC5/SPI_INT.c **** 
 109:.\Generated_Source\PSoC5/SPI_INT.c **** 
 110:.\Generated_Source\PSoC5/SPI_INT.c **** /*******************************************************************************
 111:.\Generated_Source\PSoC5/SPI_INT.c **** * Function Name: SPI_RX_ISR
 112:.\Generated_Source\PSoC5/SPI_INT.c **** ********************************************************************************
 113:.\Generated_Source\PSoC5/SPI_INT.c **** *
 114:.\Generated_Source\PSoC5/SPI_INT.c **** * Summary:
 115:.\Generated_Source\PSoC5/SPI_INT.c **** *  Interrupt Service Routine for RX portion of the SPI Master.
 116:.\Generated_Source\PSoC5/SPI_INT.c **** *
 117:.\Generated_Source\PSoC5/SPI_INT.c **** * Parameters:
 118:.\Generated_Source\PSoC5/SPI_INT.c **** *  None.
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\cc27StaX.s 			page 4


 119:.\Generated_Source\PSoC5/SPI_INT.c **** *
 120:.\Generated_Source\PSoC5/SPI_INT.c **** * Return:
 121:.\Generated_Source\PSoC5/SPI_INT.c **** *  None.
 122:.\Generated_Source\PSoC5/SPI_INT.c **** *
 123:.\Generated_Source\PSoC5/SPI_INT.c **** * Global variables:
 124:.\Generated_Source\PSoC5/SPI_INT.c **** *  SPI_rxBufferWrite - used for the account of the bytes which
 125:.\Generated_Source\PSoC5/SPI_INT.c **** *  have been written down in the RX software buffer modified when FIFO contains
 126:.\Generated_Source\PSoC5/SPI_INT.c **** *  new data.
 127:.\Generated_Source\PSoC5/SPI_INT.c **** *  SPI_rxBufferRead - used for the account of the bytes which
 128:.\Generated_Source\PSoC5/SPI_INT.c **** *  have been read from the RX software buffer, modified when overflow occurred.
 129:.\Generated_Source\PSoC5/SPI_INT.c **** *  SPI_rxBuffer[SPI_RX_BUFFER_SIZE] - used to store
 130:.\Generated_Source\PSoC5/SPI_INT.c **** *  received data, modified when FIFO contains new data.
 131:.\Generated_Source\PSoC5/SPI_INT.c **** *  All described above Global variables are used when Software Buffer is used.
 132:.\Generated_Source\PSoC5/SPI_INT.c **** *
 133:.\Generated_Source\PSoC5/SPI_INT.c **** *******************************************************************************/
 134:.\Generated_Source\PSoC5/SPI_INT.c **** CY_ISR(SPI_RX_ISR)
 135:.\Generated_Source\PSoC5/SPI_INT.c **** {
  54              		.loc 1 135 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 1, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  59 0000 80B4     		push	{r7}
  60              	.LCFI2:
  61              		.cfi_def_cfa_offset 4
  62              		.cfi_offset 7, -4
  63 0002 00AF     		add	r7, sp, #0
  64              	.LCFI3:
  65              		.cfi_def_cfa_register 7
 136:.\Generated_Source\PSoC5/SPI_INT.c ****     #if(SPI_RX_SOFTWARE_BUF_ENABLED)
 137:.\Generated_Source\PSoC5/SPI_INT.c ****         uint8 tmpStatus;
 138:.\Generated_Source\PSoC5/SPI_INT.c ****         uint8 rxData;
 139:.\Generated_Source\PSoC5/SPI_INT.c ****     #endif /* (SPI_RX_SOFTWARE_BUF_ENABLED) */
 140:.\Generated_Source\PSoC5/SPI_INT.c **** 
 141:.\Generated_Source\PSoC5/SPI_INT.c ****     /* User code required at start of ISR */
 142:.\Generated_Source\PSoC5/SPI_INT.c ****     /* `#START SPI_RX_ISR_START` */
 143:.\Generated_Source\PSoC5/SPI_INT.c **** 
 144:.\Generated_Source\PSoC5/SPI_INT.c ****     /* `#END` */
 145:.\Generated_Source\PSoC5/SPI_INT.c **** 
 146:.\Generated_Source\PSoC5/SPI_INT.c ****     #if(SPI_RX_SOFTWARE_BUF_ENABLED)
 147:.\Generated_Source\PSoC5/SPI_INT.c **** 
 148:.\Generated_Source\PSoC5/SPI_INT.c ****         tmpStatus = SPI_GET_STATUS_RX(SPI_swStatusRx);
 149:.\Generated_Source\PSoC5/SPI_INT.c ****         SPI_swStatusRx = tmpStatus;
 150:.\Generated_Source\PSoC5/SPI_INT.c **** 
 151:.\Generated_Source\PSoC5/SPI_INT.c ****         /* Check if RX data FIFO has some data to be moved into the RX Buffer */
 152:.\Generated_Source\PSoC5/SPI_INT.c ****         while(0u != (SPI_swStatusRx & SPI_STS_RX_FIFO_NOT_EMPTY))
 153:.\Generated_Source\PSoC5/SPI_INT.c ****         {
 154:.\Generated_Source\PSoC5/SPI_INT.c ****             rxData = CY_GET_REG8(SPI_RXDATA_PTR);
 155:.\Generated_Source\PSoC5/SPI_INT.c **** 
 156:.\Generated_Source\PSoC5/SPI_INT.c ****             /* Set next pointer. */
 157:.\Generated_Source\PSoC5/SPI_INT.c ****             SPI_rxBufferWrite++;
 158:.\Generated_Source\PSoC5/SPI_INT.c ****             if(SPI_rxBufferWrite >= SPI_RX_BUFFER_SIZE)
 159:.\Generated_Source\PSoC5/SPI_INT.c ****             {
 160:.\Generated_Source\PSoC5/SPI_INT.c ****                 SPI_rxBufferWrite = 0u;
 161:.\Generated_Source\PSoC5/SPI_INT.c ****             }
 162:.\Generated_Source\PSoC5/SPI_INT.c **** 
 163:.\Generated_Source\PSoC5/SPI_INT.c ****             if(SPI_rxBufferWrite == SPI_rxBufferRead)
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\cc27StaX.s 			page 5


 164:.\Generated_Source\PSoC5/SPI_INT.c ****             {
 165:.\Generated_Source\PSoC5/SPI_INT.c ****                 SPI_rxBufferRead++;
 166:.\Generated_Source\PSoC5/SPI_INT.c ****                 if(SPI_rxBufferRead >= SPI_RX_BUFFER_SIZE)
 167:.\Generated_Source\PSoC5/SPI_INT.c ****                 {
 168:.\Generated_Source\PSoC5/SPI_INT.c ****                     SPI_rxBufferRead = 0u;
 169:.\Generated_Source\PSoC5/SPI_INT.c ****                 }
 170:.\Generated_Source\PSoC5/SPI_INT.c **** 
 171:.\Generated_Source\PSoC5/SPI_INT.c ****                 SPI_rxBufferFull = 1u;
 172:.\Generated_Source\PSoC5/SPI_INT.c ****             }
 173:.\Generated_Source\PSoC5/SPI_INT.c **** 
 174:.\Generated_Source\PSoC5/SPI_INT.c ****             /* Move data from the FIFO to the Buffer */
 175:.\Generated_Source\PSoC5/SPI_INT.c ****             SPI_rxBuffer[SPI_rxBufferWrite] = rxData;
 176:.\Generated_Source\PSoC5/SPI_INT.c **** 
 177:.\Generated_Source\PSoC5/SPI_INT.c ****             tmpStatus = SPI_GET_STATUS_RX(SPI_swStatusRx);
 178:.\Generated_Source\PSoC5/SPI_INT.c ****             SPI_swStatusRx = tmpStatus;
 179:.\Generated_Source\PSoC5/SPI_INT.c ****         }
 180:.\Generated_Source\PSoC5/SPI_INT.c **** 
 181:.\Generated_Source\PSoC5/SPI_INT.c ****     #endif /* (SPI_RX_SOFTWARE_BUF_ENABLED) */
 182:.\Generated_Source\PSoC5/SPI_INT.c **** 
 183:.\Generated_Source\PSoC5/SPI_INT.c ****     /* User code required at end of ISR (Optional) */
 184:.\Generated_Source\PSoC5/SPI_INT.c ****     /* `#START SPI_RX_ISR_END` */
 185:.\Generated_Source\PSoC5/SPI_INT.c **** 
 186:.\Generated_Source\PSoC5/SPI_INT.c ****     /* `#END` */
 187:.\Generated_Source\PSoC5/SPI_INT.c **** }
  66              		.loc 1 187 0
  67 0004 BD46     		mov	sp, r7
  68 0006 80BC     		pop	{r7}
  69 0008 7047     		bx	lr
  70              		.cfi_endproc
  71              	.LFE1:
  72              		.size	SPI_RX_ISR, .-SPI_RX_ISR
  73 000a 00BF     		.text
  74              	.Letext0:
  75              		.section	.debug_info,"",%progbits
  76              	.Ldebug_info0:
  77 0000 B4000000 		.4byte	0xb4
  78 0004 0200     		.2byte	0x2
  79 0006 00000000 		.4byte	.Ldebug_abbrev0
  80 000a 04       		.byte	0x4
  81 000b 01       		.uleb128 0x1
  82 000c 1B000000 		.4byte	.LASF15
  83 0010 01       		.byte	0x1
  84 0011 DF000000 		.4byte	.LASF16
  85 0015 21010000 		.4byte	.LASF17
  86 0019 00000000 		.4byte	.Ldebug_ranges0+0
  87 001d 00000000 		.4byte	0
  88 0021 00000000 		.4byte	0
  89 0025 00000000 		.4byte	.Ldebug_line0
  90 0029 02       		.uleb128 0x2
  91 002a 01       		.byte	0x1
  92 002b 06       		.byte	0x6
  93 002c D3000000 		.4byte	.LASF0
  94 0030 02       		.uleb128 0x2
  95 0031 01       		.byte	0x1
  96 0032 08       		.byte	0x8
  97 0033 93000000 		.4byte	.LASF1
  98 0037 02       		.uleb128 0x2
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\cc27StaX.s 			page 6


  99 0038 02       		.byte	0x2
 100 0039 05       		.byte	0x5
 101 003a AF000000 		.4byte	.LASF2
 102 003e 02       		.uleb128 0x2
 103 003f 02       		.byte	0x2
 104 0040 07       		.byte	0x7
 105 0041 C0000000 		.4byte	.LASF3
 106 0045 02       		.uleb128 0x2
 107 0046 04       		.byte	0x4
 108 0047 05       		.byte	0x5
 109 0048 A6000000 		.4byte	.LASF4
 110 004c 02       		.uleb128 0x2
 111 004d 04       		.byte	0x4
 112 004e 07       		.byte	0x7
 113 004f 64000000 		.4byte	.LASF5
 114 0053 02       		.uleb128 0x2
 115 0054 08       		.byte	0x8
 116 0055 05       		.byte	0x5
 117 0056 00000000 		.4byte	.LASF6
 118 005a 02       		.uleb128 0x2
 119 005b 08       		.byte	0x8
 120 005c 07       		.byte	0x7
 121 005d 76000000 		.4byte	.LASF7
 122 0061 03       		.uleb128 0x3
 123 0062 04       		.byte	0x4
 124 0063 05       		.byte	0x5
 125 0064 696E7400 		.ascii	"int\000"
 126 0068 02       		.uleb128 0x2
 127 0069 04       		.byte	0x4
 128 006a 07       		.byte	0x7
 129 006b 0E000000 		.4byte	.LASF8
 130 006f 02       		.uleb128 0x2
 131 0070 04       		.byte	0x4
 132 0071 04       		.byte	0x4
 133 0072 8D000000 		.4byte	.LASF9
 134 0076 02       		.uleb128 0x2
 135 0077 08       		.byte	0x8
 136 0078 04       		.byte	0x4
 137 0079 B9000000 		.4byte	.LASF10
 138 007d 02       		.uleb128 0x2
 139 007e 01       		.byte	0x1
 140 007f 08       		.byte	0x8
 141 0080 A1000000 		.4byte	.LASF11
 142 0084 02       		.uleb128 0x2
 143 0085 04       		.byte	0x4
 144 0086 07       		.byte	0x7
 145 0087 18010000 		.4byte	.LASF12
 146 008b 04       		.uleb128 0x4
 147 008c 01       		.byte	0x1
 148 008d 0D010000 		.4byte	.LASF13
 149 0091 01       		.byte	0x1
 150 0092 33       		.byte	0x33
 151 0093 01       		.byte	0x1
 152 0094 00000000 		.4byte	.LFB0
 153 0098 0A000000 		.4byte	.LFE0
 154 009c 00000000 		.4byte	.LLST0
 155 00a0 01       		.byte	0x1
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\cc27StaX.s 			page 7


 156 00a1 04       		.uleb128 0x4
 157 00a2 01       		.byte	0x1
 158 00a3 02010000 		.4byte	.LASF14
 159 00a7 01       		.byte	0x1
 160 00a8 86       		.byte	0x86
 161 00a9 01       		.byte	0x1
 162 00aa 00000000 		.4byte	.LFB1
 163 00ae 0A000000 		.4byte	.LFE1
 164 00b2 2C000000 		.4byte	.LLST1
 165 00b6 01       		.byte	0x1
 166 00b7 00       		.byte	0
 167              		.section	.debug_abbrev,"",%progbits
 168              	.Ldebug_abbrev0:
 169 0000 01       		.uleb128 0x1
 170 0001 11       		.uleb128 0x11
 171 0002 01       		.byte	0x1
 172 0003 25       		.uleb128 0x25
 173 0004 0E       		.uleb128 0xe
 174 0005 13       		.uleb128 0x13
 175 0006 0B       		.uleb128 0xb
 176 0007 03       		.uleb128 0x3
 177 0008 0E       		.uleb128 0xe
 178 0009 1B       		.uleb128 0x1b
 179 000a 0E       		.uleb128 0xe
 180 000b 55       		.uleb128 0x55
 181 000c 06       		.uleb128 0x6
 182 000d 11       		.uleb128 0x11
 183 000e 01       		.uleb128 0x1
 184 000f 52       		.uleb128 0x52
 185 0010 01       		.uleb128 0x1
 186 0011 10       		.uleb128 0x10
 187 0012 06       		.uleb128 0x6
 188 0013 00       		.byte	0
 189 0014 00       		.byte	0
 190 0015 02       		.uleb128 0x2
 191 0016 24       		.uleb128 0x24
 192 0017 00       		.byte	0
 193 0018 0B       		.uleb128 0xb
 194 0019 0B       		.uleb128 0xb
 195 001a 3E       		.uleb128 0x3e
 196 001b 0B       		.uleb128 0xb
 197 001c 03       		.uleb128 0x3
 198 001d 0E       		.uleb128 0xe
 199 001e 00       		.byte	0
 200 001f 00       		.byte	0
 201 0020 03       		.uleb128 0x3
 202 0021 24       		.uleb128 0x24
 203 0022 00       		.byte	0
 204 0023 0B       		.uleb128 0xb
 205 0024 0B       		.uleb128 0xb
 206 0025 3E       		.uleb128 0x3e
 207 0026 0B       		.uleb128 0xb
 208 0027 03       		.uleb128 0x3
 209 0028 08       		.uleb128 0x8
 210 0029 00       		.byte	0
 211 002a 00       		.byte	0
 212 002b 04       		.uleb128 0x4
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\cc27StaX.s 			page 8


 213 002c 2E       		.uleb128 0x2e
 214 002d 00       		.byte	0
 215 002e 3F       		.uleb128 0x3f
 216 002f 0C       		.uleb128 0xc
 217 0030 03       		.uleb128 0x3
 218 0031 0E       		.uleb128 0xe
 219 0032 3A       		.uleb128 0x3a
 220 0033 0B       		.uleb128 0xb
 221 0034 3B       		.uleb128 0x3b
 222 0035 0B       		.uleb128 0xb
 223 0036 27       		.uleb128 0x27
 224 0037 0C       		.uleb128 0xc
 225 0038 11       		.uleb128 0x11
 226 0039 01       		.uleb128 0x1
 227 003a 12       		.uleb128 0x12
 228 003b 01       		.uleb128 0x1
 229 003c 40       		.uleb128 0x40
 230 003d 06       		.uleb128 0x6
 231 003e 9742     		.uleb128 0x2117
 232 0040 0C       		.uleb128 0xc
 233 0041 00       		.byte	0
 234 0042 00       		.byte	0
 235 0043 00       		.byte	0
 236              		.section	.debug_loc,"",%progbits
 237              	.Ldebug_loc0:
 238              	.LLST0:
 239 0000 00000000 		.4byte	.LFB0
 240 0004 02000000 		.4byte	.LCFI0
 241 0008 0200     		.2byte	0x2
 242 000a 7D       		.byte	0x7d
 243 000b 00       		.sleb128 0
 244 000c 02000000 		.4byte	.LCFI0
 245 0010 04000000 		.4byte	.LCFI1
 246 0014 0200     		.2byte	0x2
 247 0016 7D       		.byte	0x7d
 248 0017 04       		.sleb128 4
 249 0018 04000000 		.4byte	.LCFI1
 250 001c 0A000000 		.4byte	.LFE0
 251 0020 0200     		.2byte	0x2
 252 0022 77       		.byte	0x77
 253 0023 04       		.sleb128 4
 254 0024 00000000 		.4byte	0
 255 0028 00000000 		.4byte	0
 256              	.LLST1:
 257 002c 00000000 		.4byte	.LFB1
 258 0030 02000000 		.4byte	.LCFI2
 259 0034 0200     		.2byte	0x2
 260 0036 7D       		.byte	0x7d
 261 0037 00       		.sleb128 0
 262 0038 02000000 		.4byte	.LCFI2
 263 003c 04000000 		.4byte	.LCFI3
 264 0040 0200     		.2byte	0x2
 265 0042 7D       		.byte	0x7d
 266 0043 04       		.sleb128 4
 267 0044 04000000 		.4byte	.LCFI3
 268 0048 0A000000 		.4byte	.LFE1
 269 004c 0200     		.2byte	0x2
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\cc27StaX.s 			page 9


 270 004e 77       		.byte	0x77
 271 004f 04       		.sleb128 4
 272 0050 00000000 		.4byte	0
 273 0054 00000000 		.4byte	0
 274              		.section	.debug_aranges,"",%progbits
 275 0000 24000000 		.4byte	0x24
 276 0004 0200     		.2byte	0x2
 277 0006 00000000 		.4byte	.Ldebug_info0
 278 000a 04       		.byte	0x4
 279 000b 00       		.byte	0
 280 000c 0000     		.2byte	0
 281 000e 0000     		.2byte	0
 282 0010 00000000 		.4byte	.LFB0
 283 0014 0A000000 		.4byte	.LFE0-.LFB0
 284 0018 00000000 		.4byte	.LFB1
 285 001c 0A000000 		.4byte	.LFE1-.LFB1
 286 0020 00000000 		.4byte	0
 287 0024 00000000 		.4byte	0
 288              		.section	.debug_ranges,"",%progbits
 289              	.Ldebug_ranges0:
 290 0000 00000000 		.4byte	.LFB0
 291 0004 0A000000 		.4byte	.LFE0
 292 0008 00000000 		.4byte	.LFB1
 293 000c 0A000000 		.4byte	.LFE1
 294 0010 00000000 		.4byte	0
 295 0014 00000000 		.4byte	0
 296              		.section	.debug_line,"",%progbits
 297              	.Ldebug_line0:
 298 0000 64000000 		.section	.debug_str,"MS",%progbits,1
 298      02003900 
 298      00000201 
 298      FB0E0D00 
 298      01010101 
 299              	.LASF6:
 300 0000 6C6F6E67 		.ascii	"long long int\000"
 300      206C6F6E 
 300      6720696E 
 300      7400
 301              	.LASF8:
 302 000e 756E7369 		.ascii	"unsigned int\000"
 302      676E6564 
 302      20696E74 
 302      00
 303              	.LASF15:
 304 001b 474E5520 		.ascii	"GNU C 4.7.3 20130312 (release) [ARM/embedded-4_7-br"
 304      4320342E 
 304      372E3320 
 304      32303133 
 304      30333132 
 305 004e 616E6368 		.ascii	"anch revision 196615]\000"
 305      20726576 
 305      6973696F 
 305      6E203139 
 305      36363135 
 306              	.LASF5:
 307 0064 6C6F6E67 		.ascii	"long unsigned int\000"
 307      20756E73 
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\cc27StaX.s 			page 10


 307      69676E65 
 307      6420696E 
 307      7400
 308              	.LASF7:
 309 0076 6C6F6E67 		.ascii	"long long unsigned int\000"
 309      206C6F6E 
 309      6720756E 
 309      7369676E 
 309      65642069 
 310              	.LASF9:
 311 008d 666C6F61 		.ascii	"float\000"
 311      7400
 312              	.LASF1:
 313 0093 756E7369 		.ascii	"unsigned char\000"
 313      676E6564 
 313      20636861 
 313      7200
 314              	.LASF11:
 315 00a1 63686172 		.ascii	"char\000"
 315      00
 316              	.LASF4:
 317 00a6 6C6F6E67 		.ascii	"long int\000"
 317      20696E74 
 317      00
 318              	.LASF2:
 319 00af 73686F72 		.ascii	"short int\000"
 319      7420696E 
 319      7400
 320              	.LASF10:
 321 00b9 646F7562 		.ascii	"double\000"
 321      6C6500
 322              	.LASF3:
 323 00c0 73686F72 		.ascii	"short unsigned int\000"
 323      7420756E 
 323      7369676E 
 323      65642069 
 323      6E7400
 324              	.LASF0:
 325 00d3 7369676E 		.ascii	"signed char\000"
 325      65642063 
 325      68617200 
 326              	.LASF16:
 327 00df 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\SPI_INT.c\000"
 327      6E657261 
 327      7465645F 
 327      536F7572 
 327      63655C50 
 328              	.LASF14:
 329 0102 5350495F 		.ascii	"SPI_RX_ISR\000"
 329      52585F49 
 329      535200
 330              	.LASF13:
 331 010d 5350495F 		.ascii	"SPI_TX_ISR\000"
 331      54585F49 
 331      535200
 332              	.LASF12:
 333 0118 73697A65 		.ascii	"sizetype\000"
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\cc27StaX.s 			page 11


 333      74797065 
 333      00
 334              	.LASF17:
 335 0121 433A5C55 		.ascii	"C:\\Users\\chuck.erhardt\\Documents\\GitHub\\PSoC-W"
 335      73657273 
 335      5C636875 
 335      636B2E65 
 335      72686172 
 336 014f 35313030 		.ascii	"5100-Driver\\FreeSoC Explorer - W5500 ioShield-A.cy"
 336      2D447269 
 336      7665725C 
 336      46726565 
 336      536F4320 
 337 0181 64736E00 		.ascii	"dsn\000"
 338              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.3 20130312 (release) [ARM/embedded-4_7-br
