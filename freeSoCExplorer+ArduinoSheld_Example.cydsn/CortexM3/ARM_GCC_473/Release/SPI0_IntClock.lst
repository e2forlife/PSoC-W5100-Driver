ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"SPI0_IntClock.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.SPI0_IntClock_Start,"ax",%progbits
  19              		.align	1
  20              		.global	SPI0_IntClock_Start
  21              		.thumb
  22              		.thumb_func
  23              		.type	SPI0_IntClock_Start, %function
  24              	SPI0_IntClock_Start:
  25              	.LFB0:
  26              		.file 1 ".\\Generated_Source\\PSoC5\\SPI0_IntClock.c"
   1:.\Generated_Source\PSoC5/SPI0_IntClock.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * File Name: SPI0_IntClock.c
   3:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Version 2.0
   4:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
   5:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  Description:
   6:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   This file provides the source code to the API for the clock component.
   7:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
   8:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  Note:
   9:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
  10:.\Generated_Source\PSoC5/SPI0_IntClock.c **** ********************************************************************************
  11:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  12:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * You may use this file only in accordance with the license, terms, conditions, 
  13:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * disclaimers, and limitations in the end user license agreement accompanying 
  14:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * the software package with which this file was provided.
  15:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *******************************************************************************/
  16:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
  17:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #include <cydevice_trm.h>
  18:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #include "SPI0_IntClock.h"
  19:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
  20:.\Generated_Source\PSoC5/SPI0_IntClock.c **** /* Clock Distribution registers. */
  21:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #define CLK_DIST_LD              (* (reg8 *) CYREG_CLKDIST_LD)
  22:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #define CLK_DIST_BCFG2           (* (reg8 *) CYREG_CLKDIST_BCFG2)
  23:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #define BCFG2_MASK               (0x80u)
  24:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #define CLK_DIST_DMASK           (* (reg8 *) CYREG_CLKDIST_DMASK)
  25:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #define CLK_DIST_AMASK           (* (reg8 *) CYREG_CLKDIST_AMASK)
  26:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
  27:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #define HAS_CLKDIST_LD_DISABLE   (CY_PSOC3 || CY_PSOC5LP)
  28:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
  29:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
  30:.\Generated_Source\PSoC5/SPI0_IntClock.c **** /*******************************************************************************
  31:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Function Name: SPI0_IntClock_Start
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 2


  32:.\Generated_Source\PSoC5/SPI0_IntClock.c **** ********************************************************************************
  33:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
  34:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Summary:
  35:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  Starts the clock. Note that on startup, clocks may be already running if the
  36:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  "Start on Reset" option is enabled in the DWR.
  37:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
  38:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Parameters:
  39:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  None
  40:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
  41:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Returns:
  42:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  None
  43:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
  44:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *******************************************************************************/
  45:.\Generated_Source\PSoC5/SPI0_IntClock.c **** void SPI0_IntClock_Start(void) 
  46:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
  27              		.loc 1 46 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  47:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     /* Set the bit to enable the clock. */
  48:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     SPI0_IntClock_CLKEN |= SPI0_IntClock_CLKEN_MASK;
  32              		.loc 1 48 0
  33 0000 044B     		ldr	r3, .L2
  34 0002 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
  35 0004 42F00100 		orr	r0, r2, #1
  36 0008 1870     		strb	r0, [r3, #0]
  49:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 	SPI0_IntClock_CLKSTBY |= SPI0_IntClock_CLKSTBY_MASK;
  37              		.loc 1 49 0
  38 000a 197C     		ldrb	r1, [r3, #16]	@ zero_extendqisi2
  39 000c 41F00102 		orr	r2, r1, #1
  40 0010 1A74     		strb	r2, [r3, #16]
  41 0012 7047     		bx	lr
  42              	.L3:
  43              		.align	2
  44              	.L2:
  45 0014 A2430040 		.word	1073759138
  46              		.cfi_endproc
  47              	.LFE0:
  48              		.size	SPI0_IntClock_Start, .-SPI0_IntClock_Start
  49              		.section	.text.SPI0_IntClock_Stop,"ax",%progbits
  50              		.align	1
  51              		.global	SPI0_IntClock_Stop
  52              		.thumb
  53              		.thumb_func
  54              		.type	SPI0_IntClock_Stop, %function
  55              	SPI0_IntClock_Stop:
  56              	.LFB1:
  50:.\Generated_Source\PSoC5/SPI0_IntClock.c **** }
  51:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
  52:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
  53:.\Generated_Source\PSoC5/SPI0_IntClock.c **** /*******************************************************************************
  54:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Function Name: SPI0_IntClock_Stop
  55:.\Generated_Source\PSoC5/SPI0_IntClock.c **** ********************************************************************************
  56:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
  57:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Summary:
  58:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  Stops the clock and returns immediately. This API does not require the
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 3


  59:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  source clock to be running but may return before the hardware is actually
  60:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  disabled. If the settings of the clock are changed after calling this
  61:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  function, the clock may glitch when it is started. To avoid the clock
  62:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  glitch, use the StopBlock function.
  63:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
  64:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Parameters:
  65:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  None
  66:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
  67:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Returns:
  68:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  None
  69:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
  70:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *******************************************************************************/
  71:.\Generated_Source\PSoC5/SPI0_IntClock.c **** void SPI0_IntClock_Stop(void) 
  72:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
  57              		.loc 1 72 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              		@ link register save eliminated.
  73:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     /* Clear the bit to disable the clock. */
  74:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     SPI0_IntClock_CLKEN &= (uint8)(~SPI0_IntClock_CLKEN_MASK);
  62              		.loc 1 74 0
  63 0000 044B     		ldr	r3, .L5
  64 0002 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
  65 0004 02F0FE00 		and	r0, r2, #254
  66 0008 1870     		strb	r0, [r3, #0]
  75:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 	SPI0_IntClock_CLKSTBY &= (uint8)(~SPI0_IntClock_CLKSTBY_MASK);
  67              		.loc 1 75 0
  68 000a 197C     		ldrb	r1, [r3, #16]	@ zero_extendqisi2
  69 000c 01F0FE02 		and	r2, r1, #254
  70 0010 1A74     		strb	r2, [r3, #16]
  71 0012 7047     		bx	lr
  72              	.L6:
  73              		.align	2
  74              	.L5:
  75 0014 A2430040 		.word	1073759138
  76              		.cfi_endproc
  77              	.LFE1:
  78              		.size	SPI0_IntClock_Stop, .-SPI0_IntClock_Stop
  79              		.section	.text.SPI0_IntClock_StopBlock,"ax",%progbits
  80              		.align	1
  81              		.global	SPI0_IntClock_StopBlock
  82              		.thumb
  83              		.thumb_func
  84              		.type	SPI0_IntClock_StopBlock, %function
  85              	SPI0_IntClock_StopBlock:
  86              	.LFB2:
  76:.\Generated_Source\PSoC5/SPI0_IntClock.c **** }
  77:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
  78:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
  79:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #if(CY_PSOC3 || CY_PSOC5LP)
  80:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
  81:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
  82:.\Generated_Source\PSoC5/SPI0_IntClock.c **** /*******************************************************************************
  83:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Function Name: SPI0_IntClock_StopBlock
  84:.\Generated_Source\PSoC5/SPI0_IntClock.c **** ********************************************************************************
  85:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 4


  86:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Summary:
  87:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  Stops the clock and waits for the hardware to actually be disabled before
  88:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  returning. This ensures that the clock is never truncated (high part of the
  89:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  cycle will terminate before the clock is disabled and the API returns).
  90:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  Note that the source clock must be running or this API will never return as
  91:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  a stopped clock cannot be disabled.
  92:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
  93:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Parameters:
  94:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  None
  95:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
  96:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Returns:
  97:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  None
  98:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
  99:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *******************************************************************************/
 100:.\Generated_Source\PSoC5/SPI0_IntClock.c **** void SPI0_IntClock_StopBlock(void) 
 101:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
  87              		.loc 1 101 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91 0000 10B5     		push	{r4, lr}
  92              	.LCFI0:
  93              		.cfi_def_cfa_offset 8
  94              		.cfi_offset 4, -8
  95              		.cfi_offset 14, -4
 102:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     if ((SPI0_IntClock_CLKEN & SPI0_IntClock_CLKEN_MASK) != 0u)
  96              		.loc 1 102 0
  97 0002 144B     		ldr	r3, .L15
  98 0004 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
  99 0006 C307     		lsls	r3, r0, #31
 100 0008 23D5     		bpl	.L7
 101              	.LBB10:
 103:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     {
 104:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #if HAS_CLKDIST_LD_DISABLE
 105:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         uint16 oldDivider;
 106:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 107:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         CLK_DIST_LD = 0u;
 108:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 109:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         /* Clear all the mask bits except ours. */
 110:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #if defined(SPI0_IntClock__CFG3)
 111:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         CLK_DIST_AMASK = SPI0_IntClock_CLKEN_MASK;
 112:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         CLK_DIST_DMASK = 0x00u;
 113:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #else
 114:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         CLK_DIST_DMASK = SPI0_IntClock_CLKEN_MASK;
 102              		.loc 1 114 0
 103 000a 1349     		ldr	r1, .L15+4
 107:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         CLK_DIST_LD = 0u;
 104              		.loc 1 107 0
 105 000c 134A     		ldr	r2, .L15+8
 106 000e 0024     		movs	r4, #0
 115:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         CLK_DIST_AMASK = 0x00u;
 116:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #endif /* SPI0_IntClock__CFG3 */
 117:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 118:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         /* Clear mask of bus clock. */
 119:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 107              		.loc 1 119 0
 108 0010 1348     		ldr	r0, .L15+12
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 5


 114:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         CLK_DIST_DMASK = SPI0_IntClock_CLKEN_MASK;
 109              		.loc 1 114 0
 110 0012 0123     		movs	r3, #1
 107:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         CLK_DIST_LD = 0u;
 111              		.loc 1 107 0
 112 0014 1470     		strb	r4, [r2, #0]
 114:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         CLK_DIST_DMASK = SPI0_IntClock_CLKEN_MASK;
 113              		.loc 1 114 0
 114 0016 0B70     		strb	r3, [r1, #0]
 115:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         CLK_DIST_AMASK = 0x00u;
 115              		.loc 1 115 0
 116 0018 0C71     		strb	r4, [r1, #4]
 117              		.loc 1 119 0
 118 001a 0478     		ldrb	r4, [r0, #0]	@ zero_extendqisi2
 119 001c 04F07F03 		and	r3, r4, #127
 120 0020 0370     		strb	r3, [r0, #0]
 120:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 121:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         oldDivider = CY_GET_REG16(SPI0_IntClock_DIV_PTR);
 121              		.loc 1 121 0
 122 0022 7830     		adds	r0, r0, #120
 123 0024 0188     		ldrh	r1, [r0, #0]
 122:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 124              		.loc 1 122 0
 125 0026 0F48     		ldr	r0, .L15+16
 121:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         oldDivider = CY_GET_REG16(SPI0_IntClock_DIV_PTR);
 126              		.loc 1 121 0
 127 0028 8BB2     		uxth	r3, r1
 128              	.LVL0:
 123:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         CLK_DIST_LD = CYCLK_LD_DISABLE | CYCLK_LD_SYNC_EN | CYCLK_LD_LOAD;
 129              		.loc 1 123 0
 130 002a 0724     		movs	r4, #7
 122:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 131              		.loc 1 122 0
 132 002c 0380     		strh	r3, [r0, #0]	@ movhi
 133              		.loc 1 123 0
 134 002e 1470     		strb	r4, [r2, #0]
 135              	.LVL1:
 136              	.L9:
 124:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 125:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         /* Wait for clock to be disabled */
 126:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 137              		.loc 1 126 0 discriminator 1
 138 0030 0A4A     		ldr	r2, .L15+8
 139 0032 1178     		ldrb	r1, [r2, #0]	@ zero_extendqisi2
 140 0034 11F00100 		ands	r0, r1, #1
 141 0038 FAD1     		bne	.L9
 127:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 128:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 129:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         /* Clear the bit to disable the clock. */
 130:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         SPI0_IntClock_CLKEN &= (uint8)(~SPI0_IntClock_CLKEN_MASK);
 142              		.loc 1 130 0
 143 003a 0649     		ldr	r1, .L15
 144 003c 0C78     		ldrb	r4, [r1, #0]	@ zero_extendqisi2
 145 003e 04F0FE04 		and	r4, r4, #254
 146 0042 0C70     		strb	r4, [r1, #0]
 131:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         SPI0_IntClock_CLKSTBY &= (uint8)(~SPI0_IntClock_CLKSTBY_MASK);
 147              		.loc 1 131 0
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 6


 148 0044 0C7C     		ldrb	r4, [r1, #16]	@ zero_extendqisi2
 149 0046 04F0FE04 		and	r4, r4, #254
 150 004a 0C74     		strb	r4, [r1, #16]
 132:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 133:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #if HAS_CLKDIST_LD_DISABLE
 134:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         /* Clear the disable bit */
 135:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         CLK_DIST_LD = 0x00u;
 151              		.loc 1 135 0
 152 004c 1070     		strb	r0, [r2, #0]
 136:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         CY_SET_REG16(SPI0_IntClock_DIV_PTR, oldDivider);
 153              		.loc 1 136 0
 154 004e A2F87F30 		strh	r3, [r2, #127]	@ movhi
 155              	.LVL2:
 156              	.L7:
 157 0052 10BD     		pop	{r4, pc}
 158              	.L16:
 159              		.align	2
 160              	.L15:
 161 0054 A2430040 		.word	1073759138
 162 0058 10400040 		.word	1073758224
 163 005c 01400040 		.word	1073758209
 164 0060 08400040 		.word	1073758216
 165 0064 02400040 		.word	1073758210
 166              	.LBE10:
 167              		.cfi_endproc
 168              	.LFE2:
 169              		.size	SPI0_IntClock_StopBlock, .-SPI0_IntClock_StopBlock
 170              		.section	.text.SPI0_IntClock_StandbyPower,"ax",%progbits
 171              		.align	1
 172              		.global	SPI0_IntClock_StandbyPower
 173              		.thumb
 174              		.thumb_func
 175              		.type	SPI0_IntClock_StandbyPower, %function
 176              	SPI0_IntClock_StandbyPower:
 177              	.LFB3:
 137:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 138:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     }
 139:.\Generated_Source\PSoC5/SPI0_IntClock.c **** }
 140:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #endif /* (CY_PSOC3 || CY_PSOC5LP) */
 141:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 142:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 143:.\Generated_Source\PSoC5/SPI0_IntClock.c **** /*******************************************************************************
 144:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Function Name: SPI0_IntClock_StandbyPower
 145:.\Generated_Source\PSoC5/SPI0_IntClock.c **** ********************************************************************************
 146:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 147:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Summary:
 148:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  Sets whether the clock is active in standby mode.
 149:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 150:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Parameters:
 151:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  state:  0 to disable clock during standby, nonzero to enable.
 152:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 153:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Returns:
 154:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  None
 155:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 156:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *******************************************************************************/
 157:.\Generated_Source\PSoC5/SPI0_IntClock.c **** void SPI0_IntClock_StandbyPower(uint8 state) 
 158:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 7


 178              		.loc 1 158 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              		@ link register save eliminated.
 183              	.LVL3:
 184 0000 044B     		ldr	r3, .L21
 159:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     if(state == 0u)
 160:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     {
 161:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         SPI0_IntClock_CLKSTBY &= (uint8)(~SPI0_IntClock_CLKSTBY_MASK);
 185              		.loc 1 161 0
 186 0002 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 159:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     if(state == 0u)
 187              		.loc 1 159 0
 188 0004 10B9     		cbnz	r0, .L18
 189              		.loc 1 161 0
 190 0006 02F0FE00 		and	r0, r2, #254
 191              	.LVL4:
 192 000a 01E0     		b	.L20
 193              	.LVL5:
 194              	.L18:
 162:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     }
 163:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     else
 164:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     {
 165:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         SPI0_IntClock_CLKSTBY |= SPI0_IntClock_CLKSTBY_MASK;
 195              		.loc 1 165 0
 196 000c 42F00100 		orr	r0, r2, #1
 197              	.LVL6:
 198              	.L20:
 199 0010 1870     		strb	r0, [r3, #0]
 200 0012 7047     		bx	lr
 201              	.L22:
 202              		.align	2
 203              	.L21:
 204 0014 B2430040 		.word	1073759154
 205              		.cfi_endproc
 206              	.LFE3:
 207              		.size	SPI0_IntClock_StandbyPower, .-SPI0_IntClock_StandbyPower
 208              		.section	.text.SPI0_IntClock_SetDividerRegister,"ax",%progbits
 209              		.align	1
 210              		.global	SPI0_IntClock_SetDividerRegister
 211              		.thumb
 212              		.thumb_func
 213              		.type	SPI0_IntClock_SetDividerRegister, %function
 214              	SPI0_IntClock_SetDividerRegister:
 215              	.LFB4:
 166:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     }
 167:.\Generated_Source\PSoC5/SPI0_IntClock.c **** }
 168:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 169:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 170:.\Generated_Source\PSoC5/SPI0_IntClock.c **** /*******************************************************************************
 171:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Function Name: SPI0_IntClock_SetDividerRegister
 172:.\Generated_Source\PSoC5/SPI0_IntClock.c **** ********************************************************************************
 173:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 174:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Summary:
 175:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  Modifies the clock divider and, thus, the frequency. When the clock divider
 176:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  register is set to zero or changed from zero, the clock will be temporarily
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 8


 177:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  disabled in order to change the SSS mode bit. If the clock is enabled when
 178:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  SetDividerRegister is called, then the source clock must be running.
 179:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 180:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Parameters:
 181:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  clkDivider:  Divider register value (0-65,535). This value is NOT the
 182:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *    divider; the clock hardware divides by clkDivider plus one. For example,
 183:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *    to divide the clock by 2, this parameter should be set to 1.
 184:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  restart:  If nonzero, restarts the clock divider: the current clock cycle
 185:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   will be truncated and the new divide value will take effect immediately. If
 186:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   zero, the new divide value will take effect at the end of the current clock
 187:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   cycle.
 188:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 189:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Returns:
 190:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  None
 191:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 192:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *******************************************************************************/
 193:.\Generated_Source\PSoC5/SPI0_IntClock.c **** void SPI0_IntClock_SetDividerRegister(uint16 clkDivider, uint8 restart)
 194:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                                 
 195:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
 216              		.loc 1 195 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              	.LVL7:
 221 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 222              	.LCFI1:
 223              		.cfi_def_cfa_offset 20
 224              		.cfi_offset 4, -20
 225              		.cfi_offset 5, -16
 226              		.cfi_offset 6, -12
 227              		.cfi_offset 7, -8
 228              		.cfi_offset 14, -4
 229              	.LBB11:
 230              	.LBB12:
 196:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     uint8 enabled;
 197:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 198:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     uint8 currSrc = SPI0_IntClock_GetSourceRegister();
 199:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     uint16 oldDivider = SPI0_IntClock_GetDividerRegister();
 200:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 201:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     if (clkDivider != oldDivider)
 202:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     {
 203:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         enabled = SPI0_IntClock_CLKEN & SPI0_IntClock_CLKEN_MASK;
 204:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 205:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         if ((currSrc == (uint8)CYCLK_SRC_SEL_CLK_SYNC_D) && ((oldDivider == 0u) || (clkDivider == 0
 206:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         {
 207:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             /* Moving to/from SSS requires correct ordering to prevent halting the clock    */
 208:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             if (oldDivider == 0u)
 209:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             {
 210:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 /* Moving away from SSS, set the divider first so when SSS is cleared we    */
 211:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 /* don't halt the clock.  Using the shadow load isn't required as the       */
 212:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 /* divider is ignored while SSS is set.                                     */
 213:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CY_SET_REG16(SPI0_IntClock_DIV_PTR, clkDivider);
 214:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 SPI0_IntClock_MOD_SRC &= (uint8)(~CYCLK_SSS);
 215:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             }
 216:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             else
 217:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             {
 218:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 /* Moving to SSS, set SSS which then ignores the divider and we can set     */
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 9


 219:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 /* it without bothering with the shadow load.                               */
 220:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 SPI0_IntClock_MOD_SRC |= CYCLK_SSS;
 221:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CY_SET_REG16(SPI0_IntClock_DIV_PTR, clkDivider);
 222:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             }
 223:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         }
 224:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         else
 225:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         {
 226:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 			
 227:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             if (enabled != 0u)
 228:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             {
 229:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CLK_DIST_LD = 0x00u;
 230:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 231:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 /* Clear all the mask bits except ours. */
 232:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #if defined(SPI0_IntClock__CFG3)
 233:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CLK_DIST_AMASK = SPI0_IntClock_CLKEN_MASK;
 234:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CLK_DIST_DMASK = 0x00u;
 235:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #else
 236:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CLK_DIST_DMASK = SPI0_IntClock_CLKEN_MASK;
 237:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CLK_DIST_AMASK = 0x00u;
 238:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #endif /* SPI0_IntClock__CFG3 */
 239:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 /* Clear mask of bus clock. */
 240:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 241:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 242:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 /* If clock is currently enabled, disable it if async or going from N-to-1*/
 243:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 if (((SPI0_IntClock_MOD_SRC & CYCLK_SYNC) == 0u) || (clkDivider == 0u))
 244:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 {
 245:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #if HAS_CLKDIST_LD_DISABLE
 246:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                     CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 247:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                     CLK_DIST_LD = CYCLK_LD_DISABLE|CYCLK_LD_SYNC_EN|CYCLK_LD_LOAD;
 248:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 249:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                     /* Wait for clock to be disabled */
 250:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                     while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 251:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 252:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 253:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                     SPI0_IntClock_CLKEN &= (uint8)(~SPI0_IntClock_CLKEN_MASK);
 254:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 255:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #if HAS_CLKDIST_LD_DISABLE
 256:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                     /* Clear the disable bit */
 257:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                     CLK_DIST_LD = 0x00u;
 258:.\Generated_Source\PSoC5/SPI0_IntClock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 259:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 }
 260:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             }
 261:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 262:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             /* Load divide value. */
 263:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             if ((SPI0_IntClock_CLKEN & SPI0_IntClock_CLKEN_MASK) != 0u)
 264:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             {
 265:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 /* If the clock is still enabled, use the shadow registers */
 266:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CY_SET_REG16(CYREG_CLKDIST_WRK0, clkDivider);
 267:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 268:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CLK_DIST_LD = (CYCLK_LD_LOAD | ((restart != 0u) ? CYCLK_LD_SYNC_EN : 0x00u));
 269:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 270:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             }
 271:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             else
 272:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             {
 273:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 /* If the clock is disabled, set the divider directly */
 274:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CY_SET_REG16(SPI0_IntClock_DIV_PTR, clkDivider);
 275:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 				SPI0_IntClock_CLKEN |= enabled;
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 10


 276:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             }
 277:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         }
 278:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     }
 279:.\Generated_Source\PSoC5/SPI0_IntClock.c **** }
 280:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 281:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 282:.\Generated_Source\PSoC5/SPI0_IntClock.c **** /*******************************************************************************
 283:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Function Name: SPI0_IntClock_GetDividerRegister
 284:.\Generated_Source\PSoC5/SPI0_IntClock.c **** ********************************************************************************
 285:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 286:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Summary:
 287:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  Gets the clock divider register value.
 288:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 289:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Parameters:
 290:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  None
 291:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 292:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Returns:
 293:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  Divide value of the clock minus 1. For example, if the clock is set to
 294:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  divide by 2, the return value will be 1.
 295:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 296:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *******************************************************************************/
 297:.\Generated_Source\PSoC5/SPI0_IntClock.c **** uint16 SPI0_IntClock_GetDividerRegister(void) 
 298:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
 299:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     return CY_GET_REG16(SPI0_IntClock_DIV_PTR);
 300:.\Generated_Source\PSoC5/SPI0_IntClock.c **** }
 301:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 302:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 303:.\Generated_Source\PSoC5/SPI0_IntClock.c **** /*******************************************************************************
 304:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Function Name: SPI0_IntClock_SetModeRegister
 305:.\Generated_Source\PSoC5/SPI0_IntClock.c **** ********************************************************************************
 306:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 307:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Summary:
 308:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  Sets flags that control the operating mode of the clock. This function only
 309:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  changes flags from 0 to 1; flags that are already 1 will remain unchanged.
 310:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  To clear flags, use the ClearModeRegister function. The clock must be
 311:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  disabled before changing the mode.
 312:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 313:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Parameters:
 314:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  clkMode: Bit mask containing the bits to set. For PSoC 3 and PSoC 5,
 315:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   clkMode should be a set of the following optional bits or'ed together.
 316:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 317:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *                 occur when the divider count reaches half of the divide
 318:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *                 value.
 319:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 320:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *                 is asserted for approximately half of its period. When
 321:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *                 disabled, the output clock is asserted for one period of the
 322:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *                 source clock.
 323:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 324:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *                 be enabled for all synchronous clocks.
 325:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   See the Technical Reference Manual for details about setting the mode of
 326:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 327:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 328:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Returns:
 329:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  None
 330:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 331:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *******************************************************************************/
 332:.\Generated_Source\PSoC5/SPI0_IntClock.c **** void SPI0_IntClock_SetModeRegister(uint8 modeBitMask) 
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 11


 333:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
 334:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     SPI0_IntClock_MOD_SRC |= modeBitMask & (uint8)SPI0_IntClock_MODE_MASK;
 335:.\Generated_Source\PSoC5/SPI0_IntClock.c **** }
 336:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 337:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 338:.\Generated_Source\PSoC5/SPI0_IntClock.c **** /*******************************************************************************
 339:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Function Name: SPI0_IntClock_ClearModeRegister
 340:.\Generated_Source\PSoC5/SPI0_IntClock.c **** ********************************************************************************
 341:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 342:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Summary:
 343:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  Clears flags that control the operating mode of the clock. This function
 344:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  only changes flags from 1 to 0; flags that are already 0 will remain
 345:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  unchanged. To set flags, use the SetModeRegister function. The clock must be
 346:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  disabled before changing the mode.
 347:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 348:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Parameters:
 349:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  clkMode: Bit mask containing the bits to clear. For PSoC 3 and PSoC 5,
 350:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   clkMode should be a set of the following optional bits or'ed together.
 351:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 352:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *                 occur when the divider count reaches half of the divide
 353:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *                 value.
 354:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 355:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *                 is asserted for approximately half of its period. When
 356:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *                 disabled, the output clock is asserted for one period of the
 357:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *                 source clock.
 358:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 359:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *                 be enabled for all synchronous clocks.
 360:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   See the Technical Reference Manual for details about setting the mode of
 361:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 362:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 363:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Returns:
 364:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  None
 365:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 366:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *******************************************************************************/
 367:.\Generated_Source\PSoC5/SPI0_IntClock.c **** void SPI0_IntClock_ClearModeRegister(uint8 modeBitMask) 
 368:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
 369:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     SPI0_IntClock_MOD_SRC &= (uint8)(~modeBitMask) | (uint8)(~(uint8)(SPI0_IntClock_MODE_MASK));
 370:.\Generated_Source\PSoC5/SPI0_IntClock.c **** }
 371:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 372:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 373:.\Generated_Source\PSoC5/SPI0_IntClock.c **** /*******************************************************************************
 374:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Function Name: SPI0_IntClock_GetModeRegister
 375:.\Generated_Source\PSoC5/SPI0_IntClock.c **** ********************************************************************************
 376:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 377:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Summary:
 378:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  Gets the clock mode register value.
 379:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 380:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Parameters:
 381:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  None
 382:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 383:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Returns:
 384:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  Bit mask representing the enabled mode bits. See the SetModeRegister and
 385:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  ClearModeRegister descriptions for details about the mode bits.
 386:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 387:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *******************************************************************************/
 388:.\Generated_Source\PSoC5/SPI0_IntClock.c **** uint8 SPI0_IntClock_GetModeRegister(void) 
 389:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 12


 390:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     return SPI0_IntClock_MOD_SRC & (uint8)(SPI0_IntClock_MODE_MASK);
 391:.\Generated_Source\PSoC5/SPI0_IntClock.c **** }
 392:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 393:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 394:.\Generated_Source\PSoC5/SPI0_IntClock.c **** /*******************************************************************************
 395:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Function Name: SPI0_IntClock_SetSourceRegister
 396:.\Generated_Source\PSoC5/SPI0_IntClock.c **** ********************************************************************************
 397:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 398:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Summary:
 399:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  Sets the input source of the clock. The clock must be disabled before
 400:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  changing the source. The old and new clock sources must be running.
 401:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 402:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Parameters:
 403:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  clkSource:  For PSoC 3 and PSoC 5 devices, clkSource should be one of the
 404:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   following input sources:
 405:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   - CYCLK_SRC_SEL_SYNC_DIG
 406:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   - CYCLK_SRC_SEL_IMO
 407:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   - CYCLK_SRC_SEL_XTALM
 408:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   - CYCLK_SRC_SEL_ILO
 409:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   - CYCLK_SRC_SEL_PLL
 410:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   - CYCLK_SRC_SEL_XTALK
 411:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   - CYCLK_SRC_SEL_DSI_G
 412:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   - CYCLK_SRC_SEL_DSI_D/CYCLK_SRC_SEL_DSI_A
 413:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *   See the Technical Reference Manual for details on clock sources.
 414:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 415:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Returns:
 416:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  None
 417:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 418:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *******************************************************************************/
 419:.\Generated_Source\PSoC5/SPI0_IntClock.c **** void SPI0_IntClock_SetSourceRegister(uint8 clkSource) 
 420:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
 421:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     uint16 currDiv = SPI0_IntClock_GetDividerRegister();
 422:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     uint8 oldSrc = SPI0_IntClock_GetSourceRegister();
 423:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 424:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     if (((oldSrc != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 425:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         (clkSource == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 426:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     {
 427:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         /* Switching to Master and divider is 1, set SSS, which will output master, */
 428:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         /* then set the source so we are consistent.                                */
 429:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         SPI0_IntClock_MOD_SRC |= CYCLK_SSS;
 430:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         SPI0_IntClock_MOD_SRC =
 431:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             (SPI0_IntClock_MOD_SRC & (uint8)(~SPI0_IntClock_SRC_SEL_MSK)) | clkSource;
 432:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     }
 433:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     else if (((oldSrc == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 434:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             (clkSource != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 435:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     {
 436:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         /* Switching from Master to not and divider is 1, set source, so we don't   */
 437:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         /* lock when we clear SSS.                                                  */
 438:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         SPI0_IntClock_MOD_SRC =
 439:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             (SPI0_IntClock_MOD_SRC & (uint8)(~SPI0_IntClock_SRC_SEL_MSK)) | clkSource;
 440:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         SPI0_IntClock_MOD_SRC &= (uint8)(~CYCLK_SSS);
 441:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     }
 442:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     else
 443:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     {
 444:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         SPI0_IntClock_MOD_SRC =
 445:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             (SPI0_IntClock_MOD_SRC & (uint8)(~SPI0_IntClock_SRC_SEL_MSK)) | clkSource;
 446:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     }
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 13


 447:.\Generated_Source\PSoC5/SPI0_IntClock.c **** }
 448:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 449:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 
 450:.\Generated_Source\PSoC5/SPI0_IntClock.c **** /*******************************************************************************
 451:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Function Name: SPI0_IntClock_GetSourceRegister
 452:.\Generated_Source\PSoC5/SPI0_IntClock.c **** ********************************************************************************
 453:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 454:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Summary:
 455:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  Gets the input source of the clock.
 456:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 457:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Parameters:
 458:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  None
 459:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 460:.\Generated_Source\PSoC5/SPI0_IntClock.c **** * Returns:
 461:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *  The input source of the clock. See SetSourceRegister for details.
 462:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *
 463:.\Generated_Source\PSoC5/SPI0_IntClock.c **** *******************************************************************************/
 464:.\Generated_Source\PSoC5/SPI0_IntClock.c **** uint8 SPI0_IntClock_GetSourceRegister(void) 
 465:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
 466:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     return SPI0_IntClock_MOD_SRC & SPI0_IntClock_SRC_SEL_MSK;
 231              		.loc 1 466 0
 232 0002 2B4B     		ldr	r3, .L44
 233              	.LBE12:
 234              	.LBE11:
 235              	.LBB15:
 236              	.LBB16:
 299:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     return CY_GET_REG16(SPI0_IntClock_DIV_PTR);
 237              		.loc 1 299 0
 238 0004 2B4C     		ldr	r4, .L44+4
 239              	.LBE16:
 240              	.LBE15:
 241              	.LBB19:
 242              	.LBB13:
 243              		.loc 1 466 0
 244 0006 1E78     		ldrb	r6, [r3, #0]	@ zero_extendqisi2
 245              	.LBE13:
 246              	.LBE19:
 247              	.LBB20:
 248              	.LBB17:
 299:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     return CY_GET_REG16(SPI0_IntClock_DIV_PTR);
 249              		.loc 1 299 0
 250 0008 2288     		ldrh	r2, [r4, #0]
 251              	.LBE17:
 252              	.LBE20:
 253              	.LBB21:
 254              	.LBB14:
 255              		.loc 1 466 0
 256 000a 06F00706 		and	r6, r6, #7
 257              	.LBE14:
 258              	.LBE21:
 259              	.LBB22:
 260              	.LBB18:
 299:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     return CY_GET_REG16(SPI0_IntClock_DIV_PTR);
 261              		.loc 1 299 0
 262 000e 92B2     		uxth	r2, r2
 263              	.LBE18:
 264              	.LBE22:
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 14


 201:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     if (clkDivider != oldDivider)
 265              		.loc 1 201 0
 266 0010 9042     		cmp	r0, r2
 267 0012 4CD0     		beq	.L23
 203:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         enabled = SPI0_IntClock_CLKEN & SPI0_IntClock_CLKEN_MASK;
 268              		.loc 1 203 0
 269 0014 284D     		ldr	r5, .L44+8
 270 0016 2D78     		ldrb	r5, [r5, #0]	@ zero_extendqisi2
 271              	.LVL8:
 205:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         if ((currSrc == (uint8)CYCLK_SRC_SEL_CLK_SYNC_D) && ((oldDivider == 0u) || (clkDivider == 0
 272              		.loc 1 205 0
 273 0018 6EB9     		cbnz	r6, .L26
 205:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         if ((currSrc == (uint8)CYCLK_SRC_SEL_CLK_SYNC_D) && ((oldDivider == 0u) || (clkDivider == 0
 274              		.loc 1 205 0 is_stmt 0 discriminator 1
 275 001a 32B1     		cbz	r2, .L27
 276 001c 58B9     		cbnz	r0, .L26
 277              	.L28:
 220:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 SPI0_IntClock_MOD_SRC |= CYCLK_SSS;
 278              		.loc 1 220 0 is_stmt 1
 279 001e 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 280 0020 42F04001 		orr	r1, r2, #64
 281              	.LVL9:
 282 0024 1970     		strb	r1, [r3, #0]
 221:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CY_SET_REG16(SPI0_IntClock_DIV_PTR, clkDivider);
 283              		.loc 1 221 0
 284 0026 2080     		strh	r0, [r4, #0]	@ movhi
 285 0028 F0BD     		pop	{r4, r5, r6, r7, pc}
 286              	.LVL10:
 287              	.L27:
 213:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CY_SET_REG16(SPI0_IntClock_DIV_PTR, clkDivider);
 288              		.loc 1 213 0
 289 002a 2080     		strh	r0, [r4, #0]	@ movhi
 214:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 SPI0_IntClock_MOD_SRC &= (uint8)(~CYCLK_SSS);
 290              		.loc 1 214 0
 291 002c 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 292              	.LVL11:
 293 002e 00F0BF02 		and	r2, r0, #191
 294 0032 1A70     		strb	r2, [r3, #0]
 295 0034 F0BD     		pop	{r4, r5, r6, r7, pc}
 296              	.LVL12:
 297              	.L26:
 227:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             if (enabled != 0u)
 298              		.loc 1 227 0
 299 0036 15F00105 		ands	r5, r5, #1
 300              	.LVL13:
 301 003a 21D0     		beq	.L30
 236:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CLK_DIST_DMASK = SPI0_IntClock_CLKEN_MASK;
 302              		.loc 1 236 0
 303 003c 1F4E     		ldr	r6, .L44+12
 229:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CLK_DIST_LD = 0x00u;
 304              		.loc 1 229 0
 305 003e 204B     		ldr	r3, .L44+16
 306 0040 0024     		movs	r4, #0
 236:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CLK_DIST_DMASK = SPI0_IntClock_CLKEN_MASK;
 307              		.loc 1 236 0
 308 0042 0127     		movs	r7, #1
 229:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CLK_DIST_LD = 0x00u;
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 15


 309              		.loc 1 229 0
 310 0044 1C70     		strb	r4, [r3, #0]
 236:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CLK_DIST_DMASK = SPI0_IntClock_CLKEN_MASK;
 311              		.loc 1 236 0
 312 0046 3770     		strb	r7, [r6, #0]
 237:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CLK_DIST_AMASK = 0x00u;
 313              		.loc 1 237 0
 314 0048 3471     		strb	r4, [r6, #4]
 240:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 315              		.loc 1 240 0
 316 004a 1E4C     		ldr	r4, .L44+20
 317 004c 2678     		ldrb	r6, [r4, #0]	@ zero_extendqisi2
 318 004e 06F07F06 		and	r6, r6, #127
 319 0052 2670     		strb	r6, [r4, #0]
 243:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 if (((SPI0_IntClock_MOD_SRC & CYCLK_SYNC) == 0u) || (clkDivider == 0u))
 320              		.loc 1 243 0
 321 0054 7A34     		adds	r4, r4, #122
 322 0056 2478     		ldrb	r4, [r4, #0]	@ zero_extendqisi2
 323 0058 04F00804 		and	r4, r4, #8
 324 005c E4B2     		uxtb	r4, r4
 325 005e 04B1     		cbz	r4, .L31
 243:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 if (((SPI0_IntClock_MOD_SRC & CYCLK_SYNC) == 0u) || (clkDivider == 0u))
 326              		.loc 1 243 0 is_stmt 0 discriminator 1
 327 0060 70B9     		cbnz	r0, .L30
 328              	.L31:
 246:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                     CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 329              		.loc 1 246 0 is_stmt 1
 330 0062 194E     		ldr	r6, .L44+24
 331 0064 3280     		strh	r2, [r6, #0]	@ movhi
 247:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                     CLK_DIST_LD = CYCLK_LD_DISABLE|CYCLK_LD_SYNC_EN|CYCLK_LD_LOAD;
 332              		.loc 1 247 0
 333 0066 0722     		movs	r2, #7
 334 0068 1A70     		strb	r2, [r3, #0]
 335              	.L33:
 250:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                     while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 336              		.loc 1 250 0 discriminator 1
 337 006a 154B     		ldr	r3, .L44+16
 338 006c 1C78     		ldrb	r4, [r3, #0]	@ zero_extendqisi2
 339 006e 14F00104 		ands	r4, r4, #1
 340 0072 FAD1     		bne	.L33
 253:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                     SPI0_IntClock_CLKEN &= (uint8)(~SPI0_IntClock_CLKEN_MASK);
 341              		.loc 1 253 0
 342 0074 104A     		ldr	r2, .L44+8
 343 0076 1678     		ldrb	r6, [r2, #0]	@ zero_extendqisi2
 344 0078 06F0FE06 		and	r6, r6, #254
 345 007c 1670     		strb	r6, [r2, #0]
 257:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                     CLK_DIST_LD = 0x00u;
 346              		.loc 1 257 0
 347 007e 1C70     		strb	r4, [r3, #0]
 348              	.L30:
 263:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             if ((SPI0_IntClock_CLKEN & SPI0_IntClock_CLKEN_MASK) != 0u)
 349              		.loc 1 263 0
 350 0080 0D4B     		ldr	r3, .L44+8
 351 0082 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 352 0084 D207     		lsls	r2, r2, #31
 353 0086 0DD5     		bpl	.L34
 266:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CY_SET_REG16(CYREG_CLKDIST_WRK0, clkDivider);
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 16


 354              		.loc 1 266 0
 355 0088 A3F56873 		sub	r3, r3, #928
 268:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CLK_DIST_LD = (CYCLK_LD_LOAD | ((restart != 0u) ? CYCLK_LD_SYNC_EN : 0x00u));
 356              		.loc 1 268 0
 357 008c 0029     		cmp	r1, #0
 358 008e 0CBF     		ite	eq
 359 0090 0122     		moveq	r2, #1
 360 0092 0322     		movne	r2, #3
 266:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CY_SET_REG16(CYREG_CLKDIST_WRK0, clkDivider);
 361              		.loc 1 266 0
 362 0094 1880     		strh	r0, [r3, #0]	@ movhi
 268:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CLK_DIST_LD = (CYCLK_LD_LOAD | ((restart != 0u) ? CYCLK_LD_SYNC_EN : 0x00u));
 363              		.loc 1 268 0
 364 0096 03F8012C 		strb	r2, [r3, #-1]
 365              	.LVL14:
 366              	.L36:
 269:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 367              		.loc 1 269 0 discriminator 1
 368 009a 0949     		ldr	r1, .L44+16
 369 009c 0878     		ldrb	r0, [r1, #0]	@ zero_extendqisi2
 370 009e C207     		lsls	r2, r0, #31
 371 00a0 FBD4     		bmi	.L36
 372 00a2 F0BD     		pop	{r4, r5, r6, r7, pc}
 373              	.LVL15:
 374              	.L34:
 274:.\Generated_Source\PSoC5/SPI0_IntClock.c ****                 CY_SET_REG16(SPI0_IntClock_DIV_PTR, clkDivider);
 375              		.loc 1 274 0
 376 00a4 0349     		ldr	r1, .L44+4
 377              	.LVL16:
 378 00a6 0880     		strh	r0, [r1, #0]	@ movhi
 275:.\Generated_Source\PSoC5/SPI0_IntClock.c **** 				SPI0_IntClock_CLKEN |= enabled;
 379              		.loc 1 275 0
 380 00a8 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 381              	.LVL17:
 382 00aa 0543     		orrs	r5, r5, r0
 383 00ac 1D70     		strb	r5, [r3, #0]
 384              	.LVL18:
 385              	.L23:
 386 00ae F0BD     		pop	{r4, r5, r6, r7, pc}
 387              	.L45:
 388              		.align	2
 389              	.L44:
 390 00b0 82400040 		.word	1073758338
 391 00b4 80400040 		.word	1073758336
 392 00b8 A2430040 		.word	1073759138
 393 00bc 10400040 		.word	1073758224
 394 00c0 01400040 		.word	1073758209
 395 00c4 08400040 		.word	1073758216
 396 00c8 02400040 		.word	1073758210
 397              		.cfi_endproc
 398              	.LFE4:
 399              		.size	SPI0_IntClock_SetDividerRegister, .-SPI0_IntClock_SetDividerRegister
 400              		.section	.text.SPI0_IntClock_GetDividerRegister,"ax",%progbits
 401              		.align	1
 402              		.global	SPI0_IntClock_GetDividerRegister
 403              		.thumb
 404              		.thumb_func
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 17


 405              		.type	SPI0_IntClock_GetDividerRegister, %function
 406              	SPI0_IntClock_GetDividerRegister:
 407              	.LFB5:
 298:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
 408              		.loc 1 298 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412              		@ link register save eliminated.
 299:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     return CY_GET_REG16(SPI0_IntClock_DIV_PTR);
 413              		.loc 1 299 0
 414 0000 014B     		ldr	r3, .L47
 415 0002 1888     		ldrh	r0, [r3, #0]
 300:.\Generated_Source\PSoC5/SPI0_IntClock.c **** }
 416              		.loc 1 300 0
 417 0004 80B2     		uxth	r0, r0
 418 0006 7047     		bx	lr
 419              	.L48:
 420              		.align	2
 421              	.L47:
 422 0008 80400040 		.word	1073758336
 423              		.cfi_endproc
 424              	.LFE5:
 425              		.size	SPI0_IntClock_GetDividerRegister, .-SPI0_IntClock_GetDividerRegister
 426              		.section	.text.SPI0_IntClock_SetModeRegister,"ax",%progbits
 427              		.align	1
 428              		.global	SPI0_IntClock_SetModeRegister
 429              		.thumb
 430              		.thumb_func
 431              		.type	SPI0_IntClock_SetModeRegister, %function
 432              	SPI0_IntClock_SetModeRegister:
 433              	.LFB6:
 333:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
 434              		.loc 1 333 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              		@ link register save eliminated.
 439              	.LVL19:
 334:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     SPI0_IntClock_MOD_SRC |= modeBitMask & (uint8)SPI0_IntClock_MODE_MASK;
 440              		.loc 1 334 0
 441 0000 034B     		ldr	r3, .L50
 442 0002 00F0F800 		and	r0, r0, #248
 443              	.LVL20:
 444 0006 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 445 0008 40EA0201 		orr	r1, r0, r2
 446 000c 1970     		strb	r1, [r3, #0]
 447 000e 7047     		bx	lr
 448              	.L51:
 449              		.align	2
 450              	.L50:
 451 0010 82400040 		.word	1073758338
 452              		.cfi_endproc
 453              	.LFE6:
 454              		.size	SPI0_IntClock_SetModeRegister, .-SPI0_IntClock_SetModeRegister
 455              		.section	.text.SPI0_IntClock_ClearModeRegister,"ax",%progbits
 456              		.align	1
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 18


 457              		.global	SPI0_IntClock_ClearModeRegister
 458              		.thumb
 459              		.thumb_func
 460              		.type	SPI0_IntClock_ClearModeRegister, %function
 461              	SPI0_IntClock_ClearModeRegister:
 462              	.LFB7:
 368:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
 463              		.loc 1 368 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 467              		@ link register save eliminated.
 468              	.LVL21:
 369:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     SPI0_IntClock_MOD_SRC &= (uint8)(~modeBitMask) | (uint8)(~(uint8)(SPI0_IntClock_MODE_MASK));
 469              		.loc 1 369 0
 470 0000 034B     		ldr	r3, .L53
 471 0002 C043     		mvns	r0, r0
 472              	.LVL22:
 473 0004 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 474 0006 40F00701 		orr	r1, r0, #7
 475 000a 0A40     		ands	r2, r2, r1
 476 000c 1A70     		strb	r2, [r3, #0]
 477 000e 7047     		bx	lr
 478              	.L54:
 479              		.align	2
 480              	.L53:
 481 0010 82400040 		.word	1073758338
 482              		.cfi_endproc
 483              	.LFE7:
 484              		.size	SPI0_IntClock_ClearModeRegister, .-SPI0_IntClock_ClearModeRegister
 485              		.section	.text.SPI0_IntClock_GetModeRegister,"ax",%progbits
 486              		.align	1
 487              		.global	SPI0_IntClock_GetModeRegister
 488              		.thumb
 489              		.thumb_func
 490              		.type	SPI0_IntClock_GetModeRegister, %function
 491              	SPI0_IntClock_GetModeRegister:
 492              	.LFB8:
 389:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
 493              		.loc 1 389 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 497              		@ link register save eliminated.
 390:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     return SPI0_IntClock_MOD_SRC & (uint8)(SPI0_IntClock_MODE_MASK);
 498              		.loc 1 390 0
 499 0000 024B     		ldr	r3, .L56
 500 0002 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 391:.\Generated_Source\PSoC5/SPI0_IntClock.c **** }
 501              		.loc 1 391 0
 502 0004 00F0F800 		and	r0, r0, #248
 503 0008 7047     		bx	lr
 504              	.L57:
 505 000a 00BF     		.align	2
 506              	.L56:
 507 000c 82400040 		.word	1073758338
 508              		.cfi_endproc
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 19


 509              	.LFE8:
 510              		.size	SPI0_IntClock_GetModeRegister, .-SPI0_IntClock_GetModeRegister
 511              		.section	.text.SPI0_IntClock_SetSourceRegister,"ax",%progbits
 512              		.align	1
 513              		.global	SPI0_IntClock_SetSourceRegister
 514              		.thumb
 515              		.thumb_func
 516              		.type	SPI0_IntClock_SetSourceRegister, %function
 517              	SPI0_IntClock_SetSourceRegister:
 518              	.LFB9:
 420:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
 519              		.loc 1 420 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 0
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523              		@ link register save eliminated.
 524              	.LVL23:
 525              	.LBB23:
 526              	.LBB24:
 299:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     return CY_GET_REG16(SPI0_IntClock_DIV_PTR);
 527              		.loc 1 299 0
 528 0000 124B     		ldr	r3, .L66
 529 0002 1988     		ldrh	r1, [r3, #0]
 530              	.LBE24:
 531              	.LBE23:
 532              	.LBB26:
 533              	.LBB27:
 534              		.loc 1 466 0
 535 0004 0233     		adds	r3, r3, #2
 536 0006 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 537              	.LBE27:
 538              	.LBE26:
 539              	.LBB28:
 540              	.LBB25:
 299:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     return CY_GET_REG16(SPI0_IntClock_DIV_PTR);
 541              		.loc 1 299 0
 542 0008 89B2     		uxth	r1, r1
 543              	.LBE25:
 544              	.LBE28:
 424:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     if (((oldSrc != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 545              		.loc 1 424 0
 546 000a 12F0070F 		tst	r2, #7
 547 000e 1A46     		mov	r2, r3
 548 0010 09D0     		beq	.L59
 424:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     if (((oldSrc != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 549              		.loc 1 424 0 is_stmt 0 discriminator 1
 550 0012 A0B9     		cbnz	r0, .L60
 425:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         (clkSource == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 551              		.loc 1 425 0 is_stmt 1
 552 0014 99B9     		cbnz	r1, .L60
 429:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         SPI0_IntClock_MOD_SRC |= CYCLK_SSS;
 553              		.loc 1 429 0
 554 0016 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 555 0018 42F04000 		orr	r0, r2, #64
 556              	.LVL24:
 557 001c 1870     		strb	r0, [r3, #0]
 431:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             (SPI0_IntClock_MOD_SRC & (uint8)(~SPI0_IntClock_SRC_SEL_MSK)) | clkSource;
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 20


 558              		.loc 1 431 0
 559 001e 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 430:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         SPI0_IntClock_MOD_SRC =
 560              		.loc 1 430 0
 561 0020 01F0F801 		and	r1, r1, #248
 562 0024 09E0     		b	.L65
 563              	.LVL25:
 564              	.L59:
 433:.\Generated_Source\PSoC5/SPI0_IntClock.c ****     else if (((oldSrc == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 565              		.loc 1 433 0 discriminator 1
 566 0026 50B1     		cbz	r0, .L60
 434:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             (clkSource != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 567              		.loc 1 434 0
 568 0028 49B9     		cbnz	r1, .L60
 439:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             (SPI0_IntClock_MOD_SRC & (uint8)(~SPI0_IntClock_SRC_SEL_MSK)) | clkSource;
 569              		.loc 1 439 0
 570 002a 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 438:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         SPI0_IntClock_MOD_SRC =
 571              		.loc 1 438 0
 572 002c 21F00702 		bic	r2, r1, #7
 573 0030 1043     		orrs	r0, r0, r2
 574              	.LVL26:
 575 0032 1870     		strb	r0, [r3, #0]
 440:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         SPI0_IntClock_MOD_SRC &= (uint8)(~CYCLK_SSS);
 576              		.loc 1 440 0
 577 0034 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 578 0036 00F0BF01 		and	r1, r0, #191
 579              	.L65:
 580 003a 1970     		strb	r1, [r3, #0]
 581 003c 7047     		bx	lr
 582              	.LVL27:
 583              	.L60:
 445:.\Generated_Source\PSoC5/SPI0_IntClock.c ****             (SPI0_IntClock_MOD_SRC & (uint8)(~SPI0_IntClock_SRC_SEL_MSK)) | clkSource;
 584              		.loc 1 445 0
 585 003e 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 444:.\Generated_Source\PSoC5/SPI0_IntClock.c ****         SPI0_IntClock_MOD_SRC =
 586              		.loc 1 444 0
 587 0040 23F00701 		bic	r1, r3, #7
 588 0044 0843     		orrs	r0, r0, r1
 589              	.LVL28:
 590 0046 1070     		strb	r0, [r2, #0]
 591 0048 7047     		bx	lr
 592              	.L67:
 593 004a 00BF     		.align	2
 594              	.L66:
 595 004c 80400040 		.word	1073758336
 596              		.cfi_endproc
 597              	.LFE9:
 598              		.size	SPI0_IntClock_SetSourceRegister, .-SPI0_IntClock_SetSourceRegister
 599              		.section	.text.SPI0_IntClock_GetSourceRegister,"ax",%progbits
 600              		.align	1
 601              		.global	SPI0_IntClock_GetSourceRegister
 602              		.thumb
 603              		.thumb_func
 604              		.type	SPI0_IntClock_GetSourceRegister, %function
 605              	SPI0_IntClock_GetSourceRegister:
 606              	.LFB10:
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 21


 465:.\Generated_Source\PSoC5/SPI0_IntClock.c **** {
 607              		.loc 1 465 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611              		@ link register save eliminated.
 612              		.loc 1 466 0
 613 0000 024B     		ldr	r3, .L69
 614 0002 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 467:.\Generated_Source\PSoC5/SPI0_IntClock.c **** }
 615              		.loc 1 467 0
 616 0004 00F00700 		and	r0, r0, #7
 617 0008 7047     		bx	lr
 618              	.L70:
 619 000a 00BF     		.align	2
 620              	.L69:
 621 000c 82400040 		.word	1073758338
 622              		.cfi_endproc
 623              	.LFE10:
 624              		.size	SPI0_IntClock_GetSourceRegister, .-SPI0_IntClock_GetSourceRegister
 625              		.text
 626              	.Letext0:
 627              		.file 2 "./Generated_Source/PSoC5/cytypes.h"
 628              		.section	.debug_info,"",%progbits
 629              	.Ldebug_info0:
 630 0000 D3020000 		.4byte	0x2d3
 631 0004 0200     		.2byte	0x2
 632 0006 00000000 		.4byte	.Ldebug_abbrev0
 633 000a 04       		.byte	0x4
 634 000b 01       		.uleb128 0x1
 635 000c 23020000 		.4byte	.LASF35
 636 0010 01       		.byte	0x1
 637 0011 F4010000 		.4byte	.LASF36
 638 0015 17000000 		.4byte	.LASF37
 639 0019 58000000 		.4byte	.Ldebug_ranges0+0x58
 640 001d 00000000 		.4byte	0
 641 0021 00000000 		.4byte	0
 642 0025 00000000 		.4byte	.Ldebug_line0
 643 0029 02       		.uleb128 0x2
 644 002a 01       		.byte	0x1
 645 002b 06       		.byte	0x6
 646 002c C8020000 		.4byte	.LASF0
 647 0030 02       		.uleb128 0x2
 648 0031 01       		.byte	0x1
 649 0032 08       		.byte	0x8
 650 0033 F7000000 		.4byte	.LASF1
 651 0037 02       		.uleb128 0x2
 652 0038 02       		.byte	0x2
 653 0039 05       		.byte	0x5
 654 003a 7D010000 		.4byte	.LASF2
 655 003e 02       		.uleb128 0x2
 656 003f 02       		.byte	0x2
 657 0040 07       		.byte	0x7
 658 0041 30010000 		.4byte	.LASF3
 659 0045 02       		.uleb128 0x2
 660 0046 04       		.byte	0x4
 661 0047 05       		.byte	0x5
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 22


 662 0048 B5020000 		.4byte	.LASF4
 663 004c 02       		.uleb128 0x2
 664 004d 04       		.byte	0x4
 665 004e 07       		.byte	0x7
 666 004f 1E010000 		.4byte	.LASF5
 667 0053 02       		.uleb128 0x2
 668 0054 08       		.byte	0x8
 669 0055 05       		.byte	0x5
 670 0056 C6010000 		.4byte	.LASF6
 671 005a 02       		.uleb128 0x2
 672 005b 08       		.byte	0x8
 673 005c 07       		.byte	0x7
 674 005d A3010000 		.4byte	.LASF7
 675 0061 03       		.uleb128 0x3
 676 0062 04       		.byte	0x4
 677 0063 05       		.byte	0x5
 678 0064 696E7400 		.ascii	"int\000"
 679 0068 02       		.uleb128 0x2
 680 0069 04       		.byte	0x4
 681 006a 07       		.byte	0x7
 682 006b 8E010000 		.4byte	.LASF8
 683 006f 04       		.uleb128 0x4
 684 0070 1D020000 		.4byte	.LASF9
 685 0074 02       		.byte	0x2
 686 0075 5B       		.byte	0x5b
 687 0076 30000000 		.4byte	0x30
 688 007a 04       		.uleb128 0x4
 689 007b 87010000 		.4byte	.LASF10
 690 007f 02       		.byte	0x2
 691 0080 5C       		.byte	0x5c
 692 0081 3E000000 		.4byte	0x3e
 693 0085 02       		.uleb128 0x2
 694 0086 04       		.byte	0x4
 695 0087 04       		.byte	0x4
 696 0088 D9000000 		.4byte	.LASF11
 697 008c 02       		.uleb128 0x2
 698 008d 08       		.byte	0x8
 699 008e 04       		.byte	0x4
 700 008f 6E010000 		.4byte	.LASF12
 701 0093 02       		.uleb128 0x2
 702 0094 01       		.byte	0x1
 703 0095 08       		.byte	0x8
 704 0096 E7010000 		.4byte	.LASF13
 705 009a 04       		.uleb128 0x4
 706 009b 19010000 		.4byte	.LASF14
 707 009f 02       		.byte	0x2
 708 00a0 F0       		.byte	0xf0
 709 00a1 A5000000 		.4byte	0xa5
 710 00a5 05       		.uleb128 0x5
 711 00a6 6F000000 		.4byte	0x6f
 712 00aa 04       		.uleb128 0x4
 713 00ab 00000000 		.4byte	.LASF15
 714 00af 02       		.byte	0x2
 715 00b0 F1       		.byte	0xf1
 716 00b1 B5000000 		.4byte	0xb5
 717 00b5 05       		.uleb128 0x5
 718 00b6 7A000000 		.4byte	0x7a
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 23


 719 00ba 06       		.uleb128 0x6
 720 00bb 01       		.byte	0x1
 721 00bc 6C020000 		.4byte	.LASF16
 722 00c0 01       		.byte	0x1
 723 00c1 2901     		.2byte	0x129
 724 00c3 01       		.byte	0x1
 725 00c4 7A000000 		.4byte	0x7a
 726 00c8 01       		.byte	0x1
 727 00c9 06       		.uleb128 0x6
 728 00ca 01       		.byte	0x1
 729 00cb 8D020000 		.4byte	.LASF17
 730 00cf 01       		.byte	0x1
 731 00d0 D001     		.2byte	0x1d0
 732 00d2 01       		.byte	0x1
 733 00d3 6F000000 		.4byte	0x6f
 734 00d7 01       		.byte	0x1
 735 00d8 07       		.uleb128 0x7
 736 00d9 01       		.byte	0x1
 737 00da 05010000 		.4byte	.LASF18
 738 00de 01       		.byte	0x1
 739 00df 2D       		.byte	0x2d
 740 00e0 01       		.byte	0x1
 741 00e1 00000000 		.4byte	.LFB0
 742 00e5 18000000 		.4byte	.LFE0
 743 00e9 02       		.byte	0x2
 744 00ea 7D       		.byte	0x7d
 745 00eb 00       		.sleb128 0
 746 00ec 01       		.byte	0x1
 747 00ed 07       		.uleb128 0x7
 748 00ee 01       		.byte	0x1
 749 00ef D4010000 		.4byte	.LASF19
 750 00f3 01       		.byte	0x1
 751 00f4 47       		.byte	0x47
 752 00f5 01       		.byte	0x1
 753 00f6 00000000 		.4byte	.LFB1
 754 00fa 18000000 		.4byte	.LFE1
 755 00fe 02       		.byte	0x2
 756 00ff 7D       		.byte	0x7d
 757 0100 00       		.sleb128 0
 758 0101 01       		.byte	0x1
 759 0102 08       		.uleb128 0x8
 760 0103 01       		.byte	0x1
 761 0104 DF000000 		.4byte	.LASF20
 762 0108 01       		.byte	0x1
 763 0109 64       		.byte	0x64
 764 010a 01       		.byte	0x1
 765 010b 00000000 		.4byte	.LFB2
 766 010f 68000000 		.4byte	.LFE2
 767 0113 00000000 		.4byte	.LLST0
 768 0117 01       		.byte	0x1
 769 0118 36010000 		.4byte	0x136
 770 011c 09       		.uleb128 0x9
 771 011d 0A000000 		.4byte	.LBB10
 772 0121 68000000 		.4byte	.LBE10
 773 0125 0A       		.uleb128 0xa
 774 0126 0C000000 		.4byte	.LASF26
 775 012a 01       		.byte	0x1
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 24


 776 012b 69       		.byte	0x69
 777 012c 7A000000 		.4byte	0x7a
 778 0130 20000000 		.4byte	.LLST1
 779 0134 00       		.byte	0
 780 0135 00       		.byte	0
 781 0136 0B       		.uleb128 0xb
 782 0137 01       		.byte	0x1
 783 0138 D4020000 		.4byte	.LASF21
 784 013c 01       		.byte	0x1
 785 013d 9D       		.byte	0x9d
 786 013e 01       		.byte	0x1
 787 013f 00000000 		.4byte	.LFB3
 788 0143 18000000 		.4byte	.LFE3
 789 0147 02       		.byte	0x2
 790 0148 7D       		.byte	0x7d
 791 0149 00       		.sleb128 0
 792 014a 01       		.byte	0x1
 793 014b 5F010000 		.4byte	0x15f
 794 014f 0C       		.uleb128 0xc
 795 0150 06000000 		.4byte	.LASF23
 796 0154 01       		.byte	0x1
 797 0155 9D       		.byte	0x9d
 798 0156 6F000000 		.4byte	0x6f
 799 015a 3E000000 		.4byte	.LLST2
 800 015e 00       		.byte	0
 801 015f 08       		.uleb128 0x8
 802 0160 01       		.byte	0x1
 803 0161 7C000000 		.4byte	.LASF22
 804 0165 01       		.byte	0x1
 805 0166 C1       		.byte	0xc1
 806 0167 01       		.byte	0x1
 807 0168 00000000 		.4byte	.LFB4
 808 016c CC000000 		.4byte	.LFE4
 809 0170 78000000 		.4byte	.LLST3
 810 0174 01       		.byte	0x1
 811 0175 DF010000 		.4byte	0x1df
 812 0179 0C       		.uleb128 0xc
 813 017a 63010000 		.4byte	.LASF24
 814 017e 01       		.byte	0x1
 815 017f C1       		.byte	0xc1
 816 0180 7A000000 		.4byte	0x7a
 817 0184 98000000 		.4byte	.LLST4
 818 0188 0C       		.uleb128 0xc
 819 0189 75010000 		.4byte	.LASF25
 820 018d 01       		.byte	0x1
 821 018e C1       		.byte	0xc1
 822 018f 6F000000 		.4byte	0x6f
 823 0193 F3000000 		.4byte	.LLST5
 824 0197 0A       		.uleb128 0xa
 825 0198 AD020000 		.4byte	.LASF27
 826 019c 01       		.byte	0x1
 827 019d C4       		.byte	0xc4
 828 019e 6F000000 		.4byte	0x6f
 829 01a2 46010000 		.4byte	.LLST6
 830 01a6 0D       		.uleb128 0xd
 831 01a7 9B010000 		.4byte	.LASF28
 832 01ab 01       		.byte	0x1
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 25


 833 01ac C6       		.byte	0xc6
 834 01ad 6F000000 		.4byte	0x6f
 835 01b1 01       		.byte	0x1
 836 01b2 56       		.byte	0x56
 837 01b3 0D       		.uleb128 0xd
 838 01b4 0C000000 		.4byte	.LASF26
 839 01b8 01       		.byte	0x1
 840 01b9 C7       		.byte	0xc7
 841 01ba 7A000000 		.4byte	0x7a
 842 01be 01       		.byte	0x1
 843 01bf 52       		.byte	0x52
 844 01c0 0E       		.uleb128 0xe
 845 01c1 C9000000 		.4byte	0xc9
 846 01c5 02000000 		.4byte	.LBB11
 847 01c9 00000000 		.4byte	.Ldebug_ranges0+0
 848 01cd 01       		.byte	0x1
 849 01ce C6       		.byte	0xc6
 850 01cf 0E       		.uleb128 0xe
 851 01d0 BA000000 		.4byte	0xba
 852 01d4 04000000 		.4byte	.LBB15
 853 01d8 20000000 		.4byte	.Ldebug_ranges0+0x20
 854 01dc 01       		.byte	0x1
 855 01dd C7       		.byte	0xc7
 856 01de 00       		.byte	0
 857 01df 0F       		.uleb128 0xf
 858 01e0 BA000000 		.4byte	0xba
 859 01e4 00000000 		.4byte	.LFB5
 860 01e8 0C000000 		.4byte	.LFE5
 861 01ec 02       		.byte	0x2
 862 01ed 7D       		.byte	0x7d
 863 01ee 00       		.sleb128 0
 864 01ef 01       		.byte	0x1
 865 01f0 10       		.uleb128 0x10
 866 01f1 01       		.byte	0x1
 867 01f2 BB000000 		.4byte	.LASF29
 868 01f6 01       		.byte	0x1
 869 01f7 4C01     		.2byte	0x14c
 870 01f9 01       		.byte	0x1
 871 01fa 00000000 		.4byte	.LFB6
 872 01fe 14000000 		.4byte	.LFE6
 873 0202 02       		.byte	0x2
 874 0203 7D       		.byte	0x7d
 875 0204 00       		.sleb128 0
 876 0205 01       		.byte	0x1
 877 0206 1B020000 		.4byte	0x21b
 878 020a 11       		.uleb128 0x11
 879 020b BA010000 		.4byte	.LASF30
 880 020f 01       		.byte	0x1
 881 0210 4C01     		.2byte	0x14c
 882 0212 6F000000 		.4byte	0x6f
 883 0216 5D010000 		.4byte	.LLST7
 884 021a 00       		.byte	0
 885 021b 10       		.uleb128 0x10
 886 021c 01       		.byte	0x1
 887 021d 43010000 		.4byte	.LASF31
 888 0221 01       		.byte	0x1
 889 0222 6F01     		.2byte	0x16f
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 26


 890 0224 01       		.byte	0x1
 891 0225 00000000 		.4byte	.LFB7
 892 0229 14000000 		.4byte	.LFE7
 893 022d 02       		.byte	0x2
 894 022e 7D       		.byte	0x7d
 895 022f 00       		.sleb128 0
 896 0230 01       		.byte	0x1
 897 0231 46020000 		.4byte	0x246
 898 0235 11       		.uleb128 0x11
 899 0236 BA010000 		.4byte	.LASF30
 900 023a 01       		.byte	0x1
 901 023b 6F01     		.2byte	0x16f
 902 023d 6F000000 		.4byte	0x6f
 903 0241 7E010000 		.4byte	.LLST8
 904 0245 00       		.byte	0
 905 0246 12       		.uleb128 0x12
 906 0247 01       		.byte	0x1
 907 0248 9D000000 		.4byte	.LASF38
 908 024c 01       		.byte	0x1
 909 024d 8401     		.2byte	0x184
 910 024f 01       		.byte	0x1
 911 0250 6F000000 		.4byte	0x6f
 912 0254 00000000 		.4byte	.LFB8
 913 0258 10000000 		.4byte	.LFE8
 914 025c 02       		.byte	0x2
 915 025d 7D       		.byte	0x7d
 916 025e 00       		.sleb128 0
 917 025f 01       		.byte	0x1
 918 0260 10       		.uleb128 0x10
 919 0261 01       		.byte	0x1
 920 0262 EF020000 		.4byte	.LASF32
 921 0266 01       		.byte	0x1
 922 0267 A301     		.2byte	0x1a3
 923 0269 01       		.byte	0x1
 924 026a 00000000 		.4byte	.LFB9
 925 026e 50000000 		.4byte	.LFE9
 926 0272 02       		.byte	0x2
 927 0273 7D       		.byte	0x7d
 928 0274 00       		.sleb128 0
 929 0275 01       		.byte	0x1
 930 0276 C5020000 		.4byte	0x2c5
 931 027a 11       		.uleb128 0x11
 932 027b BE020000 		.4byte	.LASF33
 933 027f 01       		.byte	0x1
 934 0280 A301     		.2byte	0x1a3
 935 0282 6F000000 		.4byte	0x6f
 936 0286 9F010000 		.4byte	.LLST9
 937 028a 13       		.uleb128 0x13
 938 028b EC010000 		.4byte	.LASF34
 939 028f 01       		.byte	0x1
 940 0290 A501     		.2byte	0x1a5
 941 0292 7A000000 		.4byte	0x7a
 942 0296 01       		.byte	0x1
 943 0297 51       		.byte	0x51
 944 0298 14       		.uleb128 0x14
 945 0299 0F030000 		.4byte	.LASF39
 946 029d 01       		.byte	0x1
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 27


 947 029e A601     		.2byte	0x1a6
 948 02a0 6F000000 		.4byte	0x6f
 949 02a4 15       		.uleb128 0x15
 950 02a5 BA000000 		.4byte	0xba
 951 02a9 00000000 		.4byte	.LBB23
 952 02ad 40000000 		.4byte	.Ldebug_ranges0+0x40
 953 02b1 01       		.byte	0x1
 954 02b2 A501     		.2byte	0x1a5
 955 02b4 16       		.uleb128 0x16
 956 02b5 C9000000 		.4byte	0xc9
 957 02b9 04000000 		.4byte	.LBB26
 958 02bd 08000000 		.4byte	.LBE26
 959 02c1 01       		.byte	0x1
 960 02c2 A601     		.2byte	0x1a6
 961 02c4 00       		.byte	0
 962 02c5 0F       		.uleb128 0xf
 963 02c6 C9000000 		.4byte	0xc9
 964 02ca 00000000 		.4byte	.LFB10
 965 02ce 10000000 		.4byte	.LFE10
 966 02d2 02       		.byte	0x2
 967 02d3 7D       		.byte	0x7d
 968 02d4 00       		.sleb128 0
 969 02d5 01       		.byte	0x1
 970 02d6 00       		.byte	0
 971              		.section	.debug_abbrev,"",%progbits
 972              	.Ldebug_abbrev0:
 973 0000 01       		.uleb128 0x1
 974 0001 11       		.uleb128 0x11
 975 0002 01       		.byte	0x1
 976 0003 25       		.uleb128 0x25
 977 0004 0E       		.uleb128 0xe
 978 0005 13       		.uleb128 0x13
 979 0006 0B       		.uleb128 0xb
 980 0007 03       		.uleb128 0x3
 981 0008 0E       		.uleb128 0xe
 982 0009 1B       		.uleb128 0x1b
 983 000a 0E       		.uleb128 0xe
 984 000b 55       		.uleb128 0x55
 985 000c 06       		.uleb128 0x6
 986 000d 11       		.uleb128 0x11
 987 000e 01       		.uleb128 0x1
 988 000f 52       		.uleb128 0x52
 989 0010 01       		.uleb128 0x1
 990 0011 10       		.uleb128 0x10
 991 0012 06       		.uleb128 0x6
 992 0013 00       		.byte	0
 993 0014 00       		.byte	0
 994 0015 02       		.uleb128 0x2
 995 0016 24       		.uleb128 0x24
 996 0017 00       		.byte	0
 997 0018 0B       		.uleb128 0xb
 998 0019 0B       		.uleb128 0xb
 999 001a 3E       		.uleb128 0x3e
 1000 001b 0B       		.uleb128 0xb
 1001 001c 03       		.uleb128 0x3
 1002 001d 0E       		.uleb128 0xe
 1003 001e 00       		.byte	0
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 28


 1004 001f 00       		.byte	0
 1005 0020 03       		.uleb128 0x3
 1006 0021 24       		.uleb128 0x24
 1007 0022 00       		.byte	0
 1008 0023 0B       		.uleb128 0xb
 1009 0024 0B       		.uleb128 0xb
 1010 0025 3E       		.uleb128 0x3e
 1011 0026 0B       		.uleb128 0xb
 1012 0027 03       		.uleb128 0x3
 1013 0028 08       		.uleb128 0x8
 1014 0029 00       		.byte	0
 1015 002a 00       		.byte	0
 1016 002b 04       		.uleb128 0x4
 1017 002c 16       		.uleb128 0x16
 1018 002d 00       		.byte	0
 1019 002e 03       		.uleb128 0x3
 1020 002f 0E       		.uleb128 0xe
 1021 0030 3A       		.uleb128 0x3a
 1022 0031 0B       		.uleb128 0xb
 1023 0032 3B       		.uleb128 0x3b
 1024 0033 0B       		.uleb128 0xb
 1025 0034 49       		.uleb128 0x49
 1026 0035 13       		.uleb128 0x13
 1027 0036 00       		.byte	0
 1028 0037 00       		.byte	0
 1029 0038 05       		.uleb128 0x5
 1030 0039 35       		.uleb128 0x35
 1031 003a 00       		.byte	0
 1032 003b 49       		.uleb128 0x49
 1033 003c 13       		.uleb128 0x13
 1034 003d 00       		.byte	0
 1035 003e 00       		.byte	0
 1036 003f 06       		.uleb128 0x6
 1037 0040 2E       		.uleb128 0x2e
 1038 0041 00       		.byte	0
 1039 0042 3F       		.uleb128 0x3f
 1040 0043 0C       		.uleb128 0xc
 1041 0044 03       		.uleb128 0x3
 1042 0045 0E       		.uleb128 0xe
 1043 0046 3A       		.uleb128 0x3a
 1044 0047 0B       		.uleb128 0xb
 1045 0048 3B       		.uleb128 0x3b
 1046 0049 05       		.uleb128 0x5
 1047 004a 27       		.uleb128 0x27
 1048 004b 0C       		.uleb128 0xc
 1049 004c 49       		.uleb128 0x49
 1050 004d 13       		.uleb128 0x13
 1051 004e 20       		.uleb128 0x20
 1052 004f 0B       		.uleb128 0xb
 1053 0050 00       		.byte	0
 1054 0051 00       		.byte	0
 1055 0052 07       		.uleb128 0x7
 1056 0053 2E       		.uleb128 0x2e
 1057 0054 00       		.byte	0
 1058 0055 3F       		.uleb128 0x3f
 1059 0056 0C       		.uleb128 0xc
 1060 0057 03       		.uleb128 0x3
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 29


 1061 0058 0E       		.uleb128 0xe
 1062 0059 3A       		.uleb128 0x3a
 1063 005a 0B       		.uleb128 0xb
 1064 005b 3B       		.uleb128 0x3b
 1065 005c 0B       		.uleb128 0xb
 1066 005d 27       		.uleb128 0x27
 1067 005e 0C       		.uleb128 0xc
 1068 005f 11       		.uleb128 0x11
 1069 0060 01       		.uleb128 0x1
 1070 0061 12       		.uleb128 0x12
 1071 0062 01       		.uleb128 0x1
 1072 0063 40       		.uleb128 0x40
 1073 0064 0A       		.uleb128 0xa
 1074 0065 9742     		.uleb128 0x2117
 1075 0067 0C       		.uleb128 0xc
 1076 0068 00       		.byte	0
 1077 0069 00       		.byte	0
 1078 006a 08       		.uleb128 0x8
 1079 006b 2E       		.uleb128 0x2e
 1080 006c 01       		.byte	0x1
 1081 006d 3F       		.uleb128 0x3f
 1082 006e 0C       		.uleb128 0xc
 1083 006f 03       		.uleb128 0x3
 1084 0070 0E       		.uleb128 0xe
 1085 0071 3A       		.uleb128 0x3a
 1086 0072 0B       		.uleb128 0xb
 1087 0073 3B       		.uleb128 0x3b
 1088 0074 0B       		.uleb128 0xb
 1089 0075 27       		.uleb128 0x27
 1090 0076 0C       		.uleb128 0xc
 1091 0077 11       		.uleb128 0x11
 1092 0078 01       		.uleb128 0x1
 1093 0079 12       		.uleb128 0x12
 1094 007a 01       		.uleb128 0x1
 1095 007b 40       		.uleb128 0x40
 1096 007c 06       		.uleb128 0x6
 1097 007d 9742     		.uleb128 0x2117
 1098 007f 0C       		.uleb128 0xc
 1099 0080 01       		.uleb128 0x1
 1100 0081 13       		.uleb128 0x13
 1101 0082 00       		.byte	0
 1102 0083 00       		.byte	0
 1103 0084 09       		.uleb128 0x9
 1104 0085 0B       		.uleb128 0xb
 1105 0086 01       		.byte	0x1
 1106 0087 11       		.uleb128 0x11
 1107 0088 01       		.uleb128 0x1
 1108 0089 12       		.uleb128 0x12
 1109 008a 01       		.uleb128 0x1
 1110 008b 00       		.byte	0
 1111 008c 00       		.byte	0
 1112 008d 0A       		.uleb128 0xa
 1113 008e 34       		.uleb128 0x34
 1114 008f 00       		.byte	0
 1115 0090 03       		.uleb128 0x3
 1116 0091 0E       		.uleb128 0xe
 1117 0092 3A       		.uleb128 0x3a
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 30


 1118 0093 0B       		.uleb128 0xb
 1119 0094 3B       		.uleb128 0x3b
 1120 0095 0B       		.uleb128 0xb
 1121 0096 49       		.uleb128 0x49
 1122 0097 13       		.uleb128 0x13
 1123 0098 02       		.uleb128 0x2
 1124 0099 06       		.uleb128 0x6
 1125 009a 00       		.byte	0
 1126 009b 00       		.byte	0
 1127 009c 0B       		.uleb128 0xb
 1128 009d 2E       		.uleb128 0x2e
 1129 009e 01       		.byte	0x1
 1130 009f 3F       		.uleb128 0x3f
 1131 00a0 0C       		.uleb128 0xc
 1132 00a1 03       		.uleb128 0x3
 1133 00a2 0E       		.uleb128 0xe
 1134 00a3 3A       		.uleb128 0x3a
 1135 00a4 0B       		.uleb128 0xb
 1136 00a5 3B       		.uleb128 0x3b
 1137 00a6 0B       		.uleb128 0xb
 1138 00a7 27       		.uleb128 0x27
 1139 00a8 0C       		.uleb128 0xc
 1140 00a9 11       		.uleb128 0x11
 1141 00aa 01       		.uleb128 0x1
 1142 00ab 12       		.uleb128 0x12
 1143 00ac 01       		.uleb128 0x1
 1144 00ad 40       		.uleb128 0x40
 1145 00ae 0A       		.uleb128 0xa
 1146 00af 9742     		.uleb128 0x2117
 1147 00b1 0C       		.uleb128 0xc
 1148 00b2 01       		.uleb128 0x1
 1149 00b3 13       		.uleb128 0x13
 1150 00b4 00       		.byte	0
 1151 00b5 00       		.byte	0
 1152 00b6 0C       		.uleb128 0xc
 1153 00b7 05       		.uleb128 0x5
 1154 00b8 00       		.byte	0
 1155 00b9 03       		.uleb128 0x3
 1156 00ba 0E       		.uleb128 0xe
 1157 00bb 3A       		.uleb128 0x3a
 1158 00bc 0B       		.uleb128 0xb
 1159 00bd 3B       		.uleb128 0x3b
 1160 00be 0B       		.uleb128 0xb
 1161 00bf 49       		.uleb128 0x49
 1162 00c0 13       		.uleb128 0x13
 1163 00c1 02       		.uleb128 0x2
 1164 00c2 06       		.uleb128 0x6
 1165 00c3 00       		.byte	0
 1166 00c4 00       		.byte	0
 1167 00c5 0D       		.uleb128 0xd
 1168 00c6 34       		.uleb128 0x34
 1169 00c7 00       		.byte	0
 1170 00c8 03       		.uleb128 0x3
 1171 00c9 0E       		.uleb128 0xe
 1172 00ca 3A       		.uleb128 0x3a
 1173 00cb 0B       		.uleb128 0xb
 1174 00cc 3B       		.uleb128 0x3b
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 31


 1175 00cd 0B       		.uleb128 0xb
 1176 00ce 49       		.uleb128 0x49
 1177 00cf 13       		.uleb128 0x13
 1178 00d0 02       		.uleb128 0x2
 1179 00d1 0A       		.uleb128 0xa
 1180 00d2 00       		.byte	0
 1181 00d3 00       		.byte	0
 1182 00d4 0E       		.uleb128 0xe
 1183 00d5 1D       		.uleb128 0x1d
 1184 00d6 00       		.byte	0
 1185 00d7 31       		.uleb128 0x31
 1186 00d8 13       		.uleb128 0x13
 1187 00d9 52       		.uleb128 0x52
 1188 00da 01       		.uleb128 0x1
 1189 00db 55       		.uleb128 0x55
 1190 00dc 06       		.uleb128 0x6
 1191 00dd 58       		.uleb128 0x58
 1192 00de 0B       		.uleb128 0xb
 1193 00df 59       		.uleb128 0x59
 1194 00e0 0B       		.uleb128 0xb
 1195 00e1 00       		.byte	0
 1196 00e2 00       		.byte	0
 1197 00e3 0F       		.uleb128 0xf
 1198 00e4 2E       		.uleb128 0x2e
 1199 00e5 00       		.byte	0
 1200 00e6 31       		.uleb128 0x31
 1201 00e7 13       		.uleb128 0x13
 1202 00e8 11       		.uleb128 0x11
 1203 00e9 01       		.uleb128 0x1
 1204 00ea 12       		.uleb128 0x12
 1205 00eb 01       		.uleb128 0x1
 1206 00ec 40       		.uleb128 0x40
 1207 00ed 0A       		.uleb128 0xa
 1208 00ee 9742     		.uleb128 0x2117
 1209 00f0 0C       		.uleb128 0xc
 1210 00f1 00       		.byte	0
 1211 00f2 00       		.byte	0
 1212 00f3 10       		.uleb128 0x10
 1213 00f4 2E       		.uleb128 0x2e
 1214 00f5 01       		.byte	0x1
 1215 00f6 3F       		.uleb128 0x3f
 1216 00f7 0C       		.uleb128 0xc
 1217 00f8 03       		.uleb128 0x3
 1218 00f9 0E       		.uleb128 0xe
 1219 00fa 3A       		.uleb128 0x3a
 1220 00fb 0B       		.uleb128 0xb
 1221 00fc 3B       		.uleb128 0x3b
 1222 00fd 05       		.uleb128 0x5
 1223 00fe 27       		.uleb128 0x27
 1224 00ff 0C       		.uleb128 0xc
 1225 0100 11       		.uleb128 0x11
 1226 0101 01       		.uleb128 0x1
 1227 0102 12       		.uleb128 0x12
 1228 0103 01       		.uleb128 0x1
 1229 0104 40       		.uleb128 0x40
 1230 0105 0A       		.uleb128 0xa
 1231 0106 9742     		.uleb128 0x2117
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 32


 1232 0108 0C       		.uleb128 0xc
 1233 0109 01       		.uleb128 0x1
 1234 010a 13       		.uleb128 0x13
 1235 010b 00       		.byte	0
 1236 010c 00       		.byte	0
 1237 010d 11       		.uleb128 0x11
 1238 010e 05       		.uleb128 0x5
 1239 010f 00       		.byte	0
 1240 0110 03       		.uleb128 0x3
 1241 0111 0E       		.uleb128 0xe
 1242 0112 3A       		.uleb128 0x3a
 1243 0113 0B       		.uleb128 0xb
 1244 0114 3B       		.uleb128 0x3b
 1245 0115 05       		.uleb128 0x5
 1246 0116 49       		.uleb128 0x49
 1247 0117 13       		.uleb128 0x13
 1248 0118 02       		.uleb128 0x2
 1249 0119 06       		.uleb128 0x6
 1250 011a 00       		.byte	0
 1251 011b 00       		.byte	0
 1252 011c 12       		.uleb128 0x12
 1253 011d 2E       		.uleb128 0x2e
 1254 011e 00       		.byte	0
 1255 011f 3F       		.uleb128 0x3f
 1256 0120 0C       		.uleb128 0xc
 1257 0121 03       		.uleb128 0x3
 1258 0122 0E       		.uleb128 0xe
 1259 0123 3A       		.uleb128 0x3a
 1260 0124 0B       		.uleb128 0xb
 1261 0125 3B       		.uleb128 0x3b
 1262 0126 05       		.uleb128 0x5
 1263 0127 27       		.uleb128 0x27
 1264 0128 0C       		.uleb128 0xc
 1265 0129 49       		.uleb128 0x49
 1266 012a 13       		.uleb128 0x13
 1267 012b 11       		.uleb128 0x11
 1268 012c 01       		.uleb128 0x1
 1269 012d 12       		.uleb128 0x12
 1270 012e 01       		.uleb128 0x1
 1271 012f 40       		.uleb128 0x40
 1272 0130 0A       		.uleb128 0xa
 1273 0131 9742     		.uleb128 0x2117
 1274 0133 0C       		.uleb128 0xc
 1275 0134 00       		.byte	0
 1276 0135 00       		.byte	0
 1277 0136 13       		.uleb128 0x13
 1278 0137 34       		.uleb128 0x34
 1279 0138 00       		.byte	0
 1280 0139 03       		.uleb128 0x3
 1281 013a 0E       		.uleb128 0xe
 1282 013b 3A       		.uleb128 0x3a
 1283 013c 0B       		.uleb128 0xb
 1284 013d 3B       		.uleb128 0x3b
 1285 013e 05       		.uleb128 0x5
 1286 013f 49       		.uleb128 0x49
 1287 0140 13       		.uleb128 0x13
 1288 0141 02       		.uleb128 0x2
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 33


 1289 0142 0A       		.uleb128 0xa
 1290 0143 00       		.byte	0
 1291 0144 00       		.byte	0
 1292 0145 14       		.uleb128 0x14
 1293 0146 34       		.uleb128 0x34
 1294 0147 00       		.byte	0
 1295 0148 03       		.uleb128 0x3
 1296 0149 0E       		.uleb128 0xe
 1297 014a 3A       		.uleb128 0x3a
 1298 014b 0B       		.uleb128 0xb
 1299 014c 3B       		.uleb128 0x3b
 1300 014d 05       		.uleb128 0x5
 1301 014e 49       		.uleb128 0x49
 1302 014f 13       		.uleb128 0x13
 1303 0150 00       		.byte	0
 1304 0151 00       		.byte	0
 1305 0152 15       		.uleb128 0x15
 1306 0153 1D       		.uleb128 0x1d
 1307 0154 00       		.byte	0
 1308 0155 31       		.uleb128 0x31
 1309 0156 13       		.uleb128 0x13
 1310 0157 52       		.uleb128 0x52
 1311 0158 01       		.uleb128 0x1
 1312 0159 55       		.uleb128 0x55
 1313 015a 06       		.uleb128 0x6
 1314 015b 58       		.uleb128 0x58
 1315 015c 0B       		.uleb128 0xb
 1316 015d 59       		.uleb128 0x59
 1317 015e 05       		.uleb128 0x5
 1318 015f 00       		.byte	0
 1319 0160 00       		.byte	0
 1320 0161 16       		.uleb128 0x16
 1321 0162 1D       		.uleb128 0x1d
 1322 0163 00       		.byte	0
 1323 0164 31       		.uleb128 0x31
 1324 0165 13       		.uleb128 0x13
 1325 0166 11       		.uleb128 0x11
 1326 0167 01       		.uleb128 0x1
 1327 0168 12       		.uleb128 0x12
 1328 0169 01       		.uleb128 0x1
 1329 016a 58       		.uleb128 0x58
 1330 016b 0B       		.uleb128 0xb
 1331 016c 59       		.uleb128 0x59
 1332 016d 05       		.uleb128 0x5
 1333 016e 00       		.byte	0
 1334 016f 00       		.byte	0
 1335 0170 00       		.byte	0
 1336              		.section	.debug_loc,"",%progbits
 1337              	.Ldebug_loc0:
 1338              	.LLST0:
 1339 0000 00000000 		.4byte	.LFB2
 1340 0004 02000000 		.4byte	.LCFI0
 1341 0008 0200     		.2byte	0x2
 1342 000a 7D       		.byte	0x7d
 1343 000b 00       		.sleb128 0
 1344 000c 02000000 		.4byte	.LCFI0
 1345 0010 68000000 		.4byte	.LFE2
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 34


 1346 0014 0200     		.2byte	0x2
 1347 0016 7D       		.byte	0x7d
 1348 0017 08       		.sleb128 8
 1349 0018 00000000 		.4byte	0
 1350 001c 00000000 		.4byte	0
 1351              	.LLST1:
 1352 0020 2A000000 		.4byte	.LVL0
 1353 0024 30000000 		.4byte	.LVL1
 1354 0028 0100     		.2byte	0x1
 1355 002a 51       		.byte	0x51
 1356 002b 30000000 		.4byte	.LVL1
 1357 002f 52000000 		.4byte	.LVL2
 1358 0033 0100     		.2byte	0x1
 1359 0035 53       		.byte	0x53
 1360 0036 00000000 		.4byte	0
 1361 003a 00000000 		.4byte	0
 1362              	.LLST2:
 1363 003e 00000000 		.4byte	.LVL3
 1364 0042 0A000000 		.4byte	.LVL4
 1365 0046 0100     		.2byte	0x1
 1366 0048 50       		.byte	0x50
 1367 0049 0A000000 		.4byte	.LVL4
 1368 004d 0C000000 		.4byte	.LVL5
 1369 0051 0400     		.2byte	0x4
 1370 0053 F3       		.byte	0xf3
 1371 0054 01       		.uleb128 0x1
 1372 0055 50       		.byte	0x50
 1373 0056 9F       		.byte	0x9f
 1374 0057 0C000000 		.4byte	.LVL5
 1375 005b 10000000 		.4byte	.LVL6
 1376 005f 0100     		.2byte	0x1
 1377 0061 50       		.byte	0x50
 1378 0062 10000000 		.4byte	.LVL6
 1379 0066 18000000 		.4byte	.LFE3
 1380 006a 0400     		.2byte	0x4
 1381 006c F3       		.byte	0xf3
 1382 006d 01       		.uleb128 0x1
 1383 006e 50       		.byte	0x50
 1384 006f 9F       		.byte	0x9f
 1385 0070 00000000 		.4byte	0
 1386 0074 00000000 		.4byte	0
 1387              	.LLST3:
 1388 0078 00000000 		.4byte	.LFB4
 1389 007c 02000000 		.4byte	.LCFI1
 1390 0080 0200     		.2byte	0x2
 1391 0082 7D       		.byte	0x7d
 1392 0083 00       		.sleb128 0
 1393 0084 02000000 		.4byte	.LCFI1
 1394 0088 CC000000 		.4byte	.LFE4
 1395 008c 0200     		.2byte	0x2
 1396 008e 7D       		.byte	0x7d
 1397 008f 14       		.sleb128 20
 1398 0090 00000000 		.4byte	0
 1399 0094 00000000 		.4byte	0
 1400              	.LLST4:
 1401 0098 00000000 		.4byte	.LVL7
 1402 009c 2E000000 		.4byte	.LVL11
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 35


 1403 00a0 0100     		.2byte	0x1
 1404 00a2 50       		.byte	0x50
 1405 00a3 2E000000 		.4byte	.LVL11
 1406 00a7 36000000 		.4byte	.LVL12
 1407 00ab 0200     		.2byte	0x2
 1408 00ad 74       		.byte	0x74
 1409 00ae 00       		.sleb128 0
 1410 00af 36000000 		.4byte	.LVL12
 1411 00b3 9A000000 		.4byte	.LVL14
 1412 00b7 0100     		.2byte	0x1
 1413 00b9 50       		.byte	0x50
 1414 00ba 9A000000 		.4byte	.LVL14
 1415 00be A4000000 		.4byte	.LVL15
 1416 00c2 0200     		.2byte	0x2
 1417 00c4 73       		.byte	0x73
 1418 00c5 00       		.sleb128 0
 1419 00c6 A4000000 		.4byte	.LVL15
 1420 00ca AA000000 		.4byte	.LVL17
 1421 00ce 0100     		.2byte	0x1
 1422 00d0 50       		.byte	0x50
 1423 00d1 AA000000 		.4byte	.LVL17
 1424 00d5 AE000000 		.4byte	.LVL18
 1425 00d9 0200     		.2byte	0x2
 1426 00db 71       		.byte	0x71
 1427 00dc 00       		.sleb128 0
 1428 00dd AE000000 		.4byte	.LVL18
 1429 00e1 CC000000 		.4byte	.LFE4
 1430 00e5 0400     		.2byte	0x4
 1431 00e7 F3       		.byte	0xf3
 1432 00e8 01       		.uleb128 0x1
 1433 00e9 50       		.byte	0x50
 1434 00ea 9F       		.byte	0x9f
 1435 00eb 00000000 		.4byte	0
 1436 00ef 00000000 		.4byte	0
 1437              	.LLST5:
 1438 00f3 00000000 		.4byte	.LVL7
 1439 00f7 24000000 		.4byte	.LVL9
 1440 00fb 0100     		.2byte	0x1
 1441 00fd 51       		.byte	0x51
 1442 00fe 24000000 		.4byte	.LVL9
 1443 0102 2A000000 		.4byte	.LVL10
 1444 0106 0400     		.2byte	0x4
 1445 0108 F3       		.byte	0xf3
 1446 0109 01       		.uleb128 0x1
 1447 010a 51       		.byte	0x51
 1448 010b 9F       		.byte	0x9f
 1449 010c 2A000000 		.4byte	.LVL10
 1450 0110 9A000000 		.4byte	.LVL14
 1451 0114 0100     		.2byte	0x1
 1452 0116 51       		.byte	0x51
 1453 0117 9A000000 		.4byte	.LVL14
 1454 011b A4000000 		.4byte	.LVL15
 1455 011f 0400     		.2byte	0x4
 1456 0121 F3       		.byte	0xf3
 1457 0122 01       		.uleb128 0x1
 1458 0123 51       		.byte	0x51
 1459 0124 9F       		.byte	0x9f
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 36


 1460 0125 A4000000 		.4byte	.LVL15
 1461 0129 A6000000 		.4byte	.LVL16
 1462 012d 0100     		.2byte	0x1
 1463 012f 51       		.byte	0x51
 1464 0130 A6000000 		.4byte	.LVL16
 1465 0134 CC000000 		.4byte	.LFE4
 1466 0138 0400     		.2byte	0x4
 1467 013a F3       		.byte	0xf3
 1468 013b 01       		.uleb128 0x1
 1469 013c 51       		.byte	0x51
 1470 013d 9F       		.byte	0x9f
 1471 013e 00000000 		.4byte	0
 1472 0142 00000000 		.4byte	0
 1473              	.LLST6:
 1474 0146 18000000 		.4byte	.LVL8
 1475 014a 3A000000 		.4byte	.LVL13
 1476 014e 0500     		.2byte	0x5
 1477 0150 75       		.byte	0x75
 1478 0151 00       		.sleb128 0
 1479 0152 31       		.byte	0x31
 1480 0153 1A       		.byte	0x1a
 1481 0154 9F       		.byte	0x9f
 1482 0155 00000000 		.4byte	0
 1483 0159 00000000 		.4byte	0
 1484              	.LLST7:
 1485 015d 00000000 		.4byte	.LVL19
 1486 0161 06000000 		.4byte	.LVL20
 1487 0165 0100     		.2byte	0x1
 1488 0167 50       		.byte	0x50
 1489 0168 06000000 		.4byte	.LVL20
 1490 016c 14000000 		.4byte	.LFE6
 1491 0170 0400     		.2byte	0x4
 1492 0172 F3       		.byte	0xf3
 1493 0173 01       		.uleb128 0x1
 1494 0174 50       		.byte	0x50
 1495 0175 9F       		.byte	0x9f
 1496 0176 00000000 		.4byte	0
 1497 017a 00000000 		.4byte	0
 1498              	.LLST8:
 1499 017e 00000000 		.4byte	.LVL21
 1500 0182 04000000 		.4byte	.LVL22
 1501 0186 0100     		.2byte	0x1
 1502 0188 50       		.byte	0x50
 1503 0189 04000000 		.4byte	.LVL22
 1504 018d 14000000 		.4byte	.LFE7
 1505 0191 0400     		.2byte	0x4
 1506 0193 F3       		.byte	0xf3
 1507 0194 01       		.uleb128 0x1
 1508 0195 50       		.byte	0x50
 1509 0196 9F       		.byte	0x9f
 1510 0197 00000000 		.4byte	0
 1511 019b 00000000 		.4byte	0
 1512              	.LLST9:
 1513 019f 00000000 		.4byte	.LVL23
 1514 01a3 1C000000 		.4byte	.LVL24
 1515 01a7 0100     		.2byte	0x1
 1516 01a9 50       		.byte	0x50
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 37


 1517 01aa 1C000000 		.4byte	.LVL24
 1518 01ae 26000000 		.4byte	.LVL25
 1519 01b2 0400     		.2byte	0x4
 1520 01b4 F3       		.byte	0xf3
 1521 01b5 01       		.uleb128 0x1
 1522 01b6 50       		.byte	0x50
 1523 01b7 9F       		.byte	0x9f
 1524 01b8 26000000 		.4byte	.LVL25
 1525 01bc 32000000 		.4byte	.LVL26
 1526 01c0 0100     		.2byte	0x1
 1527 01c2 50       		.byte	0x50
 1528 01c3 32000000 		.4byte	.LVL26
 1529 01c7 3E000000 		.4byte	.LVL27
 1530 01cb 0400     		.2byte	0x4
 1531 01cd F3       		.byte	0xf3
 1532 01ce 01       		.uleb128 0x1
 1533 01cf 50       		.byte	0x50
 1534 01d0 9F       		.byte	0x9f
 1535 01d1 3E000000 		.4byte	.LVL27
 1536 01d5 46000000 		.4byte	.LVL28
 1537 01d9 0100     		.2byte	0x1
 1538 01db 50       		.byte	0x50
 1539 01dc 46000000 		.4byte	.LVL28
 1540 01e0 50000000 		.4byte	.LFE9
 1541 01e4 0400     		.2byte	0x4
 1542 01e6 F3       		.byte	0xf3
 1543 01e7 01       		.uleb128 0x1
 1544 01e8 50       		.byte	0x50
 1545 01e9 9F       		.byte	0x9f
 1546 01ea 00000000 		.4byte	0
 1547 01ee 00000000 		.4byte	0
 1548              		.section	.debug_aranges,"",%progbits
 1549 0000 6C000000 		.4byte	0x6c
 1550 0004 0200     		.2byte	0x2
 1551 0006 00000000 		.4byte	.Ldebug_info0
 1552 000a 04       		.byte	0x4
 1553 000b 00       		.byte	0
 1554 000c 0000     		.2byte	0
 1555 000e 0000     		.2byte	0
 1556 0010 00000000 		.4byte	.LFB0
 1557 0014 18000000 		.4byte	.LFE0-.LFB0
 1558 0018 00000000 		.4byte	.LFB1
 1559 001c 18000000 		.4byte	.LFE1-.LFB1
 1560 0020 00000000 		.4byte	.LFB2
 1561 0024 68000000 		.4byte	.LFE2-.LFB2
 1562 0028 00000000 		.4byte	.LFB3
 1563 002c 18000000 		.4byte	.LFE3-.LFB3
 1564 0030 00000000 		.4byte	.LFB4
 1565 0034 CC000000 		.4byte	.LFE4-.LFB4
 1566 0038 00000000 		.4byte	.LFB5
 1567 003c 0C000000 		.4byte	.LFE5-.LFB5
 1568 0040 00000000 		.4byte	.LFB6
 1569 0044 14000000 		.4byte	.LFE6-.LFB6
 1570 0048 00000000 		.4byte	.LFB7
 1571 004c 14000000 		.4byte	.LFE7-.LFB7
 1572 0050 00000000 		.4byte	.LFB8
 1573 0054 10000000 		.4byte	.LFE8-.LFB8
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 38


 1574 0058 00000000 		.4byte	.LFB9
 1575 005c 50000000 		.4byte	.LFE9-.LFB9
 1576 0060 00000000 		.4byte	.LFB10
 1577 0064 10000000 		.4byte	.LFE10-.LFB10
 1578 0068 00000000 		.4byte	0
 1579 006c 00000000 		.4byte	0
 1580              		.section	.debug_ranges,"",%progbits
 1581              	.Ldebug_ranges0:
 1582 0000 02000000 		.4byte	.LBB11
 1583 0004 04000000 		.4byte	.LBE11
 1584 0008 06000000 		.4byte	.LBB19
 1585 000c 08000000 		.4byte	.LBE19
 1586 0010 0A000000 		.4byte	.LBB21
 1587 0014 0E000000 		.4byte	.LBE21
 1588 0018 00000000 		.4byte	0
 1589 001c 00000000 		.4byte	0
 1590 0020 04000000 		.4byte	.LBB15
 1591 0024 06000000 		.4byte	.LBE15
 1592 0028 08000000 		.4byte	.LBB20
 1593 002c 0A000000 		.4byte	.LBE20
 1594 0030 0E000000 		.4byte	.LBB22
 1595 0034 10000000 		.4byte	.LBE22
 1596 0038 00000000 		.4byte	0
 1597 003c 00000000 		.4byte	0
 1598 0040 00000000 		.4byte	.LBB23
 1599 0044 04000000 		.4byte	.LBE23
 1600 0048 08000000 		.4byte	.LBB28
 1601 004c 0A000000 		.4byte	.LBE28
 1602 0050 00000000 		.4byte	0
 1603 0054 00000000 		.4byte	0
 1604 0058 00000000 		.4byte	.LFB0
 1605 005c 18000000 		.4byte	.LFE0
 1606 0060 00000000 		.4byte	.LFB1
 1607 0064 18000000 		.4byte	.LFE1
 1608 0068 00000000 		.4byte	.LFB2
 1609 006c 68000000 		.4byte	.LFE2
 1610 0070 00000000 		.4byte	.LFB3
 1611 0074 18000000 		.4byte	.LFE3
 1612 0078 00000000 		.4byte	.LFB4
 1613 007c CC000000 		.4byte	.LFE4
 1614 0080 00000000 		.4byte	.LFB5
 1615 0084 0C000000 		.4byte	.LFE5
 1616 0088 00000000 		.4byte	.LFB6
 1617 008c 14000000 		.4byte	.LFE6
 1618 0090 00000000 		.4byte	.LFB7
 1619 0094 14000000 		.4byte	.LFE7
 1620 0098 00000000 		.4byte	.LFB8
 1621 009c 10000000 		.4byte	.LFE8
 1622 00a0 00000000 		.4byte	.LFB9
 1623 00a4 50000000 		.4byte	.LFE9
 1624 00a8 00000000 		.4byte	.LFB10
 1625 00ac 10000000 		.4byte	.LFE10
 1626 00b0 00000000 		.4byte	0
 1627 00b4 00000000 		.4byte	0
 1628              		.section	.debug_line,"",%progbits
 1629              	.Ldebug_line0:
 1630 0000 B1010000 		.section	.debug_str,"MS",%progbits,1
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 39


 1630      02004C00 
 1630      00000201 
 1630      FB0E0D00 
 1630      01010101 
 1631              	.LASF15:
 1632 0000 72656731 		.ascii	"reg16\000"
 1632      3600
 1633              	.LASF23:
 1634 0006 73746174 		.ascii	"state\000"
 1634      6500
 1635              	.LASF26:
 1636 000c 6F6C6444 		.ascii	"oldDivider\000"
 1636      69766964 
 1636      657200
 1637              	.LASF37:
 1638 0017 433A5C55 		.ascii	"C:\\Users\\chuck.erhardt\\Documents\\GitHub\\PSoC-W"
 1638      73657273 
 1638      5C636875 
 1638      636B2E65 
 1638      72686172 
 1639 0045 35313030 		.ascii	"5100-Driver\\freeSoCExplorer+ArduinoSheld_Example.c"
 1639      2D447269 
 1639      7665725C 
 1639      66726565 
 1639      536F4345 
 1640 0077 7964736E 		.ascii	"ydsn\000"
 1640      00
 1641              	.LASF22:
 1642 007c 53504930 		.ascii	"SPI0_IntClock_SetDividerRegister\000"
 1642      5F496E74 
 1642      436C6F63 
 1642      6B5F5365 
 1642      74446976 
 1643              	.LASF38:
 1644 009d 53504930 		.ascii	"SPI0_IntClock_GetModeRegister\000"
 1644      5F496E74 
 1644      436C6F63 
 1644      6B5F4765 
 1644      744D6F64 
 1645              	.LASF29:
 1646 00bb 53504930 		.ascii	"SPI0_IntClock_SetModeRegister\000"
 1646      5F496E74 
 1646      436C6F63 
 1646      6B5F5365 
 1646      744D6F64 
 1647              	.LASF11:
 1648 00d9 666C6F61 		.ascii	"float\000"
 1648      7400
 1649              	.LASF20:
 1650 00df 53504930 		.ascii	"SPI0_IntClock_StopBlock\000"
 1650      5F496E74 
 1650      436C6F63 
 1650      6B5F5374 
 1650      6F70426C 
 1651              	.LASF1:
 1652 00f7 756E7369 		.ascii	"unsigned char\000"
 1652      676E6564 
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 40


 1652      20636861 
 1652      7200
 1653              	.LASF18:
 1654 0105 53504930 		.ascii	"SPI0_IntClock_Start\000"
 1654      5F496E74 
 1654      436C6F63 
 1654      6B5F5374 
 1654      61727400 
 1655              	.LASF14:
 1656 0119 72656738 		.ascii	"reg8\000"
 1656      00
 1657              	.LASF5:
 1658 011e 6C6F6E67 		.ascii	"long unsigned int\000"
 1658      20756E73 
 1658      69676E65 
 1658      6420696E 
 1658      7400
 1659              	.LASF3:
 1660 0130 73686F72 		.ascii	"short unsigned int\000"
 1660      7420756E 
 1660      7369676E 
 1660      65642069 
 1660      6E7400
 1661              	.LASF31:
 1662 0143 53504930 		.ascii	"SPI0_IntClock_ClearModeRegister\000"
 1662      5F496E74 
 1662      436C6F63 
 1662      6B5F436C 
 1662      6561724D 
 1663              	.LASF24:
 1664 0163 636C6B44 		.ascii	"clkDivider\000"
 1664      69766964 
 1664      657200
 1665              	.LASF12:
 1666 016e 646F7562 		.ascii	"double\000"
 1666      6C6500
 1667              	.LASF25:
 1668 0175 72657374 		.ascii	"restart\000"
 1668      61727400 
 1669              	.LASF2:
 1670 017d 73686F72 		.ascii	"short int\000"
 1670      7420696E 
 1670      7400
 1671              	.LASF10:
 1672 0187 75696E74 		.ascii	"uint16\000"
 1672      313600
 1673              	.LASF8:
 1674 018e 756E7369 		.ascii	"unsigned int\000"
 1674      676E6564 
 1674      20696E74 
 1674      00
 1675              	.LASF28:
 1676 019b 63757272 		.ascii	"currSrc\000"
 1676      53726300 
 1677              	.LASF7:
 1678 01a3 6C6F6E67 		.ascii	"long long unsigned int\000"
 1678      206C6F6E 
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 41


 1678      6720756E 
 1678      7369676E 
 1678      65642069 
 1679              	.LASF30:
 1680 01ba 6D6F6465 		.ascii	"modeBitMask\000"
 1680      4269744D 
 1680      61736B00 
 1681              	.LASF6:
 1682 01c6 6C6F6E67 		.ascii	"long long int\000"
 1682      206C6F6E 
 1682      6720696E 
 1682      7400
 1683              	.LASF19:
 1684 01d4 53504930 		.ascii	"SPI0_IntClock_Stop\000"
 1684      5F496E74 
 1684      436C6F63 
 1684      6B5F5374 
 1684      6F7000
 1685              	.LASF13:
 1686 01e7 63686172 		.ascii	"char\000"
 1686      00
 1687              	.LASF34:
 1688 01ec 63757272 		.ascii	"currDiv\000"
 1688      44697600 
 1689              	.LASF36:
 1690 01f4 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\SPI0_IntClock.c\000"
 1690      6E657261 
 1690      7465645F 
 1690      536F7572 
 1690      63655C50 
 1691              	.LASF9:
 1692 021d 75696E74 		.ascii	"uint8\000"
 1692      3800
 1693              	.LASF35:
 1694 0223 474E5520 		.ascii	"GNU C 4.7.3 20130312 (release) [ARM/embedded-4_7-br"
 1694      4320342E 
 1694      372E3320 
 1694      32303133 
 1694      30333132 
 1695 0256 616E6368 		.ascii	"anch revision 196615]\000"
 1695      20726576 
 1695      6973696F 
 1695      6E203139 
 1695      36363135 
 1696              	.LASF16:
 1697 026c 53504930 		.ascii	"SPI0_IntClock_GetDividerRegister\000"
 1697      5F496E74 
 1697      436C6F63 
 1697      6B5F4765 
 1697      74446976 
 1698              	.LASF17:
 1699 028d 53504930 		.ascii	"SPI0_IntClock_GetSourceRegister\000"
 1699      5F496E74 
 1699      436C6F63 
 1699      6B5F4765 
 1699      74536F75 
 1700              	.LASF27:
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccXlzqje.s 			page 42


 1701 02ad 656E6162 		.ascii	"enabled\000"
 1701      6C656400 
 1702              	.LASF4:
 1703 02b5 6C6F6E67 		.ascii	"long int\000"
 1703      20696E74 
 1703      00
 1704              	.LASF33:
 1705 02be 636C6B53 		.ascii	"clkSource\000"
 1705      6F757263 
 1705      6500
 1706              	.LASF0:
 1707 02c8 7369676E 		.ascii	"signed char\000"
 1707      65642063 
 1707      68617200 
 1708              	.LASF21:
 1709 02d4 53504930 		.ascii	"SPI0_IntClock_StandbyPower\000"
 1709      5F496E74 
 1709      436C6F63 
 1709      6B5F5374 
 1709      616E6462 
 1710              	.LASF32:
 1711 02ef 53504930 		.ascii	"SPI0_IntClock_SetSourceRegister\000"
 1711      5F496E74 
 1711      436C6F63 
 1711      6B5F5365 
 1711      74536F75 
 1712              	.LASF39:
 1713 030f 6F6C6453 		.ascii	"oldSrc\000"
 1713      726300
 1714              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.3 20130312 (release) [ARM/embedded-4_7-br
