ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"SPI_IntClock.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.SPI_IntClock_Start,"ax",%progbits
  19              		.align	2
  20              		.global	SPI_IntClock_Start
  21              		.thumb
  22              		.thumb_func
  23              		.type	SPI_IntClock_Start, %function
  24              	SPI_IntClock_Start:
  25              	.LFB0:
  26              		.file 1 ".\\Generated_Source\\PSoC5\\SPI_IntClock.c"
   1:.\Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/SPI_IntClock.c **** * File Name: SPI_IntClock.c
   3:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Version 2.20
   4:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
   5:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  Description:
   6:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   This file provides the source code to the API for the clock component.
   7:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
   8:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  Note:
   9:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
  10:.\Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
  11:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  12:.\Generated_Source\PSoC5/SPI_IntClock.c **** * You may use this file only in accordance with the license, terms, conditions, 
  13:.\Generated_Source\PSoC5/SPI_IntClock.c **** * disclaimers, and limitations in the end user license agreement accompanying 
  14:.\Generated_Source\PSoC5/SPI_IntClock.c **** * the software package with which this file was provided.
  15:.\Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
  16:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
  17:.\Generated_Source\PSoC5/SPI_IntClock.c **** #include <cydevice_trm.h>
  18:.\Generated_Source\PSoC5/SPI_IntClock.c **** #include "SPI_IntClock.h"
  19:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
  20:.\Generated_Source\PSoC5/SPI_IntClock.c **** /* Clock Distribution registers. */
  21:.\Generated_Source\PSoC5/SPI_IntClock.c **** #define CLK_DIST_LD              (* (reg8 *) CYREG_CLKDIST_LD)
  22:.\Generated_Source\PSoC5/SPI_IntClock.c **** #define CLK_DIST_BCFG2           (* (reg8 *) CYREG_CLKDIST_BCFG2)
  23:.\Generated_Source\PSoC5/SPI_IntClock.c **** #define BCFG2_MASK               (0x80u)
  24:.\Generated_Source\PSoC5/SPI_IntClock.c **** #define CLK_DIST_DMASK           (* (reg8 *) CYREG_CLKDIST_DMASK)
  25:.\Generated_Source\PSoC5/SPI_IntClock.c **** #define CLK_DIST_AMASK           (* (reg8 *) CYREG_CLKDIST_AMASK)
  26:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
  27:.\Generated_Source\PSoC5/SPI_IntClock.c **** #define HAS_CLKDIST_LD_DISABLE   (CY_PSOC3 || CY_PSOC5LP)
  28:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
  29:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
  30:.\Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
  31:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_Start
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 2


  32:.\Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
  33:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
  34:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
  35:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  Starts the clock. Note that on startup, clocks may be already running if the
  36:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  "Start on Reset" option is enabled in the DWR.
  37:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
  38:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
  39:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  None
  40:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
  41:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
  42:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  None
  43:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
  44:.\Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
  45:.\Generated_Source\PSoC5/SPI_IntClock.c **** void SPI_IntClock_Start(void) 
  46:.\Generated_Source\PSoC5/SPI_IntClock.c **** {
  27              		.loc 1 46 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
  47:.\Generated_Source\PSoC5/SPI_IntClock.c ****     /* Set the bit to enable the clock. */
  48:.\Generated_Source\PSoC5/SPI_IntClock.c ****     SPI_IntClock_CLKEN |= SPI_IntClock_CLKEN_MASK;
  39              		.loc 1 48 0
  40 0004 44F2A233 		movw	r3, #17314
  41 0008 C4F20003 		movt	r3, 16384
  42 000c 44F2A232 		movw	r2, #17314
  43 0010 C4F20002 		movt	r2, 16384
  44 0014 1278     		ldrb	r2, [r2, #0]
  45 0016 D2B2     		uxtb	r2, r2
  46 0018 42F00102 		orr	r2, r2, #1
  47 001c D2B2     		uxtb	r2, r2
  48 001e 1A70     		strb	r2, [r3, #0]
  49:.\Generated_Source\PSoC5/SPI_IntClock.c **** 	SPI_IntClock_CLKSTBY |= SPI_IntClock_CLKSTBY_MASK;
  49              		.loc 1 49 0
  50 0020 44F2B233 		movw	r3, #17330
  51 0024 C4F20003 		movt	r3, 16384
  52 0028 44F2B232 		movw	r2, #17330
  53 002c C4F20002 		movt	r2, 16384
  54 0030 1278     		ldrb	r2, [r2, #0]
  55 0032 D2B2     		uxtb	r2, r2
  56 0034 42F00102 		orr	r2, r2, #1
  57 0038 D2B2     		uxtb	r2, r2
  58 003a 1A70     		strb	r2, [r3, #0]
  50:.\Generated_Source\PSoC5/SPI_IntClock.c **** }
  59              		.loc 1 50 0
  60 003c BD46     		mov	sp, r7
  61 003e 80BC     		pop	{r7}
  62 0040 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE0:
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 3


  65              		.size	SPI_IntClock_Start, .-SPI_IntClock_Start
  66 0042 00BF     		.section	.text.SPI_IntClock_Stop,"ax",%progbits
  67              		.align	2
  68              		.global	SPI_IntClock_Stop
  69              		.thumb
  70              		.thumb_func
  71              		.type	SPI_IntClock_Stop, %function
  72              	SPI_IntClock_Stop:
  73              	.LFB1:
  51:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
  52:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
  53:.\Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
  54:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_Stop
  55:.\Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
  56:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
  57:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
  58:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  Stops the clock and returns immediately. This API does not require the
  59:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  source clock to be running but may return before the hardware is actually
  60:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  disabled. If the settings of the clock are changed after calling this
  61:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  function, the clock may glitch when it is started. To avoid the clock
  62:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  glitch, use the StopBlock function.
  63:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
  64:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
  65:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  None
  66:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
  67:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
  68:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  None
  69:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
  70:.\Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
  71:.\Generated_Source\PSoC5/SPI_IntClock.c **** void SPI_IntClock_Stop(void) 
  72:.\Generated_Source\PSoC5/SPI_IntClock.c **** {
  74              		.loc 1 72 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79 0000 80B4     		push	{r7}
  80              	.LCFI2:
  81              		.cfi_def_cfa_offset 4
  82              		.cfi_offset 7, -4
  83 0002 00AF     		add	r7, sp, #0
  84              	.LCFI3:
  85              		.cfi_def_cfa_register 7
  73:.\Generated_Source\PSoC5/SPI_IntClock.c ****     /* Clear the bit to disable the clock. */
  74:.\Generated_Source\PSoC5/SPI_IntClock.c ****     SPI_IntClock_CLKEN &= (uint8)(~SPI_IntClock_CLKEN_MASK);
  86              		.loc 1 74 0
  87 0004 44F2A233 		movw	r3, #17314
  88 0008 C4F20003 		movt	r3, 16384
  89 000c 44F2A232 		movw	r2, #17314
  90 0010 C4F20002 		movt	r2, 16384
  91 0014 1278     		ldrb	r2, [r2, #0]
  92 0016 D2B2     		uxtb	r2, r2
  93 0018 22F00102 		bic	r2, r2, #1
  94 001c D2B2     		uxtb	r2, r2
  95 001e 1A70     		strb	r2, [r3, #0]
  75:.\Generated_Source\PSoC5/SPI_IntClock.c **** 	SPI_IntClock_CLKSTBY &= (uint8)(~SPI_IntClock_CLKSTBY_MASK);
  96              		.loc 1 75 0
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 4


  97 0020 44F2B233 		movw	r3, #17330
  98 0024 C4F20003 		movt	r3, 16384
  99 0028 44F2B232 		movw	r2, #17330
 100 002c C4F20002 		movt	r2, 16384
 101 0030 1278     		ldrb	r2, [r2, #0]
 102 0032 D2B2     		uxtb	r2, r2
 103 0034 22F00102 		bic	r2, r2, #1
 104 0038 D2B2     		uxtb	r2, r2
 105 003a 1A70     		strb	r2, [r3, #0]
  76:.\Generated_Source\PSoC5/SPI_IntClock.c **** }
 106              		.loc 1 76 0
 107 003c BD46     		mov	sp, r7
 108 003e 80BC     		pop	{r7}
 109 0040 7047     		bx	lr
 110              		.cfi_endproc
 111              	.LFE1:
 112              		.size	SPI_IntClock_Stop, .-SPI_IntClock_Stop
 113 0042 00BF     		.section	.text.SPI_IntClock_StopBlock,"ax",%progbits
 114              		.align	2
 115              		.global	SPI_IntClock_StopBlock
 116              		.thumb
 117              		.thumb_func
 118              		.type	SPI_IntClock_StopBlock, %function
 119              	SPI_IntClock_StopBlock:
 120              	.LFB2:
  77:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
  78:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
  79:.\Generated_Source\PSoC5/SPI_IntClock.c **** #if(CY_PSOC3 || CY_PSOC5LP)
  80:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
  81:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
  82:.\Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
  83:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_StopBlock
  84:.\Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
  85:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
  86:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
  87:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  Stops the clock and waits for the hardware to actually be disabled before
  88:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  returning. This ensures that the clock is never truncated (high part of the
  89:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  cycle will terminate before the clock is disabled and the API returns).
  90:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  Note that the source clock must be running or this API will never return as
  91:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  a stopped clock cannot be disabled.
  92:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
  93:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
  94:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  None
  95:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
  96:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
  97:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  None
  98:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
  99:.\Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 100:.\Generated_Source\PSoC5/SPI_IntClock.c **** void SPI_IntClock_StopBlock(void) 
 101:.\Generated_Source\PSoC5/SPI_IntClock.c **** {
 121              		.loc 1 101 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 8
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126 0000 80B4     		push	{r7}
 127              	.LCFI4:
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 5


 128              		.cfi_def_cfa_offset 4
 129              		.cfi_offset 7, -4
 130 0002 83B0     		sub	sp, sp, #12
 131              	.LCFI5:
 132              		.cfi_def_cfa_offset 16
 133 0004 00AF     		add	r7, sp, #0
 134              	.LCFI6:
 135              		.cfi_def_cfa_register 7
 102:.\Generated_Source\PSoC5/SPI_IntClock.c ****     if ((SPI_IntClock_CLKEN & SPI_IntClock_CLKEN_MASK) != 0u)
 136              		.loc 1 102 0
 137 0006 44F2A233 		movw	r3, #17314
 138 000a C4F20003 		movt	r3, 16384
 139 000e 1B78     		ldrb	r3, [r3, #0]
 140 0010 DBB2     		uxtb	r3, r3
 141 0012 03F00103 		and	r3, r3, #1
 142 0016 002B     		cmp	r3, #0
 143 0018 69D0     		beq	.L3
 144              	.LBB2:
 103:.\Generated_Source\PSoC5/SPI_IntClock.c ****     {
 104:.\Generated_Source\PSoC5/SPI_IntClock.c **** #if HAS_CLKDIST_LD_DISABLE
 105:.\Generated_Source\PSoC5/SPI_IntClock.c ****         uint16 oldDivider;
 106:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 107:.\Generated_Source\PSoC5/SPI_IntClock.c ****         CLK_DIST_LD = 0u;
 145              		.loc 1 107 0
 146 001a 44F20103 		movw	r3, #16385
 147 001e C4F20003 		movt	r3, 16384
 148 0022 4FF00002 		mov	r2, #0
 149 0026 1A70     		strb	r2, [r3, #0]
 108:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 109:.\Generated_Source\PSoC5/SPI_IntClock.c ****         /* Clear all the mask bits except ours. */
 110:.\Generated_Source\PSoC5/SPI_IntClock.c **** #if defined(SPI_IntClock__CFG3)
 111:.\Generated_Source\PSoC5/SPI_IntClock.c ****         CLK_DIST_AMASK = SPI_IntClock_CLKEN_MASK;
 112:.\Generated_Source\PSoC5/SPI_IntClock.c ****         CLK_DIST_DMASK = 0x00u;
 113:.\Generated_Source\PSoC5/SPI_IntClock.c **** #else
 114:.\Generated_Source\PSoC5/SPI_IntClock.c ****         CLK_DIST_DMASK = SPI_IntClock_CLKEN_MASK;
 150              		.loc 1 114 0
 151 0028 44F21003 		movw	r3, #16400
 152 002c C4F20003 		movt	r3, 16384
 153 0030 4FF00102 		mov	r2, #1
 154 0034 1A70     		strb	r2, [r3, #0]
 115:.\Generated_Source\PSoC5/SPI_IntClock.c ****         CLK_DIST_AMASK = 0x00u;
 155              		.loc 1 115 0
 156 0036 44F21403 		movw	r3, #16404
 157 003a C4F20003 		movt	r3, 16384
 158 003e 4FF00002 		mov	r2, #0
 159 0042 1A70     		strb	r2, [r3, #0]
 116:.\Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* SPI_IntClock__CFG3 */
 117:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 118:.\Generated_Source\PSoC5/SPI_IntClock.c ****         /* Clear mask of bus clock. */
 119:.\Generated_Source\PSoC5/SPI_IntClock.c ****         CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 160              		.loc 1 119 0
 161 0044 44F20803 		movw	r3, #16392
 162 0048 C4F20003 		movt	r3, 16384
 163 004c 44F20802 		movw	r2, #16392
 164 0050 C4F20002 		movt	r2, 16384
 165 0054 1278     		ldrb	r2, [r2, #0]
 166 0056 D2B2     		uxtb	r2, r2
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 6


 167 0058 02F07F02 		and	r2, r2, #127
 168 005c D2B2     		uxtb	r2, r2
 169 005e 1A70     		strb	r2, [r3, #0]
 120:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 121:.\Generated_Source\PSoC5/SPI_IntClock.c ****         oldDivider = CY_GET_REG16(SPI_IntClock_DIV_PTR);
 170              		.loc 1 121 0
 171 0060 4FF48143 		mov	r3, #16512
 172 0064 C4F20003 		movt	r3, 16384
 173 0068 1B88     		ldrh	r3, [r3, #0]	@ movhi
 174 006a FB80     		strh	r3, [r7, #6]	@ movhi
 122:.\Generated_Source\PSoC5/SPI_IntClock.c ****         CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 175              		.loc 1 122 0
 176 006c 44F20203 		movw	r3, #16386
 177 0070 C4F20003 		movt	r3, 16384
 178 0074 FA88     		ldrh	r2, [r7, #6]	@ movhi
 179 0076 1A80     		strh	r2, [r3, #0]	@ movhi
 123:.\Generated_Source\PSoC5/SPI_IntClock.c ****         CLK_DIST_LD = CYCLK_LD_DISABLE | CYCLK_LD_SYNC_EN | CYCLK_LD_LOAD;
 180              		.loc 1 123 0
 181 0078 44F20103 		movw	r3, #16385
 182 007c C4F20003 		movt	r3, 16384
 183 0080 4FF00702 		mov	r2, #7
 184 0084 1A70     		strb	r2, [r3, #0]
 124:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 125:.\Generated_Source\PSoC5/SPI_IntClock.c ****         /* Wait for clock to be disabled */
 126:.\Generated_Source\PSoC5/SPI_IntClock.c ****         while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 185              		.loc 1 126 0
 186 0086 00BF     		nop
 187              	.L5:
 188              		.loc 1 126 0 is_stmt 0 discriminator 1
 189 0088 44F20103 		movw	r3, #16385
 190 008c C4F20003 		movt	r3, 16384
 191 0090 1B78     		ldrb	r3, [r3, #0]
 192 0092 DBB2     		uxtb	r3, r3
 193 0094 03F00103 		and	r3, r3, #1
 194 0098 002B     		cmp	r3, #0
 195 009a F5D1     		bne	.L5
 127:.\Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 128:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 129:.\Generated_Source\PSoC5/SPI_IntClock.c ****         /* Clear the bit to disable the clock. */
 130:.\Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_CLKEN &= (uint8)(~SPI_IntClock_CLKEN_MASK);
 196              		.loc 1 130 0 is_stmt 1
 197 009c 44F2A233 		movw	r3, #17314
 198 00a0 C4F20003 		movt	r3, 16384
 199 00a4 44F2A232 		movw	r2, #17314
 200 00a8 C4F20002 		movt	r2, 16384
 201 00ac 1278     		ldrb	r2, [r2, #0]
 202 00ae D2B2     		uxtb	r2, r2
 203 00b0 22F00102 		bic	r2, r2, #1
 204 00b4 D2B2     		uxtb	r2, r2
 205 00b6 1A70     		strb	r2, [r3, #0]
 131:.\Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_CLKSTBY &= (uint8)(~SPI_IntClock_CLKSTBY_MASK);
 206              		.loc 1 131 0
 207 00b8 44F2B233 		movw	r3, #17330
 208 00bc C4F20003 		movt	r3, 16384
 209 00c0 44F2B232 		movw	r2, #17330
 210 00c4 C4F20002 		movt	r2, 16384
 211 00c8 1278     		ldrb	r2, [r2, #0]
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 7


 212 00ca D2B2     		uxtb	r2, r2
 213 00cc 22F00102 		bic	r2, r2, #1
 214 00d0 D2B2     		uxtb	r2, r2
 215 00d2 1A70     		strb	r2, [r3, #0]
 132:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 133:.\Generated_Source\PSoC5/SPI_IntClock.c **** #if HAS_CLKDIST_LD_DISABLE
 134:.\Generated_Source\PSoC5/SPI_IntClock.c ****         /* Clear the disable bit */
 135:.\Generated_Source\PSoC5/SPI_IntClock.c ****         CLK_DIST_LD = 0x00u;
 216              		.loc 1 135 0
 217 00d4 44F20103 		movw	r3, #16385
 218 00d8 C4F20003 		movt	r3, 16384
 219 00dc 4FF00002 		mov	r2, #0
 220 00e0 1A70     		strb	r2, [r3, #0]
 136:.\Generated_Source\PSoC5/SPI_IntClock.c ****         CY_SET_REG16(SPI_IntClock_DIV_PTR, oldDivider);
 221              		.loc 1 136 0
 222 00e2 4FF48143 		mov	r3, #16512
 223 00e6 C4F20003 		movt	r3, 16384
 224 00ea FA88     		ldrh	r2, [r7, #6]	@ movhi
 225 00ec 1A80     		strh	r2, [r3, #0]	@ movhi
 226              	.L3:
 227              	.LBE2:
 137:.\Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 138:.\Generated_Source\PSoC5/SPI_IntClock.c ****     }
 139:.\Generated_Source\PSoC5/SPI_IntClock.c **** }
 228              		.loc 1 139 0
 229 00ee 07F10C07 		add	r7, r7, #12
 230 00f2 BD46     		mov	sp, r7
 231 00f4 80BC     		pop	{r7}
 232 00f6 7047     		bx	lr
 233              		.cfi_endproc
 234              	.LFE2:
 235              		.size	SPI_IntClock_StopBlock, .-SPI_IntClock_StopBlock
 236              		.section	.text.SPI_IntClock_StandbyPower,"ax",%progbits
 237              		.align	2
 238              		.global	SPI_IntClock_StandbyPower
 239              		.thumb
 240              		.thumb_func
 241              		.type	SPI_IntClock_StandbyPower, %function
 242              	SPI_IntClock_StandbyPower:
 243              	.LFB3:
 140:.\Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* (CY_PSOC3 || CY_PSOC5LP) */
 141:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 142:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 143:.\Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
 144:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_StandbyPower
 145:.\Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
 146:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 147:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
 148:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  Sets whether the clock is active in standby mode.
 149:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 150:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
 151:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  state:  0 to disable clock during standby, nonzero to enable.
 152:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 153:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
 154:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  None
 155:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 156:.\Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 8


 157:.\Generated_Source\PSoC5/SPI_IntClock.c **** void SPI_IntClock_StandbyPower(uint8 state) 
 158:.\Generated_Source\PSoC5/SPI_IntClock.c **** {
 244              		.loc 1 158 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 8
 247              		@ frame_needed = 1, uses_anonymous_args = 0
 248              		@ link register save eliminated.
 249 0000 80B4     		push	{r7}
 250              	.LCFI7:
 251              		.cfi_def_cfa_offset 4
 252              		.cfi_offset 7, -4
 253 0002 83B0     		sub	sp, sp, #12
 254              	.LCFI8:
 255              		.cfi_def_cfa_offset 16
 256 0004 00AF     		add	r7, sp, #0
 257              	.LCFI9:
 258              		.cfi_def_cfa_register 7
 259 0006 0346     		mov	r3, r0
 260 0008 FB71     		strb	r3, [r7, #7]
 159:.\Generated_Source\PSoC5/SPI_IntClock.c ****     if(state == 0u)
 261              		.loc 1 159 0
 262 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 263 000c 002B     		cmp	r3, #0
 264 000e 0ED1     		bne	.L7
 160:.\Generated_Source\PSoC5/SPI_IntClock.c ****     {
 161:.\Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_CLKSTBY &= (uint8)(~SPI_IntClock_CLKSTBY_MASK);
 265              		.loc 1 161 0
 266 0010 44F2B233 		movw	r3, #17330
 267 0014 C4F20003 		movt	r3, 16384
 268 0018 44F2B232 		movw	r2, #17330
 269 001c C4F20002 		movt	r2, 16384
 270 0020 1278     		ldrb	r2, [r2, #0]
 271 0022 D2B2     		uxtb	r2, r2
 272 0024 22F00102 		bic	r2, r2, #1
 273 0028 D2B2     		uxtb	r2, r2
 274 002a 1A70     		strb	r2, [r3, #0]
 275 002c 0DE0     		b	.L6
 276              	.L7:
 162:.\Generated_Source\PSoC5/SPI_IntClock.c ****     }
 163:.\Generated_Source\PSoC5/SPI_IntClock.c ****     else
 164:.\Generated_Source\PSoC5/SPI_IntClock.c ****     {
 165:.\Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_CLKSTBY |= SPI_IntClock_CLKSTBY_MASK;
 277              		.loc 1 165 0
 278 002e 44F2B233 		movw	r3, #17330
 279 0032 C4F20003 		movt	r3, 16384
 280 0036 44F2B232 		movw	r2, #17330
 281 003a C4F20002 		movt	r2, 16384
 282 003e 1278     		ldrb	r2, [r2, #0]
 283 0040 D2B2     		uxtb	r2, r2
 284 0042 42F00102 		orr	r2, r2, #1
 285 0046 D2B2     		uxtb	r2, r2
 286 0048 1A70     		strb	r2, [r3, #0]
 287              	.L6:
 166:.\Generated_Source\PSoC5/SPI_IntClock.c ****     }
 167:.\Generated_Source\PSoC5/SPI_IntClock.c **** }
 288              		.loc 1 167 0
 289 004a 07F10C07 		add	r7, r7, #12
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 9


 290 004e BD46     		mov	sp, r7
 291 0050 80BC     		pop	{r7}
 292 0052 7047     		bx	lr
 293              		.cfi_endproc
 294              	.LFE3:
 295              		.size	SPI_IntClock_StandbyPower, .-SPI_IntClock_StandbyPower
 296              		.section	.text.SPI_IntClock_SetDividerRegister,"ax",%progbits
 297              		.align	2
 298              		.global	SPI_IntClock_SetDividerRegister
 299              		.thumb
 300              		.thumb_func
 301              		.type	SPI_IntClock_SetDividerRegister, %function
 302              	SPI_IntClock_SetDividerRegister:
 303              	.LFB4:
 168:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 169:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 170:.\Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
 171:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_SetDividerRegister
 172:.\Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
 173:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 174:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
 175:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  Modifies the clock divider and, thus, the frequency. When the clock divider
 176:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  register is set to zero or changed from zero, the clock will be temporarily
 177:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  disabled in order to change the SSS mode bit. If the clock is enabled when
 178:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  SetDividerRegister is called, then the source clock must be running.
 179:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 180:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
 181:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  clkDivider:  Divider register value (0-65,535). This value is NOT the
 182:.\Generated_Source\PSoC5/SPI_IntClock.c **** *    divider; the clock hardware divides by clkDivider plus one. For example,
 183:.\Generated_Source\PSoC5/SPI_IntClock.c **** *    to divide the clock by 2, this parameter should be set to 1.
 184:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  restart:  If nonzero, restarts the clock divider: the current clock cycle
 185:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   will be truncated and the new divide value will take effect immediately. If
 186:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   zero, the new divide value will take effect at the end of the current clock
 187:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   cycle.
 188:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 189:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
 190:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  None
 191:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 192:.\Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 193:.\Generated_Source\PSoC5/SPI_IntClock.c **** void SPI_IntClock_SetDividerRegister(uint16 clkDivider, uint8 restart)
 194:.\Generated_Source\PSoC5/SPI_IntClock.c ****                                 
 195:.\Generated_Source\PSoC5/SPI_IntClock.c **** {
 304              		.loc 1 195 0
 305              		.cfi_startproc
 306              		@ args = 0, pretend = 0, frame = 16
 307              		@ frame_needed = 1, uses_anonymous_args = 0
 308 0000 80B5     		push	{r7, lr}
 309              	.LCFI10:
 310              		.cfi_def_cfa_offset 8
 311              		.cfi_offset 7, -8
 312              		.cfi_offset 14, -4
 313 0002 84B0     		sub	sp, sp, #16
 314              	.LCFI11:
 315              		.cfi_def_cfa_offset 24
 316 0004 00AF     		add	r7, sp, #0
 317              	.LCFI12:
 318              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 10


 319 0006 0246     		mov	r2, r0
 320 0008 0B46     		mov	r3, r1
 321 000a FA80     		strh	r2, [r7, #6]	@ movhi
 322 000c 7B71     		strb	r3, [r7, #5]
 196:.\Generated_Source\PSoC5/SPI_IntClock.c ****     uint8 enabled;
 197:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 198:.\Generated_Source\PSoC5/SPI_IntClock.c ****     uint8 currSrc = SPI_IntClock_GetSourceRegister();
 323              		.loc 1 198 0
 324 000e FFF7FEFF 		bl	SPI_IntClock_GetSourceRegister
 325 0012 0346     		mov	r3, r0
 326 0014 FB73     		strb	r3, [r7, #15]
 199:.\Generated_Source\PSoC5/SPI_IntClock.c ****     uint16 oldDivider = SPI_IntClock_GetDividerRegister();
 327              		.loc 1 199 0
 328 0016 FFF7FEFF 		bl	SPI_IntClock_GetDividerRegister
 329 001a 0346     		mov	r3, r0
 330 001c BB81     		strh	r3, [r7, #12]	@ movhi
 200:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 201:.\Generated_Source\PSoC5/SPI_IntClock.c ****     if (clkDivider != oldDivider)
 331              		.loc 1 201 0
 332 001e FA88     		ldrh	r2, [r7, #6]
 333 0020 BB89     		ldrh	r3, [r7, #12]
 334 0022 9A42     		cmp	r2, r3
 335 0024 00F0DC80 		beq	.L9
 202:.\Generated_Source\PSoC5/SPI_IntClock.c ****     {
 203:.\Generated_Source\PSoC5/SPI_IntClock.c ****         enabled = SPI_IntClock_CLKEN & SPI_IntClock_CLKEN_MASK;
 336              		.loc 1 203 0
 337 0028 44F2A233 		movw	r3, #17314
 338 002c C4F20003 		movt	r3, 16384
 339 0030 1B78     		ldrb	r3, [r3, #0]
 340 0032 DBB2     		uxtb	r3, r3
 341 0034 03F00103 		and	r3, r3, #1
 342 0038 FB72     		strb	r3, [r7, #11]
 204:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 205:.\Generated_Source\PSoC5/SPI_IntClock.c ****         if ((currSrc == (uint8)CYCLK_SRC_SEL_CLK_SYNC_D) && ((oldDivider == 0u) || (clkDivider == 0
 343              		.loc 1 205 0
 344 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 345 003c 002B     		cmp	r3, #0
 346 003e 32D1     		bne	.L11
 347              		.loc 1 205 0 is_stmt 0 discriminator 1
 348 0040 BB89     		ldrh	r3, [r7, #12]
 349 0042 002B     		cmp	r3, #0
 350 0044 02D0     		beq	.L12
 351 0046 FB88     		ldrh	r3, [r7, #6]
 352 0048 002B     		cmp	r3, #0
 353 004a 2CD1     		bne	.L11
 354              	.L12:
 206:.\Generated_Source\PSoC5/SPI_IntClock.c ****         {
 207:.\Generated_Source\PSoC5/SPI_IntClock.c ****             /* Moving to/from SSS requires correct ordering to prevent halting the clock    */
 208:.\Generated_Source\PSoC5/SPI_IntClock.c ****             if (oldDivider == 0u)
 355              		.loc 1 208 0 is_stmt 1
 356 004c BB89     		ldrh	r3, [r7, #12]
 357 004e 002B     		cmp	r3, #0
 358 0050 14D1     		bne	.L13
 209:.\Generated_Source\PSoC5/SPI_IntClock.c ****             {
 210:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 /* Moving away from SSS, set the divider first so when SSS is cleared we    */
 211:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 /* don't halt the clock.  Using the shadow load isn't required as the       */
 212:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 /* divider is ignored while SSS is set.                                     */
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 11


 213:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 CY_SET_REG16(SPI_IntClock_DIV_PTR, clkDivider);
 359              		.loc 1 213 0
 360 0052 4FF48143 		mov	r3, #16512
 361 0056 C4F20003 		movt	r3, 16384
 362 005a FA88     		ldrh	r2, [r7, #6]	@ movhi
 363 005c 1A80     		strh	r2, [r3, #0]	@ movhi
 214:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 SPI_IntClock_MOD_SRC &= (uint8)(~CYCLK_SSS);
 364              		.loc 1 214 0
 365 005e 44F28203 		movw	r3, #16514
 366 0062 C4F20003 		movt	r3, 16384
 367 0066 44F28202 		movw	r2, #16514
 368 006a C4F20002 		movt	r2, 16384
 369 006e 1278     		ldrb	r2, [r2, #0]
 370 0070 D2B2     		uxtb	r2, r2
 371 0072 22F04002 		bic	r2, r2, #64
 372 0076 D2B2     		uxtb	r2, r2
 373 0078 1A70     		strb	r2, [r3, #0]
 208:.\Generated_Source\PSoC5/SPI_IntClock.c ****             if (oldDivider == 0u)
 374              		.loc 1 208 0
 375 007a B1E0     		b	.L9
 376              	.L13:
 215:.\Generated_Source\PSoC5/SPI_IntClock.c ****             }
 216:.\Generated_Source\PSoC5/SPI_IntClock.c ****             else
 217:.\Generated_Source\PSoC5/SPI_IntClock.c ****             {
 218:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 /* Moving to SSS, set SSS which then ignores the divider and we can set     */
 219:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 /* it without bothering with the shadow load.                               */
 220:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 SPI_IntClock_MOD_SRC |= CYCLK_SSS;
 377              		.loc 1 220 0
 378 007c 44F28203 		movw	r3, #16514
 379 0080 C4F20003 		movt	r3, 16384
 380 0084 44F28202 		movw	r2, #16514
 381 0088 C4F20002 		movt	r2, 16384
 382 008c 1278     		ldrb	r2, [r2, #0]
 383 008e D2B2     		uxtb	r2, r2
 384 0090 42F04002 		orr	r2, r2, #64
 385 0094 D2B2     		uxtb	r2, r2
 386 0096 1A70     		strb	r2, [r3, #0]
 221:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 CY_SET_REG16(SPI_IntClock_DIV_PTR, clkDivider);
 387              		.loc 1 221 0
 388 0098 4FF48143 		mov	r3, #16512
 389 009c C4F20003 		movt	r3, 16384
 390 00a0 FA88     		ldrh	r2, [r7, #6]	@ movhi
 391 00a2 1A80     		strh	r2, [r3, #0]	@ movhi
 208:.\Generated_Source\PSoC5/SPI_IntClock.c ****             if (oldDivider == 0u)
 392              		.loc 1 208 0
 393 00a4 9CE0     		b	.L9
 394              	.L11:
 222:.\Generated_Source\PSoC5/SPI_IntClock.c ****             }
 223:.\Generated_Source\PSoC5/SPI_IntClock.c ****         }
 224:.\Generated_Source\PSoC5/SPI_IntClock.c ****         else
 225:.\Generated_Source\PSoC5/SPI_IntClock.c ****         {
 226:.\Generated_Source\PSoC5/SPI_IntClock.c **** 			
 227:.\Generated_Source\PSoC5/SPI_IntClock.c ****             if (enabled != 0u)
 395              		.loc 1 227 0
 396 00a6 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 397 00a8 002B     		cmp	r3, #0
 398 00aa 5CD0     		beq	.L15
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 12


 228:.\Generated_Source\PSoC5/SPI_IntClock.c ****             {
 229:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 CLK_DIST_LD = 0x00u;
 399              		.loc 1 229 0
 400 00ac 44F20103 		movw	r3, #16385
 401 00b0 C4F20003 		movt	r3, 16384
 402 00b4 4FF00002 		mov	r2, #0
 403 00b8 1A70     		strb	r2, [r3, #0]
 230:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 231:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 /* Clear all the mask bits except ours. */
 232:.\Generated_Source\PSoC5/SPI_IntClock.c **** #if defined(SPI_IntClock__CFG3)
 233:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 CLK_DIST_AMASK = SPI_IntClock_CLKEN_MASK;
 234:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 CLK_DIST_DMASK = 0x00u;
 235:.\Generated_Source\PSoC5/SPI_IntClock.c **** #else
 236:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 CLK_DIST_DMASK = SPI_IntClock_CLKEN_MASK;
 404              		.loc 1 236 0
 405 00ba 44F21003 		movw	r3, #16400
 406 00be C4F20003 		movt	r3, 16384
 407 00c2 4FF00102 		mov	r2, #1
 408 00c6 1A70     		strb	r2, [r3, #0]
 237:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 CLK_DIST_AMASK = 0x00u;
 409              		.loc 1 237 0
 410 00c8 44F21403 		movw	r3, #16404
 411 00cc C4F20003 		movt	r3, 16384
 412 00d0 4FF00002 		mov	r2, #0
 413 00d4 1A70     		strb	r2, [r3, #0]
 238:.\Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* SPI_IntClock__CFG3 */
 239:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 /* Clear mask of bus clock. */
 240:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 414              		.loc 1 240 0
 415 00d6 44F20803 		movw	r3, #16392
 416 00da C4F20003 		movt	r3, 16384
 417 00de 44F20802 		movw	r2, #16392
 418 00e2 C4F20002 		movt	r2, 16384
 419 00e6 1278     		ldrb	r2, [r2, #0]
 420 00e8 D2B2     		uxtb	r2, r2
 421 00ea 02F07F02 		and	r2, r2, #127
 422 00ee D2B2     		uxtb	r2, r2
 423 00f0 1A70     		strb	r2, [r3, #0]
 241:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 242:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 /* If clock is currently enabled, disable it if async or going from N-to-1*/
 243:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 if (((SPI_IntClock_MOD_SRC & CYCLK_SYNC) == 0u) || (clkDivider == 0u))
 424              		.loc 1 243 0
 425 00f2 44F28203 		movw	r3, #16514
 426 00f6 C4F20003 		movt	r3, 16384
 427 00fa 1B78     		ldrb	r3, [r3, #0]
 428 00fc DBB2     		uxtb	r3, r3
 429 00fe 03F00803 		and	r3, r3, #8
 430 0102 002B     		cmp	r3, #0
 431 0104 02D0     		beq	.L16
 432              		.loc 1 243 0 is_stmt 0 discriminator 1
 433 0106 FB88     		ldrh	r3, [r7, #6]
 434 0108 002B     		cmp	r3, #0
 435 010a 2CD1     		bne	.L15
 436              	.L16:
 244:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 {
 245:.\Generated_Source\PSoC5/SPI_IntClock.c **** #if HAS_CLKDIST_LD_DISABLE
 246:.\Generated_Source\PSoC5/SPI_IntClock.c ****                     CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 13


 437              		.loc 1 246 0 is_stmt 1
 438 010c 44F20203 		movw	r3, #16386
 439 0110 C4F20003 		movt	r3, 16384
 440 0114 BA89     		ldrh	r2, [r7, #12]	@ movhi
 441 0116 1A80     		strh	r2, [r3, #0]	@ movhi
 247:.\Generated_Source\PSoC5/SPI_IntClock.c ****                     CLK_DIST_LD = CYCLK_LD_DISABLE|CYCLK_LD_SYNC_EN|CYCLK_LD_LOAD;
 442              		.loc 1 247 0
 443 0118 44F20103 		movw	r3, #16385
 444 011c C4F20003 		movt	r3, 16384
 445 0120 4FF00702 		mov	r2, #7
 446 0124 1A70     		strb	r2, [r3, #0]
 248:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 249:.\Generated_Source\PSoC5/SPI_IntClock.c ****                     /* Wait for clock to be disabled */
 250:.\Generated_Source\PSoC5/SPI_IntClock.c ****                     while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 447              		.loc 1 250 0
 448 0126 00BF     		nop
 449              	.L17:
 450              		.loc 1 250 0 is_stmt 0 discriminator 1
 451 0128 44F20103 		movw	r3, #16385
 452 012c C4F20003 		movt	r3, 16384
 453 0130 1B78     		ldrb	r3, [r3, #0]
 454 0132 DBB2     		uxtb	r3, r3
 455 0134 03F00103 		and	r3, r3, #1
 456 0138 002B     		cmp	r3, #0
 457 013a F5D1     		bne	.L17
 251:.\Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 252:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 253:.\Generated_Source\PSoC5/SPI_IntClock.c ****                     SPI_IntClock_CLKEN &= (uint8)(~SPI_IntClock_CLKEN_MASK);
 458              		.loc 1 253 0 is_stmt 1
 459 013c 44F2A233 		movw	r3, #17314
 460 0140 C4F20003 		movt	r3, 16384
 461 0144 44F2A232 		movw	r2, #17314
 462 0148 C4F20002 		movt	r2, 16384
 463 014c 1278     		ldrb	r2, [r2, #0]
 464 014e D2B2     		uxtb	r2, r2
 465 0150 22F00102 		bic	r2, r2, #1
 466 0154 D2B2     		uxtb	r2, r2
 467 0156 1A70     		strb	r2, [r3, #0]
 254:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 255:.\Generated_Source\PSoC5/SPI_IntClock.c **** #if HAS_CLKDIST_LD_DISABLE
 256:.\Generated_Source\PSoC5/SPI_IntClock.c ****                     /* Clear the disable bit */
 257:.\Generated_Source\PSoC5/SPI_IntClock.c ****                     CLK_DIST_LD = 0x00u;
 468              		.loc 1 257 0
 469 0158 44F20103 		movw	r3, #16385
 470 015c C4F20003 		movt	r3, 16384
 471 0160 4FF00002 		mov	r2, #0
 472 0164 1A70     		strb	r2, [r3, #0]
 473              	.L15:
 258:.\Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 259:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 }
 260:.\Generated_Source\PSoC5/SPI_IntClock.c ****             }
 261:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 262:.\Generated_Source\PSoC5/SPI_IntClock.c ****             /* Load divide value. */
 263:.\Generated_Source\PSoC5/SPI_IntClock.c ****             if ((SPI_IntClock_CLKEN & SPI_IntClock_CLKEN_MASK) != 0u)
 474              		.loc 1 263 0
 475 0166 44F2A233 		movw	r3, #17314
 476 016a C4F20003 		movt	r3, 16384
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 14


 477 016e 1B78     		ldrb	r3, [r3, #0]
 478 0170 DBB2     		uxtb	r3, r3
 479 0172 03F00103 		and	r3, r3, #1
 480 0176 002B     		cmp	r3, #0
 481 0178 1ED0     		beq	.L18
 264:.\Generated_Source\PSoC5/SPI_IntClock.c ****             {
 265:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 /* If the clock is still enabled, use the shadow registers */
 266:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 CY_SET_REG16(CYREG_CLKDIST_WRK0, clkDivider);
 482              		.loc 1 266 0
 483 017a 44F20203 		movw	r3, #16386
 484 017e C4F20003 		movt	r3, 16384
 485 0182 FA88     		ldrh	r2, [r7, #6]	@ movhi
 486 0184 1A80     		strh	r2, [r3, #0]	@ movhi
 267:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 268:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 CLK_DIST_LD = (CYCLK_LD_LOAD | ((restart != 0u) ? CYCLK_LD_SYNC_EN : 0x00u));
 487              		.loc 1 268 0
 488 0186 44F20103 		movw	r3, #16385
 489 018a C4F20003 		movt	r3, 16384
 490 018e 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 491 0190 002A     		cmp	r2, #0
 492 0192 02D0     		beq	.L19
 493              		.loc 1 268 0 is_stmt 0 discriminator 1
 494 0194 4FF00302 		mov	r2, #3
 495 0198 01E0     		b	.L20
 496              	.L19:
 497              		.loc 1 268 0 discriminator 2
 498 019a 4FF00102 		mov	r2, #1
 499              	.L20:
 500              		.loc 1 268 0 discriminator 3
 501 019e 1A70     		strb	r2, [r3, #0]
 269:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 502              		.loc 1 269 0 is_stmt 1
 503 01a0 00BF     		nop
 504              	.L21:
 505              		.loc 1 269 0 is_stmt 0 discriminator 1
 506 01a2 44F20103 		movw	r3, #16385
 507 01a6 C4F20003 		movt	r3, 16384
 508 01aa 1B78     		ldrb	r3, [r3, #0]
 509 01ac DBB2     		uxtb	r3, r3
 510 01ae 03F00103 		and	r3, r3, #1
 511 01b2 002B     		cmp	r3, #0
 512 01b4 F5D1     		bne	.L21
 513              		.loc 1 269 0
 514 01b6 13E0     		b	.L9
 515              	.L18:
 270:.\Generated_Source\PSoC5/SPI_IntClock.c ****             }
 271:.\Generated_Source\PSoC5/SPI_IntClock.c ****             else
 272:.\Generated_Source\PSoC5/SPI_IntClock.c ****             {
 273:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 /* If the clock is disabled, set the divider directly */
 274:.\Generated_Source\PSoC5/SPI_IntClock.c ****                 CY_SET_REG16(SPI_IntClock_DIV_PTR, clkDivider);
 516              		.loc 1 274 0 is_stmt 1
 517 01b8 4FF48143 		mov	r3, #16512
 518 01bc C4F20003 		movt	r3, 16384
 519 01c0 FA88     		ldrh	r2, [r7, #6]	@ movhi
 520 01c2 1A80     		strh	r2, [r3, #0]	@ movhi
 275:.\Generated_Source\PSoC5/SPI_IntClock.c **** 				SPI_IntClock_CLKEN |= enabled;
 521              		.loc 1 275 0
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 15


 522 01c4 44F2A233 		movw	r3, #17314
 523 01c8 C4F20003 		movt	r3, 16384
 524 01cc 44F2A232 		movw	r2, #17314
 525 01d0 C4F20002 		movt	r2, 16384
 526 01d4 1278     		ldrb	r2, [r2, #0]
 527 01d6 D1B2     		uxtb	r1, r2
 528 01d8 FA7A     		ldrb	r2, [r7, #11]
 529 01da 0A43     		orrs	r2, r2, r1
 530 01dc D2B2     		uxtb	r2, r2
 531 01de 1A70     		strb	r2, [r3, #0]
 532              	.L9:
 276:.\Generated_Source\PSoC5/SPI_IntClock.c ****             }
 277:.\Generated_Source\PSoC5/SPI_IntClock.c ****         }
 278:.\Generated_Source\PSoC5/SPI_IntClock.c ****     }
 279:.\Generated_Source\PSoC5/SPI_IntClock.c **** }
 533              		.loc 1 279 0
 534 01e0 07F11007 		add	r7, r7, #16
 535 01e4 BD46     		mov	sp, r7
 536 01e6 80BD     		pop	{r7, pc}
 537              		.cfi_endproc
 538              	.LFE4:
 539              		.size	SPI_IntClock_SetDividerRegister, .-SPI_IntClock_SetDividerRegister
 540              		.section	.text.SPI_IntClock_GetDividerRegister,"ax",%progbits
 541              		.align	2
 542              		.global	SPI_IntClock_GetDividerRegister
 543              		.thumb
 544              		.thumb_func
 545              		.type	SPI_IntClock_GetDividerRegister, %function
 546              	SPI_IntClock_GetDividerRegister:
 547              	.LFB5:
 280:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 281:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 282:.\Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
 283:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_GetDividerRegister
 284:.\Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
 285:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 286:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
 287:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  Gets the clock divider register value.
 288:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 289:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
 290:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  None
 291:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 292:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
 293:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  Divide value of the clock minus 1. For example, if the clock is set to
 294:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  divide by 2, the return value will be 1.
 295:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 296:.\Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 297:.\Generated_Source\PSoC5/SPI_IntClock.c **** uint16 SPI_IntClock_GetDividerRegister(void) 
 298:.\Generated_Source\PSoC5/SPI_IntClock.c **** {
 548              		.loc 1 298 0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 1, uses_anonymous_args = 0
 552              		@ link register save eliminated.
 553 0000 80B4     		push	{r7}
 554              	.LCFI13:
 555              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 16


 556              		.cfi_offset 7, -4
 557 0002 00AF     		add	r7, sp, #0
 558              	.LCFI14:
 559              		.cfi_def_cfa_register 7
 299:.\Generated_Source\PSoC5/SPI_IntClock.c ****     return CY_GET_REG16(SPI_IntClock_DIV_PTR);
 560              		.loc 1 299 0
 561 0004 4FF48143 		mov	r3, #16512
 562 0008 C4F20003 		movt	r3, 16384
 563 000c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 564 000e 9BB2     		uxth	r3, r3
 300:.\Generated_Source\PSoC5/SPI_IntClock.c **** }
 565              		.loc 1 300 0
 566 0010 1846     		mov	r0, r3
 567 0012 BD46     		mov	sp, r7
 568 0014 80BC     		pop	{r7}
 569 0016 7047     		bx	lr
 570              		.cfi_endproc
 571              	.LFE5:
 572              		.size	SPI_IntClock_GetDividerRegister, .-SPI_IntClock_GetDividerRegister
 573              		.section	.text.SPI_IntClock_SetModeRegister,"ax",%progbits
 574              		.align	2
 575              		.global	SPI_IntClock_SetModeRegister
 576              		.thumb
 577              		.thumb_func
 578              		.type	SPI_IntClock_SetModeRegister, %function
 579              	SPI_IntClock_SetModeRegister:
 580              	.LFB6:
 301:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 302:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 303:.\Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
 304:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_SetModeRegister
 305:.\Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
 306:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 307:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
 308:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  Sets flags that control the operating mode of the clock. This function only
 309:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  changes flags from 0 to 1; flags that are already 1 will remain unchanged.
 310:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  To clear flags, use the ClearModeRegister function. The clock must be
 311:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  disabled before changing the mode.
 312:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 313:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
 314:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  clkMode: Bit mask containing the bits to set. For PSoC 3 and PSoC 5,
 315:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   clkMode should be a set of the following optional bits or'ed together.
 316:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 317:.\Generated_Source\PSoC5/SPI_IntClock.c **** *                 occur when the divider count reaches half of the divide
 318:.\Generated_Source\PSoC5/SPI_IntClock.c **** *                 value.
 319:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 320:.\Generated_Source\PSoC5/SPI_IntClock.c **** *                 is asserted for approximately half of its period. When
 321:.\Generated_Source\PSoC5/SPI_IntClock.c **** *                 disabled, the output clock is asserted for one period of the
 322:.\Generated_Source\PSoC5/SPI_IntClock.c **** *                 source clock.
 323:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 324:.\Generated_Source\PSoC5/SPI_IntClock.c **** *                 be enabled for all synchronous clocks.
 325:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   See the Technical Reference Manual for details about setting the mode of
 326:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 327:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 328:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
 329:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  None
 330:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 17


 331:.\Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 332:.\Generated_Source\PSoC5/SPI_IntClock.c **** void SPI_IntClock_SetModeRegister(uint8 modeBitMask) 
 333:.\Generated_Source\PSoC5/SPI_IntClock.c **** {
 581              		.loc 1 333 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 8
 584              		@ frame_needed = 1, uses_anonymous_args = 0
 585              		@ link register save eliminated.
 586 0000 80B4     		push	{r7}
 587              	.LCFI15:
 588              		.cfi_def_cfa_offset 4
 589              		.cfi_offset 7, -4
 590 0002 83B0     		sub	sp, sp, #12
 591              	.LCFI16:
 592              		.cfi_def_cfa_offset 16
 593 0004 00AF     		add	r7, sp, #0
 594              	.LCFI17:
 595              		.cfi_def_cfa_register 7
 596 0006 0346     		mov	r3, r0
 597 0008 FB71     		strb	r3, [r7, #7]
 334:.\Generated_Source\PSoC5/SPI_IntClock.c ****     SPI_IntClock_MOD_SRC |= modeBitMask & (uint8)SPI_IntClock_MODE_MASK;
 598              		.loc 1 334 0
 599 000a 44F28203 		movw	r3, #16514
 600 000e C4F20003 		movt	r3, 16384
 601 0012 44F28202 		movw	r2, #16514
 602 0016 C4F20002 		movt	r2, 16384
 603 001a 1278     		ldrb	r2, [r2, #0]
 604 001c D2B2     		uxtb	r2, r2
 605 001e D1B2     		uxtb	r1, r2
 606 0020 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 607 0022 22F00702 		bic	r2, r2, #7
 608 0026 D2B2     		uxtb	r2, r2
 609 0028 0A43     		orrs	r2, r2, r1
 610 002a D2B2     		uxtb	r2, r2
 611 002c D2B2     		uxtb	r2, r2
 612 002e 1A70     		strb	r2, [r3, #0]
 335:.\Generated_Source\PSoC5/SPI_IntClock.c **** }
 613              		.loc 1 335 0
 614 0030 07F10C07 		add	r7, r7, #12
 615 0034 BD46     		mov	sp, r7
 616 0036 80BC     		pop	{r7}
 617 0038 7047     		bx	lr
 618              		.cfi_endproc
 619              	.LFE6:
 620              		.size	SPI_IntClock_SetModeRegister, .-SPI_IntClock_SetModeRegister
 621 003a 00BF     		.section	.text.SPI_IntClock_ClearModeRegister,"ax",%progbits
 622              		.align	2
 623              		.global	SPI_IntClock_ClearModeRegister
 624              		.thumb
 625              		.thumb_func
 626              		.type	SPI_IntClock_ClearModeRegister, %function
 627              	SPI_IntClock_ClearModeRegister:
 628              	.LFB7:
 336:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 337:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 338:.\Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
 339:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_ClearModeRegister
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 18


 340:.\Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
 341:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 342:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
 343:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  Clears flags that control the operating mode of the clock. This function
 344:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  only changes flags from 1 to 0; flags that are already 0 will remain
 345:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  unchanged. To set flags, use the SetModeRegister function. The clock must be
 346:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  disabled before changing the mode.
 347:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 348:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
 349:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  clkMode: Bit mask containing the bits to clear. For PSoC 3 and PSoC 5,
 350:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   clkMode should be a set of the following optional bits or'ed together.
 351:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 352:.\Generated_Source\PSoC5/SPI_IntClock.c **** *                 occur when the divider count reaches half of the divide
 353:.\Generated_Source\PSoC5/SPI_IntClock.c **** *                 value.
 354:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 355:.\Generated_Source\PSoC5/SPI_IntClock.c **** *                 is asserted for approximately half of its period. When
 356:.\Generated_Source\PSoC5/SPI_IntClock.c **** *                 disabled, the output clock is asserted for one period of the
 357:.\Generated_Source\PSoC5/SPI_IntClock.c **** *                 source clock.
 358:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 359:.\Generated_Source\PSoC5/SPI_IntClock.c **** *                 be enabled for all synchronous clocks.
 360:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   See the Technical Reference Manual for details about setting the mode of
 361:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 362:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 363:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
 364:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  None
 365:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 366:.\Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 367:.\Generated_Source\PSoC5/SPI_IntClock.c **** void SPI_IntClock_ClearModeRegister(uint8 modeBitMask) 
 368:.\Generated_Source\PSoC5/SPI_IntClock.c **** {
 629              		.loc 1 368 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 8
 632              		@ frame_needed = 1, uses_anonymous_args = 0
 633              		@ link register save eliminated.
 634 0000 80B4     		push	{r7}
 635              	.LCFI18:
 636              		.cfi_def_cfa_offset 4
 637              		.cfi_offset 7, -4
 638 0002 83B0     		sub	sp, sp, #12
 639              	.LCFI19:
 640              		.cfi_def_cfa_offset 16
 641 0004 00AF     		add	r7, sp, #0
 642              	.LCFI20:
 643              		.cfi_def_cfa_register 7
 644 0006 0346     		mov	r3, r0
 645 0008 FB71     		strb	r3, [r7, #7]
 369:.\Generated_Source\PSoC5/SPI_IntClock.c ****     SPI_IntClock_MOD_SRC &= (uint8)(~modeBitMask) | (uint8)(~(uint8)(SPI_IntClock_MODE_MASK));
 646              		.loc 1 369 0
 647 000a 44F28203 		movw	r3, #16514
 648 000e C4F20003 		movt	r3, 16384
 649 0012 44F28202 		movw	r2, #16514
 650 0016 C4F20002 		movt	r2, 16384
 651 001a 1278     		ldrb	r2, [r2, #0]
 652 001c D1B2     		uxtb	r1, r2
 653 001e FA79     		ldrb	r2, [r7, #7]
 654 0020 6FEA0202 		mvn	r2, r2
 655 0024 D2B2     		uxtb	r2, r2
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 19


 656 0026 42F00702 		orr	r2, r2, #7
 657 002a D2B2     		uxtb	r2, r2
 658 002c 0A40     		ands	r2, r2, r1
 659 002e D2B2     		uxtb	r2, r2
 660 0030 1A70     		strb	r2, [r3, #0]
 370:.\Generated_Source\PSoC5/SPI_IntClock.c **** }
 661              		.loc 1 370 0
 662 0032 07F10C07 		add	r7, r7, #12
 663 0036 BD46     		mov	sp, r7
 664 0038 80BC     		pop	{r7}
 665 003a 7047     		bx	lr
 666              		.cfi_endproc
 667              	.LFE7:
 668              		.size	SPI_IntClock_ClearModeRegister, .-SPI_IntClock_ClearModeRegister
 669              		.section	.text.SPI_IntClock_GetModeRegister,"ax",%progbits
 670              		.align	2
 671              		.global	SPI_IntClock_GetModeRegister
 672              		.thumb
 673              		.thumb_func
 674              		.type	SPI_IntClock_GetModeRegister, %function
 675              	SPI_IntClock_GetModeRegister:
 676              	.LFB8:
 371:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 372:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 373:.\Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
 374:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_GetModeRegister
 375:.\Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
 376:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 377:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
 378:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  Gets the clock mode register value.
 379:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 380:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
 381:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  None
 382:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 383:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
 384:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  Bit mask representing the enabled mode bits. See the SetModeRegister and
 385:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  ClearModeRegister descriptions for details about the mode bits.
 386:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 387:.\Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 388:.\Generated_Source\PSoC5/SPI_IntClock.c **** uint8 SPI_IntClock_GetModeRegister(void) 
 389:.\Generated_Source\PSoC5/SPI_IntClock.c **** {
 677              		.loc 1 389 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 0
 680              		@ frame_needed = 1, uses_anonymous_args = 0
 681              		@ link register save eliminated.
 682 0000 80B4     		push	{r7}
 683              	.LCFI21:
 684              		.cfi_def_cfa_offset 4
 685              		.cfi_offset 7, -4
 686 0002 00AF     		add	r7, sp, #0
 687              	.LCFI22:
 688              		.cfi_def_cfa_register 7
 390:.\Generated_Source\PSoC5/SPI_IntClock.c ****     return SPI_IntClock_MOD_SRC & (uint8)(SPI_IntClock_MODE_MASK);
 689              		.loc 1 390 0
 690 0004 44F28203 		movw	r3, #16514
 691 0008 C4F20003 		movt	r3, 16384
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 20


 692 000c 1B78     		ldrb	r3, [r3, #0]
 693 000e DBB2     		uxtb	r3, r3
 694 0010 23F00703 		bic	r3, r3, #7
 695 0014 DBB2     		uxtb	r3, r3
 391:.\Generated_Source\PSoC5/SPI_IntClock.c **** }
 696              		.loc 1 391 0
 697 0016 1846     		mov	r0, r3
 698 0018 BD46     		mov	sp, r7
 699 001a 80BC     		pop	{r7}
 700 001c 7047     		bx	lr
 701              		.cfi_endproc
 702              	.LFE8:
 703              		.size	SPI_IntClock_GetModeRegister, .-SPI_IntClock_GetModeRegister
 704 001e 00BF     		.section	.text.SPI_IntClock_SetSourceRegister,"ax",%progbits
 705              		.align	2
 706              		.global	SPI_IntClock_SetSourceRegister
 707              		.thumb
 708              		.thumb_func
 709              		.type	SPI_IntClock_SetSourceRegister, %function
 710              	SPI_IntClock_SetSourceRegister:
 711              	.LFB9:
 392:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 393:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 394:.\Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
 395:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_SetSourceRegister
 396:.\Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
 397:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 398:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
 399:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  Sets the input source of the clock. The clock must be disabled before
 400:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  changing the source. The old and new clock sources must be running.
 401:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 402:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
 403:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  clkSource:  For PSoC 3 and PSoC 5 devices, clkSource should be one of the
 404:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   following input sources:
 405:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SRC_SEL_SYNC_DIG
 406:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SRC_SEL_IMO
 407:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SRC_SEL_XTALM
 408:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SRC_SEL_ILO
 409:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SRC_SEL_PLL
 410:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SRC_SEL_XTALK
 411:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SRC_SEL_DSI_G
 412:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SRC_SEL_DSI_D/CYCLK_SRC_SEL_DSI_A
 413:.\Generated_Source\PSoC5/SPI_IntClock.c **** *   See the Technical Reference Manual for details on clock sources.
 414:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 415:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
 416:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  None
 417:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 418:.\Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 419:.\Generated_Source\PSoC5/SPI_IntClock.c **** void SPI_IntClock_SetSourceRegister(uint8 clkSource) 
 420:.\Generated_Source\PSoC5/SPI_IntClock.c **** {
 712              		.loc 1 420 0
 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 16
 715              		@ frame_needed = 1, uses_anonymous_args = 0
 716 0000 80B5     		push	{r7, lr}
 717              	.LCFI23:
 718              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 21


 719              		.cfi_offset 7, -8
 720              		.cfi_offset 14, -4
 721 0002 84B0     		sub	sp, sp, #16
 722              	.LCFI24:
 723              		.cfi_def_cfa_offset 24
 724 0004 00AF     		add	r7, sp, #0
 725              	.LCFI25:
 726              		.cfi_def_cfa_register 7
 727 0006 0346     		mov	r3, r0
 728 0008 FB71     		strb	r3, [r7, #7]
 421:.\Generated_Source\PSoC5/SPI_IntClock.c ****     uint16 currDiv = SPI_IntClock_GetDividerRegister();
 729              		.loc 1 421 0
 730 000a FFF7FEFF 		bl	SPI_IntClock_GetDividerRegister
 731 000e 0346     		mov	r3, r0
 732 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 422:.\Generated_Source\PSoC5/SPI_IntClock.c ****     uint8 oldSrc = SPI_IntClock_GetSourceRegister();
 733              		.loc 1 422 0
 734 0012 FFF7FEFF 		bl	SPI_IntClock_GetSourceRegister
 735 0016 0346     		mov	r3, r0
 736 0018 7B73     		strb	r3, [r7, #13]
 423:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 424:.\Generated_Source\PSoC5/SPI_IntClock.c ****     if (((oldSrc != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 737              		.loc 1 424 0
 738 001a 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 739 001c 002B     		cmp	r3, #0
 740 001e 27D0     		beq	.L29
 741              		.loc 1 424 0 is_stmt 0 discriminator 1
 742 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 743 0022 002B     		cmp	r3, #0
 744 0024 24D1     		bne	.L29
 425:.\Generated_Source\PSoC5/SPI_IntClock.c ****         (clkSource == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 745              		.loc 1 425 0 is_stmt 1
 746 0026 FB89     		ldrh	r3, [r7, #14]
 747 0028 002B     		cmp	r3, #0
 748 002a 21D1     		bne	.L29
 426:.\Generated_Source\PSoC5/SPI_IntClock.c ****     {
 427:.\Generated_Source\PSoC5/SPI_IntClock.c ****         /* Switching to Master and divider is 1, set SSS, which will output master, */
 428:.\Generated_Source\PSoC5/SPI_IntClock.c ****         /* then set the source so we are consistent.                                */
 429:.\Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_MOD_SRC |= CYCLK_SSS;
 749              		.loc 1 429 0
 750 002c 44F28203 		movw	r3, #16514
 751 0030 C4F20003 		movt	r3, 16384
 752 0034 44F28202 		movw	r2, #16514
 753 0038 C4F20002 		movt	r2, 16384
 754 003c 1278     		ldrb	r2, [r2, #0]
 755 003e D2B2     		uxtb	r2, r2
 756 0040 42F04002 		orr	r2, r2, #64
 757 0044 D2B2     		uxtb	r2, r2
 758 0046 1A70     		strb	r2, [r3, #0]
 430:.\Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_MOD_SRC =
 759              		.loc 1 430 0
 760 0048 44F28203 		movw	r3, #16514
 761 004c C4F20003 		movt	r3, 16384
 431:.\Generated_Source\PSoC5/SPI_IntClock.c ****             (SPI_IntClock_MOD_SRC & (uint8)(~SPI_IntClock_SRC_SEL_MSK)) | clkSource;
 762              		.loc 1 431 0
 763 0050 44F28202 		movw	r2, #16514
 764 0054 C4F20002 		movt	r2, 16384
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 22


 765 0058 1278     		ldrb	r2, [r2, #0]
 766 005a D2B2     		uxtb	r2, r2
 430:.\Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_MOD_SRC =
 767              		.loc 1 430 0
 768 005c D2B2     		uxtb	r2, r2
 769 005e 22F00702 		bic	r2, r2, #7
 770 0062 D1B2     		uxtb	r1, r2
 771 0064 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 772 0066 0A43     		orrs	r2, r2, r1
 773 0068 D2B2     		uxtb	r2, r2
 774 006a D2B2     		uxtb	r2, r2
 775 006c 1A70     		strb	r2, [r3, #0]
 776 006e 3DE0     		b	.L28
 777              	.L29:
 432:.\Generated_Source\PSoC5/SPI_IntClock.c ****     }
 433:.\Generated_Source\PSoC5/SPI_IntClock.c ****     else if (((oldSrc == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 778              		.loc 1 433 0
 779 0070 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 780 0072 002B     		cmp	r3, #0
 781 0074 27D1     		bne	.L31
 782              		.loc 1 433 0 is_stmt 0 discriminator 1
 783 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 784 0078 002B     		cmp	r3, #0
 785 007a 24D0     		beq	.L31
 434:.\Generated_Source\PSoC5/SPI_IntClock.c ****             (clkSource != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 786              		.loc 1 434 0 is_stmt 1
 787 007c FB89     		ldrh	r3, [r7, #14]
 788 007e 002B     		cmp	r3, #0
 789 0080 21D1     		bne	.L31
 435:.\Generated_Source\PSoC5/SPI_IntClock.c ****     {
 436:.\Generated_Source\PSoC5/SPI_IntClock.c ****         /* Switching from Master to not and divider is 1, set source, so we don't   */
 437:.\Generated_Source\PSoC5/SPI_IntClock.c ****         /* lock when we clear SSS.                                                  */
 438:.\Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_MOD_SRC =
 790              		.loc 1 438 0
 791 0082 44F28203 		movw	r3, #16514
 792 0086 C4F20003 		movt	r3, 16384
 439:.\Generated_Source\PSoC5/SPI_IntClock.c ****             (SPI_IntClock_MOD_SRC & (uint8)(~SPI_IntClock_SRC_SEL_MSK)) | clkSource;
 793              		.loc 1 439 0
 794 008a 44F28202 		movw	r2, #16514
 795 008e C4F20002 		movt	r2, 16384
 796 0092 1278     		ldrb	r2, [r2, #0]
 797 0094 D2B2     		uxtb	r2, r2
 438:.\Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_MOD_SRC =
 798              		.loc 1 438 0
 799 0096 D2B2     		uxtb	r2, r2
 800 0098 22F00702 		bic	r2, r2, #7
 801 009c D1B2     		uxtb	r1, r2
 802 009e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 803 00a0 0A43     		orrs	r2, r2, r1
 804 00a2 D2B2     		uxtb	r2, r2
 805 00a4 D2B2     		uxtb	r2, r2
 806 00a6 1A70     		strb	r2, [r3, #0]
 440:.\Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_MOD_SRC &= (uint8)(~CYCLK_SSS);
 807              		.loc 1 440 0
 808 00a8 44F28203 		movw	r3, #16514
 809 00ac C4F20003 		movt	r3, 16384
 810 00b0 44F28202 		movw	r2, #16514
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 23


 811 00b4 C4F20002 		movt	r2, 16384
 812 00b8 1278     		ldrb	r2, [r2, #0]
 813 00ba D2B2     		uxtb	r2, r2
 814 00bc 22F04002 		bic	r2, r2, #64
 815 00c0 D2B2     		uxtb	r2, r2
 816 00c2 1A70     		strb	r2, [r3, #0]
 817 00c4 12E0     		b	.L28
 818              	.L31:
 441:.\Generated_Source\PSoC5/SPI_IntClock.c ****     }
 442:.\Generated_Source\PSoC5/SPI_IntClock.c ****     else
 443:.\Generated_Source\PSoC5/SPI_IntClock.c ****     {
 444:.\Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_MOD_SRC =
 819              		.loc 1 444 0
 820 00c6 44F28203 		movw	r3, #16514
 821 00ca C4F20003 		movt	r3, 16384
 445:.\Generated_Source\PSoC5/SPI_IntClock.c ****             (SPI_IntClock_MOD_SRC & (uint8)(~SPI_IntClock_SRC_SEL_MSK)) | clkSource;
 822              		.loc 1 445 0
 823 00ce 44F28202 		movw	r2, #16514
 824 00d2 C4F20002 		movt	r2, 16384
 825 00d6 1278     		ldrb	r2, [r2, #0]
 826 00d8 D2B2     		uxtb	r2, r2
 444:.\Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_MOD_SRC =
 827              		.loc 1 444 0
 828 00da D2B2     		uxtb	r2, r2
 829 00dc 22F00702 		bic	r2, r2, #7
 830 00e0 D1B2     		uxtb	r1, r2
 831 00e2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 832 00e4 0A43     		orrs	r2, r2, r1
 833 00e6 D2B2     		uxtb	r2, r2
 834 00e8 D2B2     		uxtb	r2, r2
 835 00ea 1A70     		strb	r2, [r3, #0]
 836              	.L28:
 446:.\Generated_Source\PSoC5/SPI_IntClock.c ****     }
 447:.\Generated_Source\PSoC5/SPI_IntClock.c **** }
 837              		.loc 1 447 0
 838 00ec 07F11007 		add	r7, r7, #16
 839 00f0 BD46     		mov	sp, r7
 840 00f2 80BD     		pop	{r7, pc}
 841              		.cfi_endproc
 842              	.LFE9:
 843              		.size	SPI_IntClock_SetSourceRegister, .-SPI_IntClock_SetSourceRegister
 844              		.section	.text.SPI_IntClock_GetSourceRegister,"ax",%progbits
 845              		.align	2
 846              		.global	SPI_IntClock_GetSourceRegister
 847              		.thumb
 848              		.thumb_func
 849              		.type	SPI_IntClock_GetSourceRegister, %function
 850              	SPI_IntClock_GetSourceRegister:
 851              	.LFB10:
 448:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 449:.\Generated_Source\PSoC5/SPI_IntClock.c **** 
 450:.\Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
 451:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_GetSourceRegister
 452:.\Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
 453:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 454:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
 455:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  Gets the input source of the clock.
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 24


 456:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 457:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
 458:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  None
 459:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 460:.\Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
 461:.\Generated_Source\PSoC5/SPI_IntClock.c **** *  The input source of the clock. See SetSourceRegister for details.
 462:.\Generated_Source\PSoC5/SPI_IntClock.c **** *
 463:.\Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 464:.\Generated_Source\PSoC5/SPI_IntClock.c **** uint8 SPI_IntClock_GetSourceRegister(void) 
 465:.\Generated_Source\PSoC5/SPI_IntClock.c **** {
 852              		.loc 1 465 0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 0
 855              		@ frame_needed = 1, uses_anonymous_args = 0
 856              		@ link register save eliminated.
 857 0000 80B4     		push	{r7}
 858              	.LCFI26:
 859              		.cfi_def_cfa_offset 4
 860              		.cfi_offset 7, -4
 861 0002 00AF     		add	r7, sp, #0
 862              	.LCFI27:
 863              		.cfi_def_cfa_register 7
 466:.\Generated_Source\PSoC5/SPI_IntClock.c ****     return SPI_IntClock_MOD_SRC & SPI_IntClock_SRC_SEL_MSK;
 864              		.loc 1 466 0
 865 0004 44F28203 		movw	r3, #16514
 866 0008 C4F20003 		movt	r3, 16384
 867 000c 1B78     		ldrb	r3, [r3, #0]
 868 000e DBB2     		uxtb	r3, r3
 869 0010 03F00703 		and	r3, r3, #7
 870 0014 DBB2     		uxtb	r3, r3
 467:.\Generated_Source\PSoC5/SPI_IntClock.c **** }
 871              		.loc 1 467 0
 872 0016 1846     		mov	r0, r3
 873 0018 BD46     		mov	sp, r7
 874 001a 80BC     		pop	{r7}
 875 001c 7047     		bx	lr
 876              		.cfi_endproc
 877              	.LFE10:
 878              		.size	SPI_IntClock_GetSourceRegister, .-SPI_IntClock_GetSourceRegister
 879 001e 00BF     		.text
 880              	.Letext0:
 881              		.file 2 "./Generated_Source/PSoC5/cytypes.h"
 882              		.section	.debug_info,"",%progbits
 883              	.Ldebug_info0:
 884 0000 90020000 		.4byte	0x290
 885 0004 0200     		.2byte	0x2
 886 0006 00000000 		.4byte	.Ldebug_abbrev0
 887 000a 04       		.byte	0x4
 888 000b 01       		.uleb128 0x1
 889 000c EF010000 		.4byte	.LASF37
 890 0010 01       		.byte	0x1
 891 0011 37000000 		.4byte	.LASF38
 892 0015 A5020000 		.4byte	.LASF39
 893 0019 00000000 		.4byte	.Ldebug_ranges0+0
 894 001d 00000000 		.4byte	0
 895 0021 00000000 		.4byte	0
 896 0025 00000000 		.4byte	.Ldebug_line0
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 25


 897 0029 02       		.uleb128 0x2
 898 002a 01       		.byte	0x1
 899 002b 06       		.byte	0x6
 900 002c 72020000 		.4byte	.LASF0
 901 0030 02       		.uleb128 0x2
 902 0031 01       		.byte	0x1
 903 0032 08       		.byte	0x8
 904 0033 AD000000 		.4byte	.LASF1
 905 0037 02       		.uleb128 0x2
 906 0038 02       		.byte	0x2
 907 0039 05       		.byte	0x5
 908 003a C5010000 		.4byte	.LASF2
 909 003e 02       		.uleb128 0x2
 910 003f 02       		.byte	0x2
 911 0040 07       		.byte	0x7
 912 0041 EF000000 		.4byte	.LASF3
 913 0045 02       		.uleb128 0x2
 914 0046 04       		.byte	0x4
 915 0047 05       		.byte	0x5
 916 0048 5F020000 		.4byte	.LASF4
 917 004c 02       		.uleb128 0x2
 918 004d 04       		.byte	0x4
 919 004e 07       		.byte	0x7
 920 004f DD000000 		.4byte	.LASF5
 921 0053 02       		.uleb128 0x2
 922 0054 08       		.byte	0x8
 923 0055 05       		.byte	0x5
 924 0056 8D010000 		.4byte	.LASF6
 925 005a 02       		.uleb128 0x2
 926 005b 08       		.byte	0x8
 927 005c 07       		.byte	0x7
 928 005d 4B010000 		.4byte	.LASF7
 929 0061 03       		.uleb128 0x3
 930 0062 04       		.byte	0x4
 931 0063 05       		.byte	0x5
 932 0064 696E7400 		.ascii	"int\000"
 933 0068 02       		.uleb128 0x2
 934 0069 04       		.byte	0x4
 935 006a 07       		.byte	0x7
 936 006b 2B010000 		.4byte	.LASF8
 937 006f 04       		.uleb128 0x4
 938 0070 E9010000 		.4byte	.LASF9
 939 0074 02       		.byte	0x2
 940 0075 5B       		.byte	0x5b
 941 0076 30000000 		.4byte	0x30
 942 007a 04       		.uleb128 0x4
 943 007b 24010000 		.4byte	.LASF10
 944 007f 02       		.byte	0x2
 945 0080 5C       		.byte	0x5c
 946 0081 3E000000 		.4byte	0x3e
 947 0085 02       		.uleb128 0x2
 948 0086 04       		.byte	0x4
 949 0087 04       		.byte	0x4
 950 0088 A7000000 		.4byte	.LASF11
 951 008c 02       		.uleb128 0x2
 952 008d 08       		.byte	0x8
 953 008e 04       		.byte	0x4
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 26


 954 008f 15010000 		.4byte	.LASF12
 955 0093 02       		.uleb128 0x2
 956 0094 01       		.byte	0x1
 957 0095 08       		.byte	0x8
 958 0096 B8010000 		.4byte	.LASF13
 959 009a 04       		.uleb128 0x4
 960 009b D8000000 		.4byte	.LASF14
 961 009f 02       		.byte	0x2
 962 00a0 F0       		.byte	0xf0
 963 00a1 A5000000 		.4byte	0xa5
 964 00a5 05       		.uleb128 0x5
 965 00a6 6F000000 		.4byte	0x6f
 966 00aa 04       		.uleb128 0x4
 967 00ab 00000000 		.4byte	.LASF15
 968 00af 02       		.byte	0x2
 969 00b0 F1       		.byte	0xf1
 970 00b1 B5000000 		.4byte	0xb5
 971 00b5 05       		.uleb128 0x5
 972 00b6 7A000000 		.4byte	0x7a
 973 00ba 06       		.uleb128 0x6
 974 00bb 01       		.byte	0x1
 975 00bc 38010000 		.4byte	.LASF16
 976 00c0 01       		.byte	0x1
 977 00c1 2D       		.byte	0x2d
 978 00c2 01       		.byte	0x1
 979 00c3 00000000 		.4byte	.LFB0
 980 00c7 42000000 		.4byte	.LFE0
 981 00cb 00000000 		.4byte	.LLST0
 982 00cf 01       		.byte	0x1
 983 00d0 06       		.uleb128 0x6
 984 00d1 01       		.byte	0x1
 985 00d2 76000000 		.4byte	.LASF17
 986 00d6 01       		.byte	0x1
 987 00d7 47       		.byte	0x47
 988 00d8 01       		.byte	0x1
 989 00d9 00000000 		.4byte	.LFB1
 990 00dd 42000000 		.4byte	.LFE1
 991 00e1 2C000000 		.4byte	.LLST1
 992 00e5 01       		.byte	0x1
 993 00e6 07       		.uleb128 0x7
 994 00e7 01       		.byte	0x1
 995 00e8 5F000000 		.4byte	.LASF18
 996 00ec 01       		.byte	0x1
 997 00ed 64       		.byte	0x64
 998 00ee 01       		.byte	0x1
 999 00ef 00000000 		.4byte	.LFB2
 1000 00f3 F8000000 		.4byte	.LFE2
 1001 00f7 58000000 		.4byte	.LLST2
 1002 00fb 01       		.byte	0x1
 1003 00fc 19010000 		.4byte	0x119
 1004 0100 08       		.uleb128 0x8
 1005 0101 1A000000 		.4byte	.LBB2
 1006 0105 EE000000 		.4byte	.LBE2
 1007 0109 09       		.uleb128 0x9
 1008 010a 2C000000 		.4byte	.LASF24
 1009 010e 01       		.byte	0x1
 1010 010f 69       		.byte	0x69
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 27


 1011 0110 7A000000 		.4byte	0x7a
 1012 0114 02       		.byte	0x2
 1013 0115 91       		.byte	0x91
 1014 0116 76       		.sleb128 -10
 1015 0117 00       		.byte	0
 1016 0118 00       		.byte	0
 1017 0119 07       		.uleb128 0x7
 1018 011a 01       		.byte	0x1
 1019 011b CF010000 		.4byte	.LASF19
 1020 011f 01       		.byte	0x1
 1021 0120 9D       		.byte	0x9d
 1022 0121 01       		.byte	0x1
 1023 0122 00000000 		.4byte	.LFB3
 1024 0126 54000000 		.4byte	.LFE3
 1025 012a 90000000 		.4byte	.LLST3
 1026 012e 01       		.byte	0x1
 1027 012f 42010000 		.4byte	0x142
 1028 0133 0A       		.uleb128 0xa
 1029 0134 26000000 		.4byte	.LASF21
 1030 0138 01       		.byte	0x1
 1031 0139 9D       		.byte	0x9d
 1032 013a 6F000000 		.4byte	0x6f
 1033 013e 02       		.byte	0x2
 1034 013f 91       		.byte	0x91
 1035 0140 77       		.sleb128 -9
 1036 0141 00       		.byte	0
 1037 0142 0B       		.uleb128 0xb
 1038 0143 01       		.byte	0x1
 1039 0144 06000000 		.4byte	.LASF20
 1040 0148 01       		.byte	0x1
 1041 0149 C1       		.byte	0xc1
 1042 014a 01       		.byte	0x1
 1043 014b 00000000 		.4byte	.LFB4
 1044 014f E8010000 		.4byte	.LFE4
 1045 0153 C8000000 		.4byte	.LLST4
 1046 0157 01       		.byte	0x1
 1047 0158 A3010000 		.4byte	0x1a3
 1048 015c 0A       		.uleb128 0xa
 1049 015d 0A010000 		.4byte	.LASF22
 1050 0161 01       		.byte	0x1
 1051 0162 C1       		.byte	0xc1
 1052 0163 7A000000 		.4byte	0x7a
 1053 0167 02       		.byte	0x2
 1054 0168 91       		.byte	0x91
 1055 0169 6E       		.sleb128 -18
 1056 016a 0A       		.uleb128 0xa
 1057 016b 1C010000 		.4byte	.LASF23
 1058 016f 01       		.byte	0x1
 1059 0170 C1       		.byte	0xc1
 1060 0171 6F000000 		.4byte	0x6f
 1061 0175 02       		.byte	0x2
 1062 0176 91       		.byte	0x91
 1063 0177 6D       		.sleb128 -19
 1064 0178 09       		.uleb128 0x9
 1065 0179 57020000 		.4byte	.LASF25
 1066 017d 01       		.byte	0x1
 1067 017e C4       		.byte	0xc4
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 28


 1068 017f 6F000000 		.4byte	0x6f
 1069 0183 02       		.byte	0x2
 1070 0184 91       		.byte	0x91
 1071 0185 73       		.sleb128 -13
 1072 0186 09       		.uleb128 0x9
 1073 0187 02010000 		.4byte	.LASF26
 1074 018b 01       		.byte	0x1
 1075 018c C6       		.byte	0xc6
 1076 018d 6F000000 		.4byte	0x6f
 1077 0191 02       		.byte	0x2
 1078 0192 91       		.byte	0x91
 1079 0193 77       		.sleb128 -9
 1080 0194 09       		.uleb128 0x9
 1081 0195 2C000000 		.4byte	.LASF24
 1082 0199 01       		.byte	0x1
 1083 019a C7       		.byte	0xc7
 1084 019b 7A000000 		.4byte	0x7a
 1085 019f 02       		.byte	0x2
 1086 01a0 91       		.byte	0x91
 1087 01a1 74       		.sleb128 -12
 1088 01a2 00       		.byte	0
 1089 01a3 0C       		.uleb128 0xc
 1090 01a4 01       		.byte	0x1
 1091 01a5 7E020000 		.4byte	.LASF30
 1092 01a9 01       		.byte	0x1
 1093 01aa 2901     		.2byte	0x129
 1094 01ac 01       		.byte	0x1
 1095 01ad 7A000000 		.4byte	0x7a
 1096 01b1 00000000 		.4byte	.LFB5
 1097 01b5 18000000 		.4byte	.LFE5
 1098 01b9 00010000 		.4byte	.LLST5
 1099 01bd 01       		.byte	0x1
 1100 01be 0D       		.uleb128 0xd
 1101 01bf 01       		.byte	0x1
 1102 01c0 9B010000 		.4byte	.LASF27
 1103 01c4 01       		.byte	0x1
 1104 01c5 4C01     		.2byte	0x14c
 1105 01c7 01       		.byte	0x1
 1106 01c8 00000000 		.4byte	.LFB6
 1107 01cc 3A000000 		.4byte	.LFE6
 1108 01d0 2C010000 		.4byte	.LLST6
 1109 01d4 01       		.byte	0x1
 1110 01d5 E9010000 		.4byte	0x1e9
 1111 01d9 0E       		.uleb128 0xe
 1112 01da 81010000 		.4byte	.LASF28
 1113 01de 01       		.byte	0x1
 1114 01df 4C01     		.2byte	0x14c
 1115 01e1 6F000000 		.4byte	0x6f
 1116 01e5 02       		.byte	0x2
 1117 01e6 91       		.byte	0x91
 1118 01e7 77       		.sleb128 -9
 1119 01e8 00       		.byte	0
 1120 01e9 0D       		.uleb128 0xd
 1121 01ea 01       		.byte	0x1
 1122 01eb 88000000 		.4byte	.LASF29
 1123 01ef 01       		.byte	0x1
 1124 01f0 6F01     		.2byte	0x16f
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 29


 1125 01f2 01       		.byte	0x1
 1126 01f3 00000000 		.4byte	.LFB7
 1127 01f7 3C000000 		.4byte	.LFE7
 1128 01fb 64010000 		.4byte	.LLST7
 1129 01ff 01       		.byte	0x1
 1130 0200 14020000 		.4byte	0x214
 1131 0204 0E       		.uleb128 0xe
 1132 0205 81010000 		.4byte	.LASF28
 1133 0209 01       		.byte	0x1
 1134 020a 6F01     		.2byte	0x16f
 1135 020c 6F000000 		.4byte	0x6f
 1136 0210 02       		.byte	0x2
 1137 0211 91       		.byte	0x91
 1138 0212 77       		.sleb128 -9
 1139 0213 00       		.byte	0
 1140 0214 0C       		.uleb128 0xc
 1141 0215 01       		.byte	0x1
 1142 0216 BB000000 		.4byte	.LASF31
 1143 021a 01       		.byte	0x1
 1144 021b 8401     		.2byte	0x184
 1145 021d 01       		.byte	0x1
 1146 021e 6F000000 		.4byte	0x6f
 1147 0222 00000000 		.4byte	.LFB8
 1148 0226 1E000000 		.4byte	.LFE8
 1149 022a 9C010000 		.4byte	.LLST8
 1150 022e 01       		.byte	0x1
 1151 022f 0F       		.uleb128 0xf
 1152 0230 01       		.byte	0x1
 1153 0231 62010000 		.4byte	.LASF32
 1154 0235 01       		.byte	0x1
 1155 0236 A301     		.2byte	0x1a3
 1156 0238 01       		.byte	0x1
 1157 0239 00000000 		.4byte	.LFB9
 1158 023d F4000000 		.4byte	.LFE9
 1159 0241 C8010000 		.4byte	.LLST9
 1160 0245 01       		.byte	0x1
 1161 0246 78020000 		.4byte	0x278
 1162 024a 0E       		.uleb128 0xe
 1163 024b 68020000 		.4byte	.LASF33
 1164 024f 01       		.byte	0x1
 1165 0250 A301     		.2byte	0x1a3
 1166 0252 6F000000 		.4byte	0x6f
 1167 0256 02       		.byte	0x2
 1168 0257 91       		.byte	0x91
 1169 0258 6F       		.sleb128 -17
 1170 0259 10       		.uleb128 0x10
 1171 025a BD010000 		.4byte	.LASF34
 1172 025e 01       		.byte	0x1
 1173 025f A501     		.2byte	0x1a5
 1174 0261 7A000000 		.4byte	0x7a
 1175 0265 02       		.byte	0x2
 1176 0266 91       		.byte	0x91
 1177 0267 76       		.sleb128 -10
 1178 0268 10       		.uleb128 0x10
 1179 0269 9E020000 		.4byte	.LASF35
 1180 026d 01       		.byte	0x1
 1181 026e A601     		.2byte	0x1a6
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 30


 1182 0270 6F000000 		.4byte	0x6f
 1183 0274 02       		.byte	0x2
 1184 0275 91       		.byte	0x91
 1185 0276 75       		.sleb128 -11
 1186 0277 00       		.byte	0
 1187 0278 0C       		.uleb128 0xc
 1188 0279 01       		.byte	0x1
 1189 027a 38020000 		.4byte	.LASF36
 1190 027e 01       		.byte	0x1
 1191 027f D001     		.2byte	0x1d0
 1192 0281 01       		.byte	0x1
 1193 0282 6F000000 		.4byte	0x6f
 1194 0286 00000000 		.4byte	.LFB10
 1195 028a 1E000000 		.4byte	.LFE10
 1196 028e 00020000 		.4byte	.LLST10
 1197 0292 01       		.byte	0x1
 1198 0293 00       		.byte	0
 1199              		.section	.debug_abbrev,"",%progbits
 1200              	.Ldebug_abbrev0:
 1201 0000 01       		.uleb128 0x1
 1202 0001 11       		.uleb128 0x11
 1203 0002 01       		.byte	0x1
 1204 0003 25       		.uleb128 0x25
 1205 0004 0E       		.uleb128 0xe
 1206 0005 13       		.uleb128 0x13
 1207 0006 0B       		.uleb128 0xb
 1208 0007 03       		.uleb128 0x3
 1209 0008 0E       		.uleb128 0xe
 1210 0009 1B       		.uleb128 0x1b
 1211 000a 0E       		.uleb128 0xe
 1212 000b 55       		.uleb128 0x55
 1213 000c 06       		.uleb128 0x6
 1214 000d 11       		.uleb128 0x11
 1215 000e 01       		.uleb128 0x1
 1216 000f 52       		.uleb128 0x52
 1217 0010 01       		.uleb128 0x1
 1218 0011 10       		.uleb128 0x10
 1219 0012 06       		.uleb128 0x6
 1220 0013 00       		.byte	0
 1221 0014 00       		.byte	0
 1222 0015 02       		.uleb128 0x2
 1223 0016 24       		.uleb128 0x24
 1224 0017 00       		.byte	0
 1225 0018 0B       		.uleb128 0xb
 1226 0019 0B       		.uleb128 0xb
 1227 001a 3E       		.uleb128 0x3e
 1228 001b 0B       		.uleb128 0xb
 1229 001c 03       		.uleb128 0x3
 1230 001d 0E       		.uleb128 0xe
 1231 001e 00       		.byte	0
 1232 001f 00       		.byte	0
 1233 0020 03       		.uleb128 0x3
 1234 0021 24       		.uleb128 0x24
 1235 0022 00       		.byte	0
 1236 0023 0B       		.uleb128 0xb
 1237 0024 0B       		.uleb128 0xb
 1238 0025 3E       		.uleb128 0x3e
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 31


 1239 0026 0B       		.uleb128 0xb
 1240 0027 03       		.uleb128 0x3
 1241 0028 08       		.uleb128 0x8
 1242 0029 00       		.byte	0
 1243 002a 00       		.byte	0
 1244 002b 04       		.uleb128 0x4
 1245 002c 16       		.uleb128 0x16
 1246 002d 00       		.byte	0
 1247 002e 03       		.uleb128 0x3
 1248 002f 0E       		.uleb128 0xe
 1249 0030 3A       		.uleb128 0x3a
 1250 0031 0B       		.uleb128 0xb
 1251 0032 3B       		.uleb128 0x3b
 1252 0033 0B       		.uleb128 0xb
 1253 0034 49       		.uleb128 0x49
 1254 0035 13       		.uleb128 0x13
 1255 0036 00       		.byte	0
 1256 0037 00       		.byte	0
 1257 0038 05       		.uleb128 0x5
 1258 0039 35       		.uleb128 0x35
 1259 003a 00       		.byte	0
 1260 003b 49       		.uleb128 0x49
 1261 003c 13       		.uleb128 0x13
 1262 003d 00       		.byte	0
 1263 003e 00       		.byte	0
 1264 003f 06       		.uleb128 0x6
 1265 0040 2E       		.uleb128 0x2e
 1266 0041 00       		.byte	0
 1267 0042 3F       		.uleb128 0x3f
 1268 0043 0C       		.uleb128 0xc
 1269 0044 03       		.uleb128 0x3
 1270 0045 0E       		.uleb128 0xe
 1271 0046 3A       		.uleb128 0x3a
 1272 0047 0B       		.uleb128 0xb
 1273 0048 3B       		.uleb128 0x3b
 1274 0049 0B       		.uleb128 0xb
 1275 004a 27       		.uleb128 0x27
 1276 004b 0C       		.uleb128 0xc
 1277 004c 11       		.uleb128 0x11
 1278 004d 01       		.uleb128 0x1
 1279 004e 12       		.uleb128 0x12
 1280 004f 01       		.uleb128 0x1
 1281 0050 40       		.uleb128 0x40
 1282 0051 06       		.uleb128 0x6
 1283 0052 9742     		.uleb128 0x2117
 1284 0054 0C       		.uleb128 0xc
 1285 0055 00       		.byte	0
 1286 0056 00       		.byte	0
 1287 0057 07       		.uleb128 0x7
 1288 0058 2E       		.uleb128 0x2e
 1289 0059 01       		.byte	0x1
 1290 005a 3F       		.uleb128 0x3f
 1291 005b 0C       		.uleb128 0xc
 1292 005c 03       		.uleb128 0x3
 1293 005d 0E       		.uleb128 0xe
 1294 005e 3A       		.uleb128 0x3a
 1295 005f 0B       		.uleb128 0xb
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 32


 1296 0060 3B       		.uleb128 0x3b
 1297 0061 0B       		.uleb128 0xb
 1298 0062 27       		.uleb128 0x27
 1299 0063 0C       		.uleb128 0xc
 1300 0064 11       		.uleb128 0x11
 1301 0065 01       		.uleb128 0x1
 1302 0066 12       		.uleb128 0x12
 1303 0067 01       		.uleb128 0x1
 1304 0068 40       		.uleb128 0x40
 1305 0069 06       		.uleb128 0x6
 1306 006a 9742     		.uleb128 0x2117
 1307 006c 0C       		.uleb128 0xc
 1308 006d 01       		.uleb128 0x1
 1309 006e 13       		.uleb128 0x13
 1310 006f 00       		.byte	0
 1311 0070 00       		.byte	0
 1312 0071 08       		.uleb128 0x8
 1313 0072 0B       		.uleb128 0xb
 1314 0073 01       		.byte	0x1
 1315 0074 11       		.uleb128 0x11
 1316 0075 01       		.uleb128 0x1
 1317 0076 12       		.uleb128 0x12
 1318 0077 01       		.uleb128 0x1
 1319 0078 00       		.byte	0
 1320 0079 00       		.byte	0
 1321 007a 09       		.uleb128 0x9
 1322 007b 34       		.uleb128 0x34
 1323 007c 00       		.byte	0
 1324 007d 03       		.uleb128 0x3
 1325 007e 0E       		.uleb128 0xe
 1326 007f 3A       		.uleb128 0x3a
 1327 0080 0B       		.uleb128 0xb
 1328 0081 3B       		.uleb128 0x3b
 1329 0082 0B       		.uleb128 0xb
 1330 0083 49       		.uleb128 0x49
 1331 0084 13       		.uleb128 0x13
 1332 0085 02       		.uleb128 0x2
 1333 0086 0A       		.uleb128 0xa
 1334 0087 00       		.byte	0
 1335 0088 00       		.byte	0
 1336 0089 0A       		.uleb128 0xa
 1337 008a 05       		.uleb128 0x5
 1338 008b 00       		.byte	0
 1339 008c 03       		.uleb128 0x3
 1340 008d 0E       		.uleb128 0xe
 1341 008e 3A       		.uleb128 0x3a
 1342 008f 0B       		.uleb128 0xb
 1343 0090 3B       		.uleb128 0x3b
 1344 0091 0B       		.uleb128 0xb
 1345 0092 49       		.uleb128 0x49
 1346 0093 13       		.uleb128 0x13
 1347 0094 02       		.uleb128 0x2
 1348 0095 0A       		.uleb128 0xa
 1349 0096 00       		.byte	0
 1350 0097 00       		.byte	0
 1351 0098 0B       		.uleb128 0xb
 1352 0099 2E       		.uleb128 0x2e
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 33


 1353 009a 01       		.byte	0x1
 1354 009b 3F       		.uleb128 0x3f
 1355 009c 0C       		.uleb128 0xc
 1356 009d 03       		.uleb128 0x3
 1357 009e 0E       		.uleb128 0xe
 1358 009f 3A       		.uleb128 0x3a
 1359 00a0 0B       		.uleb128 0xb
 1360 00a1 3B       		.uleb128 0x3b
 1361 00a2 0B       		.uleb128 0xb
 1362 00a3 27       		.uleb128 0x27
 1363 00a4 0C       		.uleb128 0xc
 1364 00a5 11       		.uleb128 0x11
 1365 00a6 01       		.uleb128 0x1
 1366 00a7 12       		.uleb128 0x12
 1367 00a8 01       		.uleb128 0x1
 1368 00a9 40       		.uleb128 0x40
 1369 00aa 06       		.uleb128 0x6
 1370 00ab 9642     		.uleb128 0x2116
 1371 00ad 0C       		.uleb128 0xc
 1372 00ae 01       		.uleb128 0x1
 1373 00af 13       		.uleb128 0x13
 1374 00b0 00       		.byte	0
 1375 00b1 00       		.byte	0
 1376 00b2 0C       		.uleb128 0xc
 1377 00b3 2E       		.uleb128 0x2e
 1378 00b4 00       		.byte	0
 1379 00b5 3F       		.uleb128 0x3f
 1380 00b6 0C       		.uleb128 0xc
 1381 00b7 03       		.uleb128 0x3
 1382 00b8 0E       		.uleb128 0xe
 1383 00b9 3A       		.uleb128 0x3a
 1384 00ba 0B       		.uleb128 0xb
 1385 00bb 3B       		.uleb128 0x3b
 1386 00bc 05       		.uleb128 0x5
 1387 00bd 27       		.uleb128 0x27
 1388 00be 0C       		.uleb128 0xc
 1389 00bf 49       		.uleb128 0x49
 1390 00c0 13       		.uleb128 0x13
 1391 00c1 11       		.uleb128 0x11
 1392 00c2 01       		.uleb128 0x1
 1393 00c3 12       		.uleb128 0x12
 1394 00c4 01       		.uleb128 0x1
 1395 00c5 40       		.uleb128 0x40
 1396 00c6 06       		.uleb128 0x6
 1397 00c7 9742     		.uleb128 0x2117
 1398 00c9 0C       		.uleb128 0xc
 1399 00ca 00       		.byte	0
 1400 00cb 00       		.byte	0
 1401 00cc 0D       		.uleb128 0xd
 1402 00cd 2E       		.uleb128 0x2e
 1403 00ce 01       		.byte	0x1
 1404 00cf 3F       		.uleb128 0x3f
 1405 00d0 0C       		.uleb128 0xc
 1406 00d1 03       		.uleb128 0x3
 1407 00d2 0E       		.uleb128 0xe
 1408 00d3 3A       		.uleb128 0x3a
 1409 00d4 0B       		.uleb128 0xb
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 34


 1410 00d5 3B       		.uleb128 0x3b
 1411 00d6 05       		.uleb128 0x5
 1412 00d7 27       		.uleb128 0x27
 1413 00d8 0C       		.uleb128 0xc
 1414 00d9 11       		.uleb128 0x11
 1415 00da 01       		.uleb128 0x1
 1416 00db 12       		.uleb128 0x12
 1417 00dc 01       		.uleb128 0x1
 1418 00dd 40       		.uleb128 0x40
 1419 00de 06       		.uleb128 0x6
 1420 00df 9742     		.uleb128 0x2117
 1421 00e1 0C       		.uleb128 0xc
 1422 00e2 01       		.uleb128 0x1
 1423 00e3 13       		.uleb128 0x13
 1424 00e4 00       		.byte	0
 1425 00e5 00       		.byte	0
 1426 00e6 0E       		.uleb128 0xe
 1427 00e7 05       		.uleb128 0x5
 1428 00e8 00       		.byte	0
 1429 00e9 03       		.uleb128 0x3
 1430 00ea 0E       		.uleb128 0xe
 1431 00eb 3A       		.uleb128 0x3a
 1432 00ec 0B       		.uleb128 0xb
 1433 00ed 3B       		.uleb128 0x3b
 1434 00ee 05       		.uleb128 0x5
 1435 00ef 49       		.uleb128 0x49
 1436 00f0 13       		.uleb128 0x13
 1437 00f1 02       		.uleb128 0x2
 1438 00f2 0A       		.uleb128 0xa
 1439 00f3 00       		.byte	0
 1440 00f4 00       		.byte	0
 1441 00f5 0F       		.uleb128 0xf
 1442 00f6 2E       		.uleb128 0x2e
 1443 00f7 01       		.byte	0x1
 1444 00f8 3F       		.uleb128 0x3f
 1445 00f9 0C       		.uleb128 0xc
 1446 00fa 03       		.uleb128 0x3
 1447 00fb 0E       		.uleb128 0xe
 1448 00fc 3A       		.uleb128 0x3a
 1449 00fd 0B       		.uleb128 0xb
 1450 00fe 3B       		.uleb128 0x3b
 1451 00ff 05       		.uleb128 0x5
 1452 0100 27       		.uleb128 0x27
 1453 0101 0C       		.uleb128 0xc
 1454 0102 11       		.uleb128 0x11
 1455 0103 01       		.uleb128 0x1
 1456 0104 12       		.uleb128 0x12
 1457 0105 01       		.uleb128 0x1
 1458 0106 40       		.uleb128 0x40
 1459 0107 06       		.uleb128 0x6
 1460 0108 9642     		.uleb128 0x2116
 1461 010a 0C       		.uleb128 0xc
 1462 010b 01       		.uleb128 0x1
 1463 010c 13       		.uleb128 0x13
 1464 010d 00       		.byte	0
 1465 010e 00       		.byte	0
 1466 010f 10       		.uleb128 0x10
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 35


 1467 0110 34       		.uleb128 0x34
 1468 0111 00       		.byte	0
 1469 0112 03       		.uleb128 0x3
 1470 0113 0E       		.uleb128 0xe
 1471 0114 3A       		.uleb128 0x3a
 1472 0115 0B       		.uleb128 0xb
 1473 0116 3B       		.uleb128 0x3b
 1474 0117 05       		.uleb128 0x5
 1475 0118 49       		.uleb128 0x49
 1476 0119 13       		.uleb128 0x13
 1477 011a 02       		.uleb128 0x2
 1478 011b 0A       		.uleb128 0xa
 1479 011c 00       		.byte	0
 1480 011d 00       		.byte	0
 1481 011e 00       		.byte	0
 1482              		.section	.debug_loc,"",%progbits
 1483              	.Ldebug_loc0:
 1484              	.LLST0:
 1485 0000 00000000 		.4byte	.LFB0
 1486 0004 02000000 		.4byte	.LCFI0
 1487 0008 0200     		.2byte	0x2
 1488 000a 7D       		.byte	0x7d
 1489 000b 00       		.sleb128 0
 1490 000c 02000000 		.4byte	.LCFI0
 1491 0010 04000000 		.4byte	.LCFI1
 1492 0014 0200     		.2byte	0x2
 1493 0016 7D       		.byte	0x7d
 1494 0017 04       		.sleb128 4
 1495 0018 04000000 		.4byte	.LCFI1
 1496 001c 42000000 		.4byte	.LFE0
 1497 0020 0200     		.2byte	0x2
 1498 0022 77       		.byte	0x77
 1499 0023 04       		.sleb128 4
 1500 0024 00000000 		.4byte	0
 1501 0028 00000000 		.4byte	0
 1502              	.LLST1:
 1503 002c 00000000 		.4byte	.LFB1
 1504 0030 02000000 		.4byte	.LCFI2
 1505 0034 0200     		.2byte	0x2
 1506 0036 7D       		.byte	0x7d
 1507 0037 00       		.sleb128 0
 1508 0038 02000000 		.4byte	.LCFI2
 1509 003c 04000000 		.4byte	.LCFI3
 1510 0040 0200     		.2byte	0x2
 1511 0042 7D       		.byte	0x7d
 1512 0043 04       		.sleb128 4
 1513 0044 04000000 		.4byte	.LCFI3
 1514 0048 42000000 		.4byte	.LFE1
 1515 004c 0200     		.2byte	0x2
 1516 004e 77       		.byte	0x77
 1517 004f 04       		.sleb128 4
 1518 0050 00000000 		.4byte	0
 1519 0054 00000000 		.4byte	0
 1520              	.LLST2:
 1521 0058 00000000 		.4byte	.LFB2
 1522 005c 02000000 		.4byte	.LCFI4
 1523 0060 0200     		.2byte	0x2
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 36


 1524 0062 7D       		.byte	0x7d
 1525 0063 00       		.sleb128 0
 1526 0064 02000000 		.4byte	.LCFI4
 1527 0068 04000000 		.4byte	.LCFI5
 1528 006c 0200     		.2byte	0x2
 1529 006e 7D       		.byte	0x7d
 1530 006f 04       		.sleb128 4
 1531 0070 04000000 		.4byte	.LCFI5
 1532 0074 06000000 		.4byte	.LCFI6
 1533 0078 0200     		.2byte	0x2
 1534 007a 7D       		.byte	0x7d
 1535 007b 10       		.sleb128 16
 1536 007c 06000000 		.4byte	.LCFI6
 1537 0080 F8000000 		.4byte	.LFE2
 1538 0084 0200     		.2byte	0x2
 1539 0086 77       		.byte	0x77
 1540 0087 10       		.sleb128 16
 1541 0088 00000000 		.4byte	0
 1542 008c 00000000 		.4byte	0
 1543              	.LLST3:
 1544 0090 00000000 		.4byte	.LFB3
 1545 0094 02000000 		.4byte	.LCFI7
 1546 0098 0200     		.2byte	0x2
 1547 009a 7D       		.byte	0x7d
 1548 009b 00       		.sleb128 0
 1549 009c 02000000 		.4byte	.LCFI7
 1550 00a0 04000000 		.4byte	.LCFI8
 1551 00a4 0200     		.2byte	0x2
 1552 00a6 7D       		.byte	0x7d
 1553 00a7 04       		.sleb128 4
 1554 00a8 04000000 		.4byte	.LCFI8
 1555 00ac 06000000 		.4byte	.LCFI9
 1556 00b0 0200     		.2byte	0x2
 1557 00b2 7D       		.byte	0x7d
 1558 00b3 10       		.sleb128 16
 1559 00b4 06000000 		.4byte	.LCFI9
 1560 00b8 54000000 		.4byte	.LFE3
 1561 00bc 0200     		.2byte	0x2
 1562 00be 77       		.byte	0x77
 1563 00bf 10       		.sleb128 16
 1564 00c0 00000000 		.4byte	0
 1565 00c4 00000000 		.4byte	0
 1566              	.LLST4:
 1567 00c8 00000000 		.4byte	.LFB4
 1568 00cc 02000000 		.4byte	.LCFI10
 1569 00d0 0200     		.2byte	0x2
 1570 00d2 7D       		.byte	0x7d
 1571 00d3 00       		.sleb128 0
 1572 00d4 02000000 		.4byte	.LCFI10
 1573 00d8 04000000 		.4byte	.LCFI11
 1574 00dc 0200     		.2byte	0x2
 1575 00de 7D       		.byte	0x7d
 1576 00df 08       		.sleb128 8
 1577 00e0 04000000 		.4byte	.LCFI11
 1578 00e4 06000000 		.4byte	.LCFI12
 1579 00e8 0200     		.2byte	0x2
 1580 00ea 7D       		.byte	0x7d
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 37


 1581 00eb 18       		.sleb128 24
 1582 00ec 06000000 		.4byte	.LCFI12
 1583 00f0 E8010000 		.4byte	.LFE4
 1584 00f4 0200     		.2byte	0x2
 1585 00f6 77       		.byte	0x77
 1586 00f7 18       		.sleb128 24
 1587 00f8 00000000 		.4byte	0
 1588 00fc 00000000 		.4byte	0
 1589              	.LLST5:
 1590 0100 00000000 		.4byte	.LFB5
 1591 0104 02000000 		.4byte	.LCFI13
 1592 0108 0200     		.2byte	0x2
 1593 010a 7D       		.byte	0x7d
 1594 010b 00       		.sleb128 0
 1595 010c 02000000 		.4byte	.LCFI13
 1596 0110 04000000 		.4byte	.LCFI14
 1597 0114 0200     		.2byte	0x2
 1598 0116 7D       		.byte	0x7d
 1599 0117 04       		.sleb128 4
 1600 0118 04000000 		.4byte	.LCFI14
 1601 011c 18000000 		.4byte	.LFE5
 1602 0120 0200     		.2byte	0x2
 1603 0122 77       		.byte	0x77
 1604 0123 04       		.sleb128 4
 1605 0124 00000000 		.4byte	0
 1606 0128 00000000 		.4byte	0
 1607              	.LLST6:
 1608 012c 00000000 		.4byte	.LFB6
 1609 0130 02000000 		.4byte	.LCFI15
 1610 0134 0200     		.2byte	0x2
 1611 0136 7D       		.byte	0x7d
 1612 0137 00       		.sleb128 0
 1613 0138 02000000 		.4byte	.LCFI15
 1614 013c 04000000 		.4byte	.LCFI16
 1615 0140 0200     		.2byte	0x2
 1616 0142 7D       		.byte	0x7d
 1617 0143 04       		.sleb128 4
 1618 0144 04000000 		.4byte	.LCFI16
 1619 0148 06000000 		.4byte	.LCFI17
 1620 014c 0200     		.2byte	0x2
 1621 014e 7D       		.byte	0x7d
 1622 014f 10       		.sleb128 16
 1623 0150 06000000 		.4byte	.LCFI17
 1624 0154 3A000000 		.4byte	.LFE6
 1625 0158 0200     		.2byte	0x2
 1626 015a 77       		.byte	0x77
 1627 015b 10       		.sleb128 16
 1628 015c 00000000 		.4byte	0
 1629 0160 00000000 		.4byte	0
 1630              	.LLST7:
 1631 0164 00000000 		.4byte	.LFB7
 1632 0168 02000000 		.4byte	.LCFI18
 1633 016c 0200     		.2byte	0x2
 1634 016e 7D       		.byte	0x7d
 1635 016f 00       		.sleb128 0
 1636 0170 02000000 		.4byte	.LCFI18
 1637 0174 04000000 		.4byte	.LCFI19
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 38


 1638 0178 0200     		.2byte	0x2
 1639 017a 7D       		.byte	0x7d
 1640 017b 04       		.sleb128 4
 1641 017c 04000000 		.4byte	.LCFI19
 1642 0180 06000000 		.4byte	.LCFI20
 1643 0184 0200     		.2byte	0x2
 1644 0186 7D       		.byte	0x7d
 1645 0187 10       		.sleb128 16
 1646 0188 06000000 		.4byte	.LCFI20
 1647 018c 3C000000 		.4byte	.LFE7
 1648 0190 0200     		.2byte	0x2
 1649 0192 77       		.byte	0x77
 1650 0193 10       		.sleb128 16
 1651 0194 00000000 		.4byte	0
 1652 0198 00000000 		.4byte	0
 1653              	.LLST8:
 1654 019c 00000000 		.4byte	.LFB8
 1655 01a0 02000000 		.4byte	.LCFI21
 1656 01a4 0200     		.2byte	0x2
 1657 01a6 7D       		.byte	0x7d
 1658 01a7 00       		.sleb128 0
 1659 01a8 02000000 		.4byte	.LCFI21
 1660 01ac 04000000 		.4byte	.LCFI22
 1661 01b0 0200     		.2byte	0x2
 1662 01b2 7D       		.byte	0x7d
 1663 01b3 04       		.sleb128 4
 1664 01b4 04000000 		.4byte	.LCFI22
 1665 01b8 1E000000 		.4byte	.LFE8
 1666 01bc 0200     		.2byte	0x2
 1667 01be 77       		.byte	0x77
 1668 01bf 04       		.sleb128 4
 1669 01c0 00000000 		.4byte	0
 1670 01c4 00000000 		.4byte	0
 1671              	.LLST9:
 1672 01c8 00000000 		.4byte	.LFB9
 1673 01cc 02000000 		.4byte	.LCFI23
 1674 01d0 0200     		.2byte	0x2
 1675 01d2 7D       		.byte	0x7d
 1676 01d3 00       		.sleb128 0
 1677 01d4 02000000 		.4byte	.LCFI23
 1678 01d8 04000000 		.4byte	.LCFI24
 1679 01dc 0200     		.2byte	0x2
 1680 01de 7D       		.byte	0x7d
 1681 01df 08       		.sleb128 8
 1682 01e0 04000000 		.4byte	.LCFI24
 1683 01e4 06000000 		.4byte	.LCFI25
 1684 01e8 0200     		.2byte	0x2
 1685 01ea 7D       		.byte	0x7d
 1686 01eb 18       		.sleb128 24
 1687 01ec 06000000 		.4byte	.LCFI25
 1688 01f0 F4000000 		.4byte	.LFE9
 1689 01f4 0200     		.2byte	0x2
 1690 01f6 77       		.byte	0x77
 1691 01f7 18       		.sleb128 24
 1692 01f8 00000000 		.4byte	0
 1693 01fc 00000000 		.4byte	0
 1694              	.LLST10:
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 39


 1695 0200 00000000 		.4byte	.LFB10
 1696 0204 02000000 		.4byte	.LCFI26
 1697 0208 0200     		.2byte	0x2
 1698 020a 7D       		.byte	0x7d
 1699 020b 00       		.sleb128 0
 1700 020c 02000000 		.4byte	.LCFI26
 1701 0210 04000000 		.4byte	.LCFI27
 1702 0214 0200     		.2byte	0x2
 1703 0216 7D       		.byte	0x7d
 1704 0217 04       		.sleb128 4
 1705 0218 04000000 		.4byte	.LCFI27
 1706 021c 1E000000 		.4byte	.LFE10
 1707 0220 0200     		.2byte	0x2
 1708 0222 77       		.byte	0x77
 1709 0223 04       		.sleb128 4
 1710 0224 00000000 		.4byte	0
 1711 0228 00000000 		.4byte	0
 1712              		.section	.debug_aranges,"",%progbits
 1713 0000 6C000000 		.4byte	0x6c
 1714 0004 0200     		.2byte	0x2
 1715 0006 00000000 		.4byte	.Ldebug_info0
 1716 000a 04       		.byte	0x4
 1717 000b 00       		.byte	0
 1718 000c 0000     		.2byte	0
 1719 000e 0000     		.2byte	0
 1720 0010 00000000 		.4byte	.LFB0
 1721 0014 42000000 		.4byte	.LFE0-.LFB0
 1722 0018 00000000 		.4byte	.LFB1
 1723 001c 42000000 		.4byte	.LFE1-.LFB1
 1724 0020 00000000 		.4byte	.LFB2
 1725 0024 F8000000 		.4byte	.LFE2-.LFB2
 1726 0028 00000000 		.4byte	.LFB3
 1727 002c 54000000 		.4byte	.LFE3-.LFB3
 1728 0030 00000000 		.4byte	.LFB4
 1729 0034 E8010000 		.4byte	.LFE4-.LFB4
 1730 0038 00000000 		.4byte	.LFB5
 1731 003c 18000000 		.4byte	.LFE5-.LFB5
 1732 0040 00000000 		.4byte	.LFB6
 1733 0044 3A000000 		.4byte	.LFE6-.LFB6
 1734 0048 00000000 		.4byte	.LFB7
 1735 004c 3C000000 		.4byte	.LFE7-.LFB7
 1736 0050 00000000 		.4byte	.LFB8
 1737 0054 1E000000 		.4byte	.LFE8-.LFB8
 1738 0058 00000000 		.4byte	.LFB9
 1739 005c F4000000 		.4byte	.LFE9-.LFB9
 1740 0060 00000000 		.4byte	.LFB10
 1741 0064 1E000000 		.4byte	.LFE10-.LFB10
 1742 0068 00000000 		.4byte	0
 1743 006c 00000000 		.4byte	0
 1744              		.section	.debug_ranges,"",%progbits
 1745              	.Ldebug_ranges0:
 1746 0000 00000000 		.4byte	.LFB0
 1747 0004 42000000 		.4byte	.LFE0
 1748 0008 00000000 		.4byte	.LFB1
 1749 000c 42000000 		.4byte	.LFE1
 1750 0010 00000000 		.4byte	.LFB2
 1751 0014 F8000000 		.4byte	.LFE2
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 40


 1752 0018 00000000 		.4byte	.LFB3
 1753 001c 54000000 		.4byte	.LFE3
 1754 0020 00000000 		.4byte	.LFB4
 1755 0024 E8010000 		.4byte	.LFE4
 1756 0028 00000000 		.4byte	.LFB5
 1757 002c 18000000 		.4byte	.LFE5
 1758 0030 00000000 		.4byte	.LFB6
 1759 0034 3A000000 		.4byte	.LFE6
 1760 0038 00000000 		.4byte	.LFB7
 1761 003c 3C000000 		.4byte	.LFE7
 1762 0040 00000000 		.4byte	.LFB8
 1763 0044 1E000000 		.4byte	.LFE8
 1764 0048 00000000 		.4byte	.LFB9
 1765 004c F4000000 		.4byte	.LFE9
 1766 0050 00000000 		.4byte	.LFB10
 1767 0054 1E000000 		.4byte	.LFE10
 1768 0058 00000000 		.4byte	0
 1769 005c 00000000 		.4byte	0
 1770              		.section	.debug_line,"",%progbits
 1771              	.Ldebug_line0:
 1772 0000 9F010000 		.section	.debug_str,"MS",%progbits,1
 1772      02004B00 
 1772      00000201 
 1772      FB0E0D00 
 1772      01010101 
 1773              	.LASF15:
 1774 0000 72656731 		.ascii	"reg16\000"
 1774      3600
 1775              	.LASF20:
 1776 0006 5350495F 		.ascii	"SPI_IntClock_SetDividerRegister\000"
 1776      496E7443 
 1776      6C6F636B 
 1776      5F536574 
 1776      44697669 
 1777              	.LASF21:
 1778 0026 73746174 		.ascii	"state\000"
 1778      6500
 1779              	.LASF24:
 1780 002c 6F6C6444 		.ascii	"oldDivider\000"
 1780      69766964 
 1780      657200
 1781              	.LASF38:
 1782 0037 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\SPI_IntClock.c\000"
 1782      6E657261 
 1782      7465645F 
 1782      536F7572 
 1782      63655C50 
 1783              	.LASF18:
 1784 005f 5350495F 		.ascii	"SPI_IntClock_StopBlock\000"
 1784      496E7443 
 1784      6C6F636B 
 1784      5F53746F 
 1784      70426C6F 
 1785              	.LASF17:
 1786 0076 5350495F 		.ascii	"SPI_IntClock_Stop\000"
 1786      496E7443 
 1786      6C6F636B 
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 41


 1786      5F53746F 
 1786      7000
 1787              	.LASF29:
 1788 0088 5350495F 		.ascii	"SPI_IntClock_ClearModeRegister\000"
 1788      496E7443 
 1788      6C6F636B 
 1788      5F436C65 
 1788      61724D6F 
 1789              	.LASF11:
 1790 00a7 666C6F61 		.ascii	"float\000"
 1790      7400
 1791              	.LASF1:
 1792 00ad 756E7369 		.ascii	"unsigned char\000"
 1792      676E6564 
 1792      20636861 
 1792      7200
 1793              	.LASF31:
 1794 00bb 5350495F 		.ascii	"SPI_IntClock_GetModeRegister\000"
 1794      496E7443 
 1794      6C6F636B 
 1794      5F476574 
 1794      4D6F6465 
 1795              	.LASF14:
 1796 00d8 72656738 		.ascii	"reg8\000"
 1796      00
 1797              	.LASF5:
 1798 00dd 6C6F6E67 		.ascii	"long unsigned int\000"
 1798      20756E73 
 1798      69676E65 
 1798      6420696E 
 1798      7400
 1799              	.LASF3:
 1800 00ef 73686F72 		.ascii	"short unsigned int\000"
 1800      7420756E 
 1800      7369676E 
 1800      65642069 
 1800      6E7400
 1801              	.LASF26:
 1802 0102 63757272 		.ascii	"currSrc\000"
 1802      53726300 
 1803              	.LASF22:
 1804 010a 636C6B44 		.ascii	"clkDivider\000"
 1804      69766964 
 1804      657200
 1805              	.LASF12:
 1806 0115 646F7562 		.ascii	"double\000"
 1806      6C6500
 1807              	.LASF23:
 1808 011c 72657374 		.ascii	"restart\000"
 1808      61727400 
 1809              	.LASF10:
 1810 0124 75696E74 		.ascii	"uint16\000"
 1810      313600
 1811              	.LASF8:
 1812 012b 756E7369 		.ascii	"unsigned int\000"
 1812      676E6564 
 1812      20696E74 
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 42


 1812      00
 1813              	.LASF16:
 1814 0138 5350495F 		.ascii	"SPI_IntClock_Start\000"
 1814      496E7443 
 1814      6C6F636B 
 1814      5F537461 
 1814      727400
 1815              	.LASF7:
 1816 014b 6C6F6E67 		.ascii	"long long unsigned int\000"
 1816      206C6F6E 
 1816      6720756E 
 1816      7369676E 
 1816      65642069 
 1817              	.LASF32:
 1818 0162 5350495F 		.ascii	"SPI_IntClock_SetSourceRegister\000"
 1818      496E7443 
 1818      6C6F636B 
 1818      5F536574 
 1818      536F7572 
 1819              	.LASF28:
 1820 0181 6D6F6465 		.ascii	"modeBitMask\000"
 1820      4269744D 
 1820      61736B00 
 1821              	.LASF6:
 1822 018d 6C6F6E67 		.ascii	"long long int\000"
 1822      206C6F6E 
 1822      6720696E 
 1822      7400
 1823              	.LASF27:
 1824 019b 5350495F 		.ascii	"SPI_IntClock_SetModeRegister\000"
 1824      496E7443 
 1824      6C6F636B 
 1824      5F536574 
 1824      4D6F6465 
 1825              	.LASF13:
 1826 01b8 63686172 		.ascii	"char\000"
 1826      00
 1827              	.LASF34:
 1828 01bd 63757272 		.ascii	"currDiv\000"
 1828      44697600 
 1829              	.LASF2:
 1830 01c5 73686F72 		.ascii	"short int\000"
 1830      7420696E 
 1830      7400
 1831              	.LASF19:
 1832 01cf 5350495F 		.ascii	"SPI_IntClock_StandbyPower\000"
 1832      496E7443 
 1832      6C6F636B 
 1832      5F537461 
 1832      6E646279 
 1833              	.LASF9:
 1834 01e9 75696E74 		.ascii	"uint8\000"
 1834      3800
 1835              	.LASF37:
 1836 01ef 474E5520 		.ascii	"GNU C 4.7.3 20130312 (release) [ARM/embedded-4_7-br"
 1836      4320342E 
 1836      372E3320 
ARM GAS  C:\Users\CHUCK~1.ERH\AppData\Local\Temp\ccJ4tSDW.s 			page 43


 1836      32303133 
 1836      30333132 
 1837 0222 616E6368 		.ascii	"anch revision 196615]\000"
 1837      20726576 
 1837      6973696F 
 1837      6E203139 
 1837      36363135 
 1838              	.LASF36:
 1839 0238 5350495F 		.ascii	"SPI_IntClock_GetSourceRegister\000"
 1839      496E7443 
 1839      6C6F636B 
 1839      5F476574 
 1839      536F7572 
 1840              	.LASF25:
 1841 0257 656E6162 		.ascii	"enabled\000"
 1841      6C656400 
 1842              	.LASF4:
 1843 025f 6C6F6E67 		.ascii	"long int\000"
 1843      20696E74 
 1843      00
 1844              	.LASF33:
 1845 0268 636C6B53 		.ascii	"clkSource\000"
 1845      6F757263 
 1845      6500
 1846              	.LASF0:
 1847 0272 7369676E 		.ascii	"signed char\000"
 1847      65642063 
 1847      68617200 
 1848              	.LASF30:
 1849 027e 5350495F 		.ascii	"SPI_IntClock_GetDividerRegister\000"
 1849      496E7443 
 1849      6C6F636B 
 1849      5F476574 
 1849      44697669 
 1850              	.LASF35:
 1851 029e 6F6C6453 		.ascii	"oldSrc\000"
 1851      726300
 1852              	.LASF39:
 1853 02a5 433A5C55 		.ascii	"C:\\Users\\chuck.erhardt\\Documents\\GitHub\\PSoC-W"
 1853      73657273 
 1853      5C636875 
 1853      636B2E65 
 1853      72686172 
 1854 02d3 35313030 		.ascii	"5100-Driver\\W5200Test_CustomPlatform.cydsn\000"
 1854      2D447269 
 1854      7665725C 
 1854      57353230 
 1854      30546573 
 1855              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.3 20130312 (release) [ARM/embedded-4_7-br
